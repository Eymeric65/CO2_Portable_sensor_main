/*
 * Display_EPD_W21.c
 *
 *  Created on: Jun 12, 2024
 *      Author: Utilisateur
 */

#include "Display_EPD_W21_spi.h"
#include "Display_EPD_W21.h"

//Delay Functions
void delay_xms(unsigned int xms)
{
	unsigned int i;
	while(xms--)
	{
		i=12000;
		while(i--);
	}
}

////////////////////////////////////E-paper demo//////////////////////////////////////////////////////////
//Busy function
void Epaper_READBUSY(void)
{
  while(1)
  {	 //=1 BUSY
     if(isEPD_W21_BUSY==1) break;;
  }
}
//Full screen refresh initialization
void EPD_HW_Init(void)
{
	EPD_W21_RST_0;  // Module reset
	delay_xms(10);//At least 10ms delay
	EPD_W21_RST_1;
	delay_xms(10); //At least 10ms delay
	Epaper_READBUSY();
    /******FiTi  init****************/
    EPD_W21_WriteCMD(0x4D);             //FITIinternal code
    EPD_W21_WriteDATA (0xAA);

    EPD_W21_WriteCMD(0x87);             //FITIinternal code
    EPD_W21_WriteDATA (0x28);

    EPD_W21_WriteCMD(0x88);             //FITIinternal code
    EPD_W21_WriteDATA (0x80);

    EPD_W21_WriteCMD(0x90);             //FITIinternal code
    EPD_W21_WriteDATA (0x02);

    EPD_W21_WriteCMD(0x91);             //FITIinternal code
    EPD_W21_WriteDATA (0x8d);

    EPD_W21_WriteCMD(0xAA);             //FITIinternal code
    EPD_W21_WriteDATA (0x0f);

    EPD_lut();

    EPD_W21_WriteCMD(0xE8);
    EPD_W21_WriteDATA (0xA8);   //A

    EPD_W21_WriteCMD(0x26);
    EPD_W21_WriteDATA (0x0f);   //A

    EPD_W21_WriteCMD(0x04);
    Epaper_READBUSY();

    EPD_W21_WriteCMD(0x00);     //panel setting
    EPD_W21_WriteDATA(0x1f);    //KW-BF   KWR-AF  BWROTP 0f BWOTP 1f

    EPD_W21_WriteCMD(0X50);
    EPD_W21_WriteDATA(0x97);

}

void EPD_lut(void)
{
	EPD_W21_WriteCMD(0x40);
    Epaper_READBUSY();

    EPD_W21_WriteCMD(0xE0);
    EPD_W21_WriteDATA(0x02);
    EPD_W21_WriteCMD(0xE5);
    EPD_W21_WriteDATA(25);  //define the Temperature value////
}

//////////////////////////////Display Update Function///////////////////////////////////////////////////////
//Full screen refresh update function
//checked
void EPD_Update(void)
{
  EPD_W21_WriteCMD(0x12); //Display Update Control
  HAL_Delay(10);
  Epaper_READBUSY();

}

//Partial refresh update function
void EPD_Part_Update(void)
{
	EPD_W21_WriteCMD(0x22); //Display Update Control
	EPD_W21_WriteDATA(0xFF);
	EPD_W21_WriteCMD(0x20); //Activate Display Update Sequence
	Epaper_READBUSY();
}
//////////////////////////////Display Data Transfer Function////////////////////////////////////////////
//Full screen refresh display function
void EPD_WhiteScreen_ALL(const unsigned char *datas)
{
   unsigned int i;
  EPD_W21_WriteCMD(0x24);   //write RAM for black(0)/white (1)
  for(i=0;i<EPD_ARRAY;i++)
   {
     EPD_W21_WriteDATA(datas[i]);
   }
   EPD_Update();
}

//Clear screen display
// Function CHECKED
void EPD_WhiteScreen_White(void)
{
 unsigned int i;
 EPD_W21_WriteCMD(0x10);    //write RAM for black(0)/white (1)
 for(i=0;i<EPD_ARRAY;i++)
 {
		EPD_W21_WriteDATA(0x00);
	}
 EPD_W21_WriteCMD(0x11);
 EPD_W21_WriteCMD(0x13);    //write RAM for black(0)/white (1)
 for(i=0;i<EPD_ARRAY;i++)
 {
		EPD_W21_WriteDATA(0xFF);
	}
 EPD_W21_WriteCMD(0x11);
	EPD_Update();
}
//Display all black
void EPD_WhiteScreen_Black(void)
{
 unsigned int i;
 EPD_W21_WriteCMD(0x10);    //write RAM for black(0)/white (1)
 for(i=0;i<EPD_ARRAY;i++)
 {
		EPD_W21_WriteDATA(0x00);
	}
 EPD_W21_WriteCMD(0x11);
 EPD_W21_WriteCMD(0x13);    //write RAM for black(0)/white (1)
 for(i=0;i<EPD_ARRAY;i++)
 {
		EPD_W21_WriteDATA(0x00);
	}
 EPD_W21_WriteCMD(0x11);
	EPD_Update();
}
//Partial refresh of background display, this function is necessary, please do not delete it!!!
void EPD_SetRAMValue_BaseMap( const unsigned char * datas)
{
	unsigned int i;
  EPD_W21_WriteCMD(0x24);   //Write Black and White image to RAM
  for(i=0;i<EPD_ARRAY;i++)
   {
     EPD_W21_WriteDATA(datas[i]);
   }
  EPD_W21_WriteCMD(0x26);   //Write Black and White image to RAM
  for(i=0;i<EPD_ARRAY;i++)
   {
     EPD_W21_WriteDATA(datas[i]);
   }
   EPD_Update();

}
//Partial refresh display
void EPD_Dis_Part(unsigned int x_start,unsigned int y_start,const unsigned char * datas,unsigned int PART_COLUMN,unsigned int PART_LINE)
{
	unsigned int i;
	unsigned int x_end,y_end;

	x_start=x_start/8; //x address start
	x_end=x_start+PART_LINE/8-1; //x address end
	y_start=y_start; //Y address start
	y_end=y_start+PART_COLUMN-1; //Y address end

	EPD_W21_RST_0;  // Module reset
	delay_xms(10);//At least 10ms delay
	EPD_W21_RST_1;
	delay_xms(10); //At least 10ms delay
	EPD_W21_WriteCMD(0x3C); //BorderWavefrom,
	EPD_W21_WriteDATA(0x80);

	EPD_W21_WriteCMD(0x44);       // set RAM x address start/end
	EPD_W21_WriteDATA(x_start);  //x address start
	EPD_W21_WriteDATA(x_end);   //y address end
	EPD_W21_WriteCMD(0x45);    // set RAM y address start/end
	EPD_W21_WriteDATA(y_start%256);  //y address start2
	EPD_W21_WriteDATA(y_start/256); //y address start1
	EPD_W21_WriteDATA(y_end%256);  //y address end2
	EPD_W21_WriteDATA(y_end/256); //y address end1

	EPD_W21_WriteCMD(0x4E);        // set RAM x address count to 0;
	EPD_W21_WriteDATA(x_start);   //x start address
	EPD_W21_WriteCMD(0x4F);      // set RAM y address count to 0X127;
	EPD_W21_WriteDATA(y_start%256);//y address start2
	EPD_W21_WriteDATA(y_start/256);//y address start1


	 EPD_W21_WriteCMD(0x24);   //Write Black and White image to RAM
   for(i=0;i<PART_COLUMN*PART_LINE/8;i++)
   {
     EPD_W21_WriteDATA(datas[i]);
   }
	 EPD_Part_Update();

}
//Full screen partial refresh display
void EPD_Dis_PartAll(const unsigned char * datas)
{
	unsigned int i;
	unsigned int PART_COLUMN, PART_LINE;
	PART_COLUMN=EPD_HEIGHT,PART_LINE=EPD_WIDTH;

	EPD_W21_RST_0;  // Module reset
	delay_xms(10); //At least 10ms delay
	EPD_W21_RST_1;
	delay_xms(10); //At least 10ms delay
	EPD_W21_WriteCMD(0x3C); //BorderWavefrom,
	EPD_W21_WriteDATA(0x80);


	EPD_W21_WriteCMD(0x24);   //Write Black and White image to RAM
	 for(i=0;i<PART_COLUMN*PART_LINE/8;i++)
	 {
		 EPD_W21_WriteDATA(datas[i]);
	 }
	 EPD_Part_Update();

}
//Deep sleep function
void EPD_DeepSleep(void)
{
    EPD_W21_WriteCMD(0X50);  //VCOM AND DATA INTERVAL SETTING
    EPD_W21_WriteDATA(0xf7); //WBmode:VBDF 17|D7 VBDW 97 VBDB 57    WBRmode:VBDF F7 VBDW 77 VBDB 37  VBDR B7

    EPD_W21_WriteCMD(0X02);   //power off
    Epaper_READBUSY();        //waiting for the electronic paper IC to release the idle signal
    delay_xms(10);
    EPD_W21_WriteCMD(0X07);   //deep sleep
    EPD_W21_WriteDATA(0xA5);
}

//Partial refresh write address and data
void EPD_Dis_Part_RAM(unsigned int x_start,unsigned int y_start,const unsigned char * datas,unsigned int PART_COLUMN,unsigned int PART_LINE)
{
	unsigned int i;
	unsigned int x_end,y_end;

	x_start=x_start/8; //x address start
	x_end=x_start+PART_LINE/8-1; //x address end

	y_start=y_start-1; //Y address start
	y_end=y_start+PART_COLUMN-1; //Y address end

	EPD_W21_RST_0;  // Module reset
	delay_xms(10);//At least 10ms delay
	EPD_W21_RST_1;
	delay_xms(10); //At least 10ms delay
	EPD_W21_WriteCMD(0x3C); //BorderWavefrom,
	EPD_W21_WriteDATA(0x80);

	EPD_W21_WriteCMD(0x44);       // set RAM x address start/end
	EPD_W21_WriteDATA(x_start);  //x address start
	EPD_W21_WriteDATA(x_end);   //y address end
	EPD_W21_WriteCMD(0x45);     // set RAM y address start/end
	EPD_W21_WriteDATA(y_start%256);  //y address start2
	EPD_W21_WriteDATA(y_start/256); //y address start1
	EPD_W21_WriteDATA(y_end%256);  //y address end2
	EPD_W21_WriteDATA(y_end/256); //y address end1

	EPD_W21_WriteCMD(0x4E);   // set RAM x address count to 0;
	EPD_W21_WriteDATA(x_start);   //x start address
	EPD_W21_WriteCMD(0x4F);   // set RAM y address count to 0X127;
	EPD_W21_WriteDATA(y_start%256); //y address start2
	EPD_W21_WriteDATA(y_start/256); //y address start1

	EPD_W21_WriteCMD(0x24);   //Write Black and White image to RAM
  for(i=0;i<PART_COLUMN*PART_LINE/8;i++)
   {
     EPD_W21_WriteDATA(datas[i]);
   }
}
//Clock display
void EPD_Dis_Part_Time(unsigned int x_startA,unsigned int y_startA,const unsigned char * datasA,
	                       unsigned int x_startB,unsigned int y_startB,const unsigned char * datasB,
												 unsigned int x_startC,unsigned int y_startC,const unsigned char * datasC,
												 unsigned int x_startD,unsigned int y_startD,const unsigned char * datasD,
											   unsigned int x_startE,unsigned int y_startE,const unsigned char * datasE,
												 unsigned int PART_COLUMN,unsigned int PART_LINE
	                      )
{
	EPD_Dis_Part_RAM(x_startA,y_startA,datasA,PART_COLUMN,PART_LINE);
	EPD_Dis_Part_RAM(x_startB,y_startB,datasB,PART_COLUMN,PART_LINE);
	EPD_Dis_Part_RAM(x_startC,y_startC,datasC,PART_COLUMN,PART_LINE);
	EPD_Dis_Part_RAM(x_startD,y_startD,datasD,PART_COLUMN,PART_LINE);
	EPD_Dis_Part_RAM(x_startE,y_startE,datasE,PART_COLUMN,PART_LINE);
	EPD_Part_Update();
}




////////////////////////////////Other newly added functions////////////////////////////////////////////
//Display rotation 180 degrees initialization
void EPD_HW_Init_180(void)
{
	EPD_W21_RST_0;  // Module reset
	delay_xms(10); //At least 10ms delay
	EPD_W21_RST_1;
	delay_xms(10); //At least 10ms delay

	Epaper_READBUSY();
	EPD_W21_WriteCMD(0x12);  //SWRESET
	Epaper_READBUSY();

	EPD_W21_WriteCMD(0x3C); //BorderWavefrom
	EPD_W21_WriteDATA(0x05);

	EPD_W21_WriteCMD(0x01); //Driver output control
	EPD_W21_WriteDATA((EPD_HEIGHT-1)%256);
	EPD_W21_WriteDATA((EPD_HEIGHT-1)/256);
	EPD_W21_WriteDATA(0x00);

	EPD_W21_WriteCMD(0x11); //data entry mode
	EPD_W21_WriteDATA(0x02);

	EPD_W21_WriteCMD(0x44); //set Ram-X address start/end position
	EPD_W21_WriteDATA(EPD_WIDTH/8-1);
	EPD_W21_WriteDATA(0x00);

	EPD_W21_WriteCMD(0x45); //set Ram-Y address start/end position
	EPD_W21_WriteDATA(0x00);
	EPD_W21_WriteDATA(0x00);
  EPD_W21_WriteDATA((EPD_HEIGHT-1)%256);
	EPD_W21_WriteDATA((EPD_HEIGHT-1)/256);

	EPD_W21_WriteCMD(0x21); //  Display update control
	EPD_W21_WriteDATA(0x00);
  EPD_W21_WriteDATA(0x80);

  EPD_W21_WriteCMD(0x18); //Read built-in temperature sensor
	EPD_W21_WriteDATA(0x80);

	EPD_W21_WriteCMD(0x4E);   // set RAM x address count to 0;
	EPD_W21_WriteDATA(EPD_WIDTH/8-1);
	EPD_W21_WriteCMD(0x4F);   // set RAM y address count to 0X199;
	EPD_W21_WriteDATA(0x00);
	EPD_W21_WriteDATA(0x00);
  Epaper_READBUSY();
}
// GUI initialization
void EPD_HW_Init_GUI(void)
{
EPD_W21_RST_0;  // Module reset
	delay_xms(10); //At least 10ms delay
	EPD_W21_RST_1;
	delay_xms(10); //At least 10ms delay

	Epaper_READBUSY();
	EPD_W21_WriteCMD(0x12);  //SWRESET
	Epaper_READBUSY();

	EPD_W21_WriteCMD(0x01); //Driver output control
	EPD_W21_WriteDATA((EPD_HEIGHT+112-1)%256);
	EPD_W21_WriteDATA((EPD_HEIGHT+112-1)/256);
	EPD_W21_WriteDATA(0x01);//Show mirror

	EPD_W21_WriteCMD(0x11); //data entry mode
	EPD_W21_WriteDATA(0x01);

	EPD_W21_WriteCMD(0x44); //set Ram-X address start/end position
	EPD_W21_WriteDATA(0x00);
	EPD_W21_WriteDATA(EPD_WIDTH/8-1);

	EPD_W21_WriteCMD(0x45); //set Ram-Y address start/end position
	EPD_W21_WriteDATA((EPD_HEIGHT+112-1)%256);
	EPD_W21_WriteDATA((EPD_HEIGHT+112-1)/256);
	EPD_W21_WriteDATA(0x00);
	EPD_W21_WriteDATA(0x00);

	EPD_W21_WriteCMD(0x3C); //BorderWavefrom
	EPD_W21_WriteDATA(0x05);

	EPD_W21_WriteCMD(0x21); //  Display update control
	EPD_W21_WriteDATA(0x00);
  EPD_W21_WriteDATA(0x80);

  EPD_W21_WriteCMD(0x18); //Read built-in temperature sensor
	EPD_W21_WriteDATA(0x80);

	EPD_W21_WriteCMD(0x4E);   // set RAM x address count to 0;
	EPD_W21_WriteDATA(0x00);
	EPD_W21_WriteCMD(0x4F);   // set RAM y address count to 0X199;
	EPD_W21_WriteDATA((EPD_HEIGHT+112-1)%256);
	EPD_W21_WriteDATA((EPD_HEIGHT+112-1)/256);
  Epaper_READBUSY();
}

//GUI display
void EPD_Display(unsigned char *Image)
{
	unsigned int Width, Height,i,j;
	Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
	Height = EPD_HEIGHT;

	EPD_W21_WriteCMD(0x24);
	for ( j = 0; j < Height; j++) {
			for ( i = 0; i < Width; i++) {
				 EPD_W21_WriteDATA(Image[i + j * Width]);
			}
	}
	EPD_Update();
}

/***********************************************************
						end file
***********************************************************/




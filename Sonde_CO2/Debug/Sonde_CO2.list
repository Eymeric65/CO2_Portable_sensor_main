
Sonde_CO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000554c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800560c  0800560c  0000660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ac8  08005ac8  0000780c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ac8  08005ac8  00006ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ad0  08005ad0  0000780c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ad0  08005ad0  00006ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ad4  08005ad4  00006ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000080c  20000000  08005ad8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000080c  080062e4  0000780c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008fc  080062e4  000078fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000780c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caed  00000000  00000000  00007834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276e  00000000  00000000  00014321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00016a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a06  00000000  00000000  000177e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000121b3  00000000  00000000  000181ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f87  00000000  00000000  0002a3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006af54  00000000  00000000  0003c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a727c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f8c  00000000  00000000  000a72c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000aa24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000080c 	.word	0x2000080c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080055f4 	.word	0x080055f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000810 	.word	0x20000810
 8000104:	080055f4 	.word	0x080055f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 fd46 	bl	8000d6c <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 fd41 	bl	8000d6c <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__aeabi_fdiv>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	464f      	mov	r7, r9
 8000458:	4646      	mov	r6, r8
 800045a:	46d6      	mov	lr, sl
 800045c:	0244      	lsls	r4, r0, #9
 800045e:	b5c0      	push	{r6, r7, lr}
 8000460:	0047      	lsls	r7, r0, #1
 8000462:	1c0e      	adds	r6, r1, #0
 8000464:	0a64      	lsrs	r4, r4, #9
 8000466:	0e3f      	lsrs	r7, r7, #24
 8000468:	0fc5      	lsrs	r5, r0, #31
 800046a:	2f00      	cmp	r7, #0
 800046c:	d03c      	beq.n	80004e8 <__aeabi_fdiv+0x94>
 800046e:	2fff      	cmp	r7, #255	@ 0xff
 8000470:	d042      	beq.n	80004f8 <__aeabi_fdiv+0xa4>
 8000472:	2300      	movs	r3, #0
 8000474:	2280      	movs	r2, #128	@ 0x80
 8000476:	4699      	mov	r9, r3
 8000478:	469a      	mov	sl, r3
 800047a:	00e4      	lsls	r4, r4, #3
 800047c:	04d2      	lsls	r2, r2, #19
 800047e:	4314      	orrs	r4, r2
 8000480:	3f7f      	subs	r7, #127	@ 0x7f
 8000482:	0273      	lsls	r3, r6, #9
 8000484:	0a5b      	lsrs	r3, r3, #9
 8000486:	4698      	mov	r8, r3
 8000488:	0073      	lsls	r3, r6, #1
 800048a:	0e1b      	lsrs	r3, r3, #24
 800048c:	0ff6      	lsrs	r6, r6, #31
 800048e:	2b00      	cmp	r3, #0
 8000490:	d01b      	beq.n	80004ca <__aeabi_fdiv+0x76>
 8000492:	2bff      	cmp	r3, #255	@ 0xff
 8000494:	d013      	beq.n	80004be <__aeabi_fdiv+0x6a>
 8000496:	4642      	mov	r2, r8
 8000498:	2180      	movs	r1, #128	@ 0x80
 800049a:	00d2      	lsls	r2, r2, #3
 800049c:	04c9      	lsls	r1, r1, #19
 800049e:	4311      	orrs	r1, r2
 80004a0:	4688      	mov	r8, r1
 80004a2:	2000      	movs	r0, #0
 80004a4:	3b7f      	subs	r3, #127	@ 0x7f
 80004a6:	0029      	movs	r1, r5
 80004a8:	1aff      	subs	r7, r7, r3
 80004aa:	464b      	mov	r3, r9
 80004ac:	4071      	eors	r1, r6
 80004ae:	b2c9      	uxtb	r1, r1
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d900      	bls.n	80004b6 <__aeabi_fdiv+0x62>
 80004b4:	e0b5      	b.n	8000622 <__aeabi_fdiv+0x1ce>
 80004b6:	4a74      	ldr	r2, [pc, #464]	@ (8000688 <__aeabi_fdiv+0x234>)
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	58d3      	ldr	r3, [r2, r3]
 80004bc:	469f      	mov	pc, r3
 80004be:	4643      	mov	r3, r8
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d13f      	bne.n	8000544 <__aeabi_fdiv+0xf0>
 80004c4:	3fff      	subs	r7, #255	@ 0xff
 80004c6:	3302      	adds	r3, #2
 80004c8:	e003      	b.n	80004d2 <__aeabi_fdiv+0x7e>
 80004ca:	4643      	mov	r3, r8
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d12d      	bne.n	800052c <__aeabi_fdiv+0xd8>
 80004d0:	2301      	movs	r3, #1
 80004d2:	0029      	movs	r1, r5
 80004d4:	464a      	mov	r2, r9
 80004d6:	4071      	eors	r1, r6
 80004d8:	b2c9      	uxtb	r1, r1
 80004da:	431a      	orrs	r2, r3
 80004dc:	2a0e      	cmp	r2, #14
 80004de:	d838      	bhi.n	8000552 <__aeabi_fdiv+0xfe>
 80004e0:	486a      	ldr	r0, [pc, #424]	@ (800068c <__aeabi_fdiv+0x238>)
 80004e2:	0092      	lsls	r2, r2, #2
 80004e4:	5882      	ldr	r2, [r0, r2]
 80004e6:	4697      	mov	pc, r2
 80004e8:	2c00      	cmp	r4, #0
 80004ea:	d113      	bne.n	8000514 <__aeabi_fdiv+0xc0>
 80004ec:	2304      	movs	r3, #4
 80004ee:	4699      	mov	r9, r3
 80004f0:	3b03      	subs	r3, #3
 80004f2:	2700      	movs	r7, #0
 80004f4:	469a      	mov	sl, r3
 80004f6:	e7c4      	b.n	8000482 <__aeabi_fdiv+0x2e>
 80004f8:	2c00      	cmp	r4, #0
 80004fa:	d105      	bne.n	8000508 <__aeabi_fdiv+0xb4>
 80004fc:	2308      	movs	r3, #8
 80004fe:	4699      	mov	r9, r3
 8000500:	3b06      	subs	r3, #6
 8000502:	27ff      	movs	r7, #255	@ 0xff
 8000504:	469a      	mov	sl, r3
 8000506:	e7bc      	b.n	8000482 <__aeabi_fdiv+0x2e>
 8000508:	230c      	movs	r3, #12
 800050a:	4699      	mov	r9, r3
 800050c:	3b09      	subs	r3, #9
 800050e:	27ff      	movs	r7, #255	@ 0xff
 8000510:	469a      	mov	sl, r3
 8000512:	e7b6      	b.n	8000482 <__aeabi_fdiv+0x2e>
 8000514:	0020      	movs	r0, r4
 8000516:	f000 fc0b 	bl	8000d30 <__clzsi2>
 800051a:	2776      	movs	r7, #118	@ 0x76
 800051c:	1f43      	subs	r3, r0, #5
 800051e:	409c      	lsls	r4, r3
 8000520:	2300      	movs	r3, #0
 8000522:	427f      	negs	r7, r7
 8000524:	4699      	mov	r9, r3
 8000526:	469a      	mov	sl, r3
 8000528:	1a3f      	subs	r7, r7, r0
 800052a:	e7aa      	b.n	8000482 <__aeabi_fdiv+0x2e>
 800052c:	4640      	mov	r0, r8
 800052e:	f000 fbff 	bl	8000d30 <__clzsi2>
 8000532:	4642      	mov	r2, r8
 8000534:	1f43      	subs	r3, r0, #5
 8000536:	409a      	lsls	r2, r3
 8000538:	2376      	movs	r3, #118	@ 0x76
 800053a:	425b      	negs	r3, r3
 800053c:	1a1b      	subs	r3, r3, r0
 800053e:	4690      	mov	r8, r2
 8000540:	2000      	movs	r0, #0
 8000542:	e7b0      	b.n	80004a6 <__aeabi_fdiv+0x52>
 8000544:	2303      	movs	r3, #3
 8000546:	464a      	mov	r2, r9
 8000548:	431a      	orrs	r2, r3
 800054a:	4691      	mov	r9, r2
 800054c:	2003      	movs	r0, #3
 800054e:	33fc      	adds	r3, #252	@ 0xfc
 8000550:	e7a9      	b.n	80004a6 <__aeabi_fdiv+0x52>
 8000552:	000d      	movs	r5, r1
 8000554:	20ff      	movs	r0, #255	@ 0xff
 8000556:	2200      	movs	r2, #0
 8000558:	05c0      	lsls	r0, r0, #23
 800055a:	07ed      	lsls	r5, r5, #31
 800055c:	4310      	orrs	r0, r2
 800055e:	4328      	orrs	r0, r5
 8000560:	bce0      	pop	{r5, r6, r7}
 8000562:	46ba      	mov	sl, r7
 8000564:	46b1      	mov	r9, r6
 8000566:	46a8      	mov	r8, r5
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056a:	000d      	movs	r5, r1
 800056c:	2000      	movs	r0, #0
 800056e:	2200      	movs	r2, #0
 8000570:	e7f2      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000572:	4653      	mov	r3, sl
 8000574:	2b02      	cmp	r3, #2
 8000576:	d0ed      	beq.n	8000554 <__aeabi_fdiv+0x100>
 8000578:	2b03      	cmp	r3, #3
 800057a:	d033      	beq.n	80005e4 <__aeabi_fdiv+0x190>
 800057c:	46a0      	mov	r8, r4
 800057e:	2b01      	cmp	r3, #1
 8000580:	d105      	bne.n	800058e <__aeabi_fdiv+0x13a>
 8000582:	2000      	movs	r0, #0
 8000584:	2200      	movs	r2, #0
 8000586:	e7e7      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000588:	0035      	movs	r5, r6
 800058a:	2803      	cmp	r0, #3
 800058c:	d07a      	beq.n	8000684 <__aeabi_fdiv+0x230>
 800058e:	003b      	movs	r3, r7
 8000590:	337f      	adds	r3, #127	@ 0x7f
 8000592:	2b00      	cmp	r3, #0
 8000594:	dd2d      	ble.n	80005f2 <__aeabi_fdiv+0x19e>
 8000596:	4642      	mov	r2, r8
 8000598:	0752      	lsls	r2, r2, #29
 800059a:	d007      	beq.n	80005ac <__aeabi_fdiv+0x158>
 800059c:	220f      	movs	r2, #15
 800059e:	4641      	mov	r1, r8
 80005a0:	400a      	ands	r2, r1
 80005a2:	2a04      	cmp	r2, #4
 80005a4:	d002      	beq.n	80005ac <__aeabi_fdiv+0x158>
 80005a6:	2204      	movs	r2, #4
 80005a8:	4694      	mov	ip, r2
 80005aa:	44e0      	add	r8, ip
 80005ac:	4642      	mov	r2, r8
 80005ae:	0112      	lsls	r2, r2, #4
 80005b0:	d505      	bpl.n	80005be <__aeabi_fdiv+0x16a>
 80005b2:	4642      	mov	r2, r8
 80005b4:	4b36      	ldr	r3, [pc, #216]	@ (8000690 <__aeabi_fdiv+0x23c>)
 80005b6:	401a      	ands	r2, r3
 80005b8:	003b      	movs	r3, r7
 80005ba:	4690      	mov	r8, r2
 80005bc:	3380      	adds	r3, #128	@ 0x80
 80005be:	2bfe      	cmp	r3, #254	@ 0xfe
 80005c0:	dcc8      	bgt.n	8000554 <__aeabi_fdiv+0x100>
 80005c2:	4642      	mov	r2, r8
 80005c4:	0192      	lsls	r2, r2, #6
 80005c6:	0a52      	lsrs	r2, r2, #9
 80005c8:	b2d8      	uxtb	r0, r3
 80005ca:	e7c5      	b.n	8000558 <__aeabi_fdiv+0x104>
 80005cc:	2280      	movs	r2, #128	@ 0x80
 80005ce:	2500      	movs	r5, #0
 80005d0:	20ff      	movs	r0, #255	@ 0xff
 80005d2:	03d2      	lsls	r2, r2, #15
 80005d4:	e7c0      	b.n	8000558 <__aeabi_fdiv+0x104>
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	03d2      	lsls	r2, r2, #15
 80005da:	4214      	tst	r4, r2
 80005dc:	d002      	beq.n	80005e4 <__aeabi_fdiv+0x190>
 80005de:	4643      	mov	r3, r8
 80005e0:	4213      	tst	r3, r2
 80005e2:	d049      	beq.n	8000678 <__aeabi_fdiv+0x224>
 80005e4:	2280      	movs	r2, #128	@ 0x80
 80005e6:	03d2      	lsls	r2, r2, #15
 80005e8:	4322      	orrs	r2, r4
 80005ea:	0252      	lsls	r2, r2, #9
 80005ec:	20ff      	movs	r0, #255	@ 0xff
 80005ee:	0a52      	lsrs	r2, r2, #9
 80005f0:	e7b2      	b.n	8000558 <__aeabi_fdiv+0x104>
 80005f2:	2201      	movs	r2, #1
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	2b1b      	cmp	r3, #27
 80005f8:	dcc3      	bgt.n	8000582 <__aeabi_fdiv+0x12e>
 80005fa:	4642      	mov	r2, r8
 80005fc:	40da      	lsrs	r2, r3
 80005fe:	4643      	mov	r3, r8
 8000600:	379e      	adds	r7, #158	@ 0x9e
 8000602:	40bb      	lsls	r3, r7
 8000604:	1e59      	subs	r1, r3, #1
 8000606:	418b      	sbcs	r3, r1
 8000608:	431a      	orrs	r2, r3
 800060a:	0753      	lsls	r3, r2, #29
 800060c:	d004      	beq.n	8000618 <__aeabi_fdiv+0x1c4>
 800060e:	230f      	movs	r3, #15
 8000610:	4013      	ands	r3, r2
 8000612:	2b04      	cmp	r3, #4
 8000614:	d000      	beq.n	8000618 <__aeabi_fdiv+0x1c4>
 8000616:	3204      	adds	r2, #4
 8000618:	0153      	lsls	r3, r2, #5
 800061a:	d529      	bpl.n	8000670 <__aeabi_fdiv+0x21c>
 800061c:	2001      	movs	r0, #1
 800061e:	2200      	movs	r2, #0
 8000620:	e79a      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000622:	4642      	mov	r2, r8
 8000624:	0163      	lsls	r3, r4, #5
 8000626:	0155      	lsls	r5, r2, #5
 8000628:	42ab      	cmp	r3, r5
 800062a:	d215      	bcs.n	8000658 <__aeabi_fdiv+0x204>
 800062c:	201b      	movs	r0, #27
 800062e:	2200      	movs	r2, #0
 8000630:	3f01      	subs	r7, #1
 8000632:	2601      	movs	r6, #1
 8000634:	001c      	movs	r4, r3
 8000636:	0052      	lsls	r2, r2, #1
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	2c00      	cmp	r4, #0
 800063c:	db01      	blt.n	8000642 <__aeabi_fdiv+0x1ee>
 800063e:	429d      	cmp	r5, r3
 8000640:	d801      	bhi.n	8000646 <__aeabi_fdiv+0x1f2>
 8000642:	1b5b      	subs	r3, r3, r5
 8000644:	4332      	orrs	r2, r6
 8000646:	3801      	subs	r0, #1
 8000648:	2800      	cmp	r0, #0
 800064a:	d1f3      	bne.n	8000634 <__aeabi_fdiv+0x1e0>
 800064c:	1e58      	subs	r0, r3, #1
 800064e:	4183      	sbcs	r3, r0
 8000650:	4313      	orrs	r3, r2
 8000652:	4698      	mov	r8, r3
 8000654:	000d      	movs	r5, r1
 8000656:	e79a      	b.n	800058e <__aeabi_fdiv+0x13a>
 8000658:	201a      	movs	r0, #26
 800065a:	2201      	movs	r2, #1
 800065c:	1b5b      	subs	r3, r3, r5
 800065e:	e7e8      	b.n	8000632 <__aeabi_fdiv+0x1de>
 8000660:	3b02      	subs	r3, #2
 8000662:	425a      	negs	r2, r3
 8000664:	4153      	adcs	r3, r2
 8000666:	425b      	negs	r3, r3
 8000668:	0035      	movs	r5, r6
 800066a:	2200      	movs	r2, #0
 800066c:	b2d8      	uxtb	r0, r3
 800066e:	e773      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000670:	0192      	lsls	r2, r2, #6
 8000672:	2000      	movs	r0, #0
 8000674:	0a52      	lsrs	r2, r2, #9
 8000676:	e76f      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000678:	431a      	orrs	r2, r3
 800067a:	0252      	lsls	r2, r2, #9
 800067c:	0035      	movs	r5, r6
 800067e:	20ff      	movs	r0, #255	@ 0xff
 8000680:	0a52      	lsrs	r2, r2, #9
 8000682:	e769      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000684:	4644      	mov	r4, r8
 8000686:	e7ad      	b.n	80005e4 <__aeabi_fdiv+0x190>
 8000688:	0800560c 	.word	0x0800560c
 800068c:	0800564c 	.word	0x0800564c
 8000690:	f7ffffff 	.word	0xf7ffffff

08000694 <__aeabi_fmul>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	464f      	mov	r7, r9
 8000698:	4646      	mov	r6, r8
 800069a:	46d6      	mov	lr, sl
 800069c:	0243      	lsls	r3, r0, #9
 800069e:	0a5b      	lsrs	r3, r3, #9
 80006a0:	0045      	lsls	r5, r0, #1
 80006a2:	b5c0      	push	{r6, r7, lr}
 80006a4:	4699      	mov	r9, r3
 80006a6:	1c0f      	adds	r7, r1, #0
 80006a8:	0e2d      	lsrs	r5, r5, #24
 80006aa:	0fc6      	lsrs	r6, r0, #31
 80006ac:	2d00      	cmp	r5, #0
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fmul+0x1e>
 80006b0:	e088      	b.n	80007c4 <__aeabi_fmul+0x130>
 80006b2:	2dff      	cmp	r5, #255	@ 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fmul+0x24>
 80006b6:	e08d      	b.n	80007d4 <__aeabi_fmul+0x140>
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	04d2      	lsls	r2, r2, #19
 80006be:	431a      	orrs	r2, r3
 80006c0:	2300      	movs	r3, #0
 80006c2:	4691      	mov	r9, r2
 80006c4:	4698      	mov	r8, r3
 80006c6:	469a      	mov	sl, r3
 80006c8:	3d7f      	subs	r5, #127	@ 0x7f
 80006ca:	027c      	lsls	r4, r7, #9
 80006cc:	007b      	lsls	r3, r7, #1
 80006ce:	0a64      	lsrs	r4, r4, #9
 80006d0:	0e1b      	lsrs	r3, r3, #24
 80006d2:	0fff      	lsrs	r7, r7, #31
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d068      	beq.n	80007aa <__aeabi_fmul+0x116>
 80006d8:	2bff      	cmp	r3, #255	@ 0xff
 80006da:	d021      	beq.n	8000720 <__aeabi_fmul+0x8c>
 80006dc:	2280      	movs	r2, #128	@ 0x80
 80006de:	00e4      	lsls	r4, r4, #3
 80006e0:	04d2      	lsls	r2, r2, #19
 80006e2:	4314      	orrs	r4, r2
 80006e4:	4642      	mov	r2, r8
 80006e6:	3b7f      	subs	r3, #127	@ 0x7f
 80006e8:	195b      	adds	r3, r3, r5
 80006ea:	2100      	movs	r1, #0
 80006ec:	1c5d      	adds	r5, r3, #1
 80006ee:	2a0a      	cmp	r2, #10
 80006f0:	dc2e      	bgt.n	8000750 <__aeabi_fmul+0xbc>
 80006f2:	407e      	eors	r6, r7
 80006f4:	4642      	mov	r2, r8
 80006f6:	2a02      	cmp	r2, #2
 80006f8:	dc23      	bgt.n	8000742 <__aeabi_fmul+0xae>
 80006fa:	3a01      	subs	r2, #1
 80006fc:	2a01      	cmp	r2, #1
 80006fe:	d900      	bls.n	8000702 <__aeabi_fmul+0x6e>
 8000700:	e0bd      	b.n	800087e <__aeabi_fmul+0x1ea>
 8000702:	2902      	cmp	r1, #2
 8000704:	d06e      	beq.n	80007e4 <__aeabi_fmul+0x150>
 8000706:	2901      	cmp	r1, #1
 8000708:	d12c      	bne.n	8000764 <__aeabi_fmul+0xd0>
 800070a:	2000      	movs	r0, #0
 800070c:	2200      	movs	r2, #0
 800070e:	05c0      	lsls	r0, r0, #23
 8000710:	07f6      	lsls	r6, r6, #31
 8000712:	4310      	orrs	r0, r2
 8000714:	4330      	orrs	r0, r6
 8000716:	bce0      	pop	{r5, r6, r7}
 8000718:	46ba      	mov	sl, r7
 800071a:	46b1      	mov	r9, r6
 800071c:	46a8      	mov	r8, r5
 800071e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000720:	002b      	movs	r3, r5
 8000722:	33ff      	adds	r3, #255	@ 0xff
 8000724:	2c00      	cmp	r4, #0
 8000726:	d065      	beq.n	80007f4 <__aeabi_fmul+0x160>
 8000728:	2203      	movs	r2, #3
 800072a:	4641      	mov	r1, r8
 800072c:	4311      	orrs	r1, r2
 800072e:	0032      	movs	r2, r6
 8000730:	3501      	adds	r5, #1
 8000732:	4688      	mov	r8, r1
 8000734:	407a      	eors	r2, r7
 8000736:	35ff      	adds	r5, #255	@ 0xff
 8000738:	290a      	cmp	r1, #10
 800073a:	dd00      	ble.n	800073e <__aeabi_fmul+0xaa>
 800073c:	e0d8      	b.n	80008f0 <__aeabi_fmul+0x25c>
 800073e:	0016      	movs	r6, r2
 8000740:	2103      	movs	r1, #3
 8000742:	4640      	mov	r0, r8
 8000744:	2201      	movs	r2, #1
 8000746:	4082      	lsls	r2, r0
 8000748:	20a6      	movs	r0, #166	@ 0xa6
 800074a:	00c0      	lsls	r0, r0, #3
 800074c:	4202      	tst	r2, r0
 800074e:	d020      	beq.n	8000792 <__aeabi_fmul+0xfe>
 8000750:	4653      	mov	r3, sl
 8000752:	2b02      	cmp	r3, #2
 8000754:	d046      	beq.n	80007e4 <__aeabi_fmul+0x150>
 8000756:	2b03      	cmp	r3, #3
 8000758:	d100      	bne.n	800075c <__aeabi_fmul+0xc8>
 800075a:	e0bb      	b.n	80008d4 <__aeabi_fmul+0x240>
 800075c:	4651      	mov	r1, sl
 800075e:	464c      	mov	r4, r9
 8000760:	2901      	cmp	r1, #1
 8000762:	d0d2      	beq.n	800070a <__aeabi_fmul+0x76>
 8000764:	002b      	movs	r3, r5
 8000766:	337f      	adds	r3, #127	@ 0x7f
 8000768:	2b00      	cmp	r3, #0
 800076a:	dd70      	ble.n	800084e <__aeabi_fmul+0x1ba>
 800076c:	0762      	lsls	r2, r4, #29
 800076e:	d004      	beq.n	800077a <__aeabi_fmul+0xe6>
 8000770:	220f      	movs	r2, #15
 8000772:	4022      	ands	r2, r4
 8000774:	2a04      	cmp	r2, #4
 8000776:	d000      	beq.n	800077a <__aeabi_fmul+0xe6>
 8000778:	3404      	adds	r4, #4
 800077a:	0122      	lsls	r2, r4, #4
 800077c:	d503      	bpl.n	8000786 <__aeabi_fmul+0xf2>
 800077e:	4b63      	ldr	r3, [pc, #396]	@ (800090c <__aeabi_fmul+0x278>)
 8000780:	401c      	ands	r4, r3
 8000782:	002b      	movs	r3, r5
 8000784:	3380      	adds	r3, #128	@ 0x80
 8000786:	2bfe      	cmp	r3, #254	@ 0xfe
 8000788:	dc2c      	bgt.n	80007e4 <__aeabi_fmul+0x150>
 800078a:	01a2      	lsls	r2, r4, #6
 800078c:	0a52      	lsrs	r2, r2, #9
 800078e:	b2d8      	uxtb	r0, r3
 8000790:	e7bd      	b.n	800070e <__aeabi_fmul+0x7a>
 8000792:	2090      	movs	r0, #144	@ 0x90
 8000794:	0080      	lsls	r0, r0, #2
 8000796:	4202      	tst	r2, r0
 8000798:	d127      	bne.n	80007ea <__aeabi_fmul+0x156>
 800079a:	38b9      	subs	r0, #185	@ 0xb9
 800079c:	38ff      	subs	r0, #255	@ 0xff
 800079e:	4210      	tst	r0, r2
 80007a0:	d06d      	beq.n	800087e <__aeabi_fmul+0x1ea>
 80007a2:	003e      	movs	r6, r7
 80007a4:	46a1      	mov	r9, r4
 80007a6:	468a      	mov	sl, r1
 80007a8:	e7d2      	b.n	8000750 <__aeabi_fmul+0xbc>
 80007aa:	2c00      	cmp	r4, #0
 80007ac:	d141      	bne.n	8000832 <__aeabi_fmul+0x19e>
 80007ae:	2301      	movs	r3, #1
 80007b0:	4642      	mov	r2, r8
 80007b2:	431a      	orrs	r2, r3
 80007b4:	4690      	mov	r8, r2
 80007b6:	002b      	movs	r3, r5
 80007b8:	4642      	mov	r2, r8
 80007ba:	2101      	movs	r1, #1
 80007bc:	1c5d      	adds	r5, r3, #1
 80007be:	2a0a      	cmp	r2, #10
 80007c0:	dd97      	ble.n	80006f2 <__aeabi_fmul+0x5e>
 80007c2:	e7c5      	b.n	8000750 <__aeabi_fmul+0xbc>
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d126      	bne.n	8000816 <__aeabi_fmul+0x182>
 80007c8:	2304      	movs	r3, #4
 80007ca:	4698      	mov	r8, r3
 80007cc:	3b03      	subs	r3, #3
 80007ce:	2500      	movs	r5, #0
 80007d0:	469a      	mov	sl, r3
 80007d2:	e77a      	b.n	80006ca <__aeabi_fmul+0x36>
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d118      	bne.n	800080a <__aeabi_fmul+0x176>
 80007d8:	2308      	movs	r3, #8
 80007da:	4698      	mov	r8, r3
 80007dc:	3b06      	subs	r3, #6
 80007de:	25ff      	movs	r5, #255	@ 0xff
 80007e0:	469a      	mov	sl, r3
 80007e2:	e772      	b.n	80006ca <__aeabi_fmul+0x36>
 80007e4:	20ff      	movs	r0, #255	@ 0xff
 80007e6:	2200      	movs	r2, #0
 80007e8:	e791      	b.n	800070e <__aeabi_fmul+0x7a>
 80007ea:	2280      	movs	r2, #128	@ 0x80
 80007ec:	2600      	movs	r6, #0
 80007ee:	20ff      	movs	r0, #255	@ 0xff
 80007f0:	03d2      	lsls	r2, r2, #15
 80007f2:	e78c      	b.n	800070e <__aeabi_fmul+0x7a>
 80007f4:	4641      	mov	r1, r8
 80007f6:	2202      	movs	r2, #2
 80007f8:	3501      	adds	r5, #1
 80007fa:	4311      	orrs	r1, r2
 80007fc:	4688      	mov	r8, r1
 80007fe:	35ff      	adds	r5, #255	@ 0xff
 8000800:	290a      	cmp	r1, #10
 8000802:	dca5      	bgt.n	8000750 <__aeabi_fmul+0xbc>
 8000804:	2102      	movs	r1, #2
 8000806:	407e      	eors	r6, r7
 8000808:	e774      	b.n	80006f4 <__aeabi_fmul+0x60>
 800080a:	230c      	movs	r3, #12
 800080c:	4698      	mov	r8, r3
 800080e:	3b09      	subs	r3, #9
 8000810:	25ff      	movs	r5, #255	@ 0xff
 8000812:	469a      	mov	sl, r3
 8000814:	e759      	b.n	80006ca <__aeabi_fmul+0x36>
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fa8a 	bl	8000d30 <__clzsi2>
 800081c:	464a      	mov	r2, r9
 800081e:	1f43      	subs	r3, r0, #5
 8000820:	2576      	movs	r5, #118	@ 0x76
 8000822:	409a      	lsls	r2, r3
 8000824:	2300      	movs	r3, #0
 8000826:	426d      	negs	r5, r5
 8000828:	4691      	mov	r9, r2
 800082a:	4698      	mov	r8, r3
 800082c:	469a      	mov	sl, r3
 800082e:	1a2d      	subs	r5, r5, r0
 8000830:	e74b      	b.n	80006ca <__aeabi_fmul+0x36>
 8000832:	0020      	movs	r0, r4
 8000834:	f000 fa7c 	bl	8000d30 <__clzsi2>
 8000838:	4642      	mov	r2, r8
 800083a:	1f43      	subs	r3, r0, #5
 800083c:	409c      	lsls	r4, r3
 800083e:	1a2b      	subs	r3, r5, r0
 8000840:	3b76      	subs	r3, #118	@ 0x76
 8000842:	2100      	movs	r1, #0
 8000844:	1c5d      	adds	r5, r3, #1
 8000846:	2a0a      	cmp	r2, #10
 8000848:	dc00      	bgt.n	800084c <__aeabi_fmul+0x1b8>
 800084a:	e752      	b.n	80006f2 <__aeabi_fmul+0x5e>
 800084c:	e780      	b.n	8000750 <__aeabi_fmul+0xbc>
 800084e:	2201      	movs	r2, #1
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	2b1b      	cmp	r3, #27
 8000854:	dd00      	ble.n	8000858 <__aeabi_fmul+0x1c4>
 8000856:	e758      	b.n	800070a <__aeabi_fmul+0x76>
 8000858:	359e      	adds	r5, #158	@ 0x9e
 800085a:	0022      	movs	r2, r4
 800085c:	40ac      	lsls	r4, r5
 800085e:	40da      	lsrs	r2, r3
 8000860:	1e63      	subs	r3, r4, #1
 8000862:	419c      	sbcs	r4, r3
 8000864:	4322      	orrs	r2, r4
 8000866:	0753      	lsls	r3, r2, #29
 8000868:	d004      	beq.n	8000874 <__aeabi_fmul+0x1e0>
 800086a:	230f      	movs	r3, #15
 800086c:	4013      	ands	r3, r2
 800086e:	2b04      	cmp	r3, #4
 8000870:	d000      	beq.n	8000874 <__aeabi_fmul+0x1e0>
 8000872:	3204      	adds	r2, #4
 8000874:	0153      	lsls	r3, r2, #5
 8000876:	d537      	bpl.n	80008e8 <__aeabi_fmul+0x254>
 8000878:	2001      	movs	r0, #1
 800087a:	2200      	movs	r2, #0
 800087c:	e747      	b.n	800070e <__aeabi_fmul+0x7a>
 800087e:	0c21      	lsrs	r1, r4, #16
 8000880:	464a      	mov	r2, r9
 8000882:	0424      	lsls	r4, r4, #16
 8000884:	0c24      	lsrs	r4, r4, #16
 8000886:	0027      	movs	r7, r4
 8000888:	0c10      	lsrs	r0, r2, #16
 800088a:	0412      	lsls	r2, r2, #16
 800088c:	0c12      	lsrs	r2, r2, #16
 800088e:	4344      	muls	r4, r0
 8000890:	4357      	muls	r7, r2
 8000892:	4348      	muls	r0, r1
 8000894:	4351      	muls	r1, r2
 8000896:	0c3a      	lsrs	r2, r7, #16
 8000898:	1909      	adds	r1, r1, r4
 800089a:	1852      	adds	r2, r2, r1
 800089c:	4294      	cmp	r4, r2
 800089e:	d903      	bls.n	80008a8 <__aeabi_fmul+0x214>
 80008a0:	2180      	movs	r1, #128	@ 0x80
 80008a2:	0249      	lsls	r1, r1, #9
 80008a4:	468c      	mov	ip, r1
 80008a6:	4460      	add	r0, ip
 80008a8:	043f      	lsls	r7, r7, #16
 80008aa:	0411      	lsls	r1, r2, #16
 80008ac:	0c3f      	lsrs	r7, r7, #16
 80008ae:	19c9      	adds	r1, r1, r7
 80008b0:	018c      	lsls	r4, r1, #6
 80008b2:	1e67      	subs	r7, r4, #1
 80008b4:	41bc      	sbcs	r4, r7
 80008b6:	0c12      	lsrs	r2, r2, #16
 80008b8:	0e89      	lsrs	r1, r1, #26
 80008ba:	1812      	adds	r2, r2, r0
 80008bc:	430c      	orrs	r4, r1
 80008be:	0192      	lsls	r2, r2, #6
 80008c0:	4314      	orrs	r4, r2
 80008c2:	0112      	lsls	r2, r2, #4
 80008c4:	d50e      	bpl.n	80008e4 <__aeabi_fmul+0x250>
 80008c6:	2301      	movs	r3, #1
 80008c8:	0862      	lsrs	r2, r4, #1
 80008ca:	401c      	ands	r4, r3
 80008cc:	4314      	orrs	r4, r2
 80008ce:	e749      	b.n	8000764 <__aeabi_fmul+0xd0>
 80008d0:	003e      	movs	r6, r7
 80008d2:	46a1      	mov	r9, r4
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	464b      	mov	r3, r9
 80008d8:	03d2      	lsls	r2, r2, #15
 80008da:	431a      	orrs	r2, r3
 80008dc:	0252      	lsls	r2, r2, #9
 80008de:	20ff      	movs	r0, #255	@ 0xff
 80008e0:	0a52      	lsrs	r2, r2, #9
 80008e2:	e714      	b.n	800070e <__aeabi_fmul+0x7a>
 80008e4:	001d      	movs	r5, r3
 80008e6:	e73d      	b.n	8000764 <__aeabi_fmul+0xd0>
 80008e8:	0192      	lsls	r2, r2, #6
 80008ea:	2000      	movs	r0, #0
 80008ec:	0a52      	lsrs	r2, r2, #9
 80008ee:	e70e      	b.n	800070e <__aeabi_fmul+0x7a>
 80008f0:	290f      	cmp	r1, #15
 80008f2:	d1ed      	bne.n	80008d0 <__aeabi_fmul+0x23c>
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	464b      	mov	r3, r9
 80008f8:	03d2      	lsls	r2, r2, #15
 80008fa:	4213      	tst	r3, r2
 80008fc:	d0ea      	beq.n	80008d4 <__aeabi_fmul+0x240>
 80008fe:	4214      	tst	r4, r2
 8000900:	d1e8      	bne.n	80008d4 <__aeabi_fmul+0x240>
 8000902:	003e      	movs	r6, r7
 8000904:	20ff      	movs	r0, #255	@ 0xff
 8000906:	4322      	orrs	r2, r4
 8000908:	e701      	b.n	800070e <__aeabi_fmul+0x7a>
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	f7ffffff 	.word	0xf7ffffff

08000910 <__aeabi_fsub>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	4647      	mov	r7, r8
 8000914:	46ce      	mov	lr, r9
 8000916:	024e      	lsls	r6, r1, #9
 8000918:	0243      	lsls	r3, r0, #9
 800091a:	0045      	lsls	r5, r0, #1
 800091c:	0a72      	lsrs	r2, r6, #9
 800091e:	0fc4      	lsrs	r4, r0, #31
 8000920:	0048      	lsls	r0, r1, #1
 8000922:	b580      	push	{r7, lr}
 8000924:	4694      	mov	ip, r2
 8000926:	0a5f      	lsrs	r7, r3, #9
 8000928:	0e2d      	lsrs	r5, r5, #24
 800092a:	099b      	lsrs	r3, r3, #6
 800092c:	0e00      	lsrs	r0, r0, #24
 800092e:	0fc9      	lsrs	r1, r1, #31
 8000930:	09b6      	lsrs	r6, r6, #6
 8000932:	28ff      	cmp	r0, #255	@ 0xff
 8000934:	d024      	beq.n	8000980 <__aeabi_fsub+0x70>
 8000936:	2201      	movs	r2, #1
 8000938:	4051      	eors	r1, r2
 800093a:	1a2a      	subs	r2, r5, r0
 800093c:	428c      	cmp	r4, r1
 800093e:	d00f      	beq.n	8000960 <__aeabi_fsub+0x50>
 8000940:	2a00      	cmp	r2, #0
 8000942:	dc00      	bgt.n	8000946 <__aeabi_fsub+0x36>
 8000944:	e16a      	b.n	8000c1c <__aeabi_fsub+0x30c>
 8000946:	2800      	cmp	r0, #0
 8000948:	d135      	bne.n	80009b6 <__aeabi_fsub+0xa6>
 800094a:	2e00      	cmp	r6, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x40>
 800094e:	e0a2      	b.n	8000a96 <__aeabi_fsub+0x186>
 8000950:	1e51      	subs	r1, r2, #1
 8000952:	2a01      	cmp	r2, #1
 8000954:	d100      	bne.n	8000958 <__aeabi_fsub+0x48>
 8000956:	e124      	b.n	8000ba2 <__aeabi_fsub+0x292>
 8000958:	2aff      	cmp	r2, #255	@ 0xff
 800095a:	d021      	beq.n	80009a0 <__aeabi_fsub+0x90>
 800095c:	000a      	movs	r2, r1
 800095e:	e02f      	b.n	80009c0 <__aeabi_fsub+0xb0>
 8000960:	2a00      	cmp	r2, #0
 8000962:	dc00      	bgt.n	8000966 <__aeabi_fsub+0x56>
 8000964:	e167      	b.n	8000c36 <__aeabi_fsub+0x326>
 8000966:	2800      	cmp	r0, #0
 8000968:	d05e      	beq.n	8000a28 <__aeabi_fsub+0x118>
 800096a:	2dff      	cmp	r5, #255	@ 0xff
 800096c:	d018      	beq.n	80009a0 <__aeabi_fsub+0x90>
 800096e:	2180      	movs	r1, #128	@ 0x80
 8000970:	04c9      	lsls	r1, r1, #19
 8000972:	430e      	orrs	r6, r1
 8000974:	2a1b      	cmp	r2, #27
 8000976:	dc00      	bgt.n	800097a <__aeabi_fsub+0x6a>
 8000978:	e076      	b.n	8000a68 <__aeabi_fsub+0x158>
 800097a:	002a      	movs	r2, r5
 800097c:	3301      	adds	r3, #1
 800097e:	e032      	b.n	80009e6 <__aeabi_fsub+0xd6>
 8000980:	002a      	movs	r2, r5
 8000982:	3aff      	subs	r2, #255	@ 0xff
 8000984:	4691      	mov	r9, r2
 8000986:	2e00      	cmp	r6, #0
 8000988:	d042      	beq.n	8000a10 <__aeabi_fsub+0x100>
 800098a:	428c      	cmp	r4, r1
 800098c:	d055      	beq.n	8000a3a <__aeabi_fsub+0x12a>
 800098e:	464a      	mov	r2, r9
 8000990:	2a00      	cmp	r2, #0
 8000992:	d100      	bne.n	8000996 <__aeabi_fsub+0x86>
 8000994:	e09c      	b.n	8000ad0 <__aeabi_fsub+0x1c0>
 8000996:	2d00      	cmp	r5, #0
 8000998:	d100      	bne.n	800099c <__aeabi_fsub+0x8c>
 800099a:	e077      	b.n	8000a8c <__aeabi_fsub+0x17c>
 800099c:	000c      	movs	r4, r1
 800099e:	0033      	movs	r3, r6
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x98>
 80009a6:	e06e      	b.n	8000a86 <__aeabi_fsub+0x176>
 80009a8:	2280      	movs	r2, #128	@ 0x80
 80009aa:	03d2      	lsls	r2, r2, #15
 80009ac:	4313      	orrs	r3, r2
 80009ae:	025b      	lsls	r3, r3, #9
 80009b0:	20ff      	movs	r0, #255	@ 0xff
 80009b2:	0a5b      	lsrs	r3, r3, #9
 80009b4:	e024      	b.n	8000a00 <__aeabi_fsub+0xf0>
 80009b6:	2dff      	cmp	r5, #255	@ 0xff
 80009b8:	d0f2      	beq.n	80009a0 <__aeabi_fsub+0x90>
 80009ba:	2180      	movs	r1, #128	@ 0x80
 80009bc:	04c9      	lsls	r1, r1, #19
 80009be:	430e      	orrs	r6, r1
 80009c0:	2101      	movs	r1, #1
 80009c2:	2a1b      	cmp	r2, #27
 80009c4:	dc08      	bgt.n	80009d8 <__aeabi_fsub+0xc8>
 80009c6:	0031      	movs	r1, r6
 80009c8:	2020      	movs	r0, #32
 80009ca:	40d1      	lsrs	r1, r2
 80009cc:	1a82      	subs	r2, r0, r2
 80009ce:	4096      	lsls	r6, r2
 80009d0:	0032      	movs	r2, r6
 80009d2:	1e50      	subs	r0, r2, #1
 80009d4:	4182      	sbcs	r2, r0
 80009d6:	4311      	orrs	r1, r2
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	015a      	lsls	r2, r3, #5
 80009dc:	d460      	bmi.n	8000aa0 <__aeabi_fsub+0x190>
 80009de:	2107      	movs	r1, #7
 80009e0:	002a      	movs	r2, r5
 80009e2:	4019      	ands	r1, r3
 80009e4:	d057      	beq.n	8000a96 <__aeabi_fsub+0x186>
 80009e6:	210f      	movs	r1, #15
 80009e8:	4019      	ands	r1, r3
 80009ea:	2904      	cmp	r1, #4
 80009ec:	d000      	beq.n	80009f0 <__aeabi_fsub+0xe0>
 80009ee:	3304      	adds	r3, #4
 80009f0:	0159      	lsls	r1, r3, #5
 80009f2:	d550      	bpl.n	8000a96 <__aeabi_fsub+0x186>
 80009f4:	1c50      	adds	r0, r2, #1
 80009f6:	2afe      	cmp	r2, #254	@ 0xfe
 80009f8:	d045      	beq.n	8000a86 <__aeabi_fsub+0x176>
 80009fa:	019b      	lsls	r3, r3, #6
 80009fc:	b2c0      	uxtb	r0, r0
 80009fe:	0a5b      	lsrs	r3, r3, #9
 8000a00:	05c0      	lsls	r0, r0, #23
 8000a02:	4318      	orrs	r0, r3
 8000a04:	07e4      	lsls	r4, r4, #31
 8000a06:	4320      	orrs	r0, r4
 8000a08:	bcc0      	pop	{r6, r7}
 8000a0a:	46b9      	mov	r9, r7
 8000a0c:	46b0      	mov	r8, r6
 8000a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a10:	2201      	movs	r2, #1
 8000a12:	4051      	eors	r1, r2
 8000a14:	428c      	cmp	r4, r1
 8000a16:	d1ba      	bne.n	800098e <__aeabi_fsub+0x7e>
 8000a18:	464a      	mov	r2, r9
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	d010      	beq.n	8000a40 <__aeabi_fsub+0x130>
 8000a1e:	2d00      	cmp	r5, #0
 8000a20:	d100      	bne.n	8000a24 <__aeabi_fsub+0x114>
 8000a22:	e098      	b.n	8000b56 <__aeabi_fsub+0x246>
 8000a24:	2300      	movs	r3, #0
 8000a26:	e7bb      	b.n	80009a0 <__aeabi_fsub+0x90>
 8000a28:	2e00      	cmp	r6, #0
 8000a2a:	d034      	beq.n	8000a96 <__aeabi_fsub+0x186>
 8000a2c:	1e51      	subs	r1, r2, #1
 8000a2e:	2a01      	cmp	r2, #1
 8000a30:	d06e      	beq.n	8000b10 <__aeabi_fsub+0x200>
 8000a32:	2aff      	cmp	r2, #255	@ 0xff
 8000a34:	d0b4      	beq.n	80009a0 <__aeabi_fsub+0x90>
 8000a36:	000a      	movs	r2, r1
 8000a38:	e79c      	b.n	8000974 <__aeabi_fsub+0x64>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_fsub+0x130>
 8000a3e:	e088      	b.n	8000b52 <__aeabi_fsub+0x242>
 8000a40:	20fe      	movs	r0, #254	@ 0xfe
 8000a42:	1c6a      	adds	r2, r5, #1
 8000a44:	4210      	tst	r0, r2
 8000a46:	d000      	beq.n	8000a4a <__aeabi_fsub+0x13a>
 8000a48:	e092      	b.n	8000b70 <__aeabi_fsub+0x260>
 8000a4a:	2d00      	cmp	r5, #0
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fsub+0x140>
 8000a4e:	e0a4      	b.n	8000b9a <__aeabi_fsub+0x28a>
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fsub+0x146>
 8000a54:	e0cb      	b.n	8000bee <__aeabi_fsub+0x2de>
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fsub+0x14c>
 8000a5a:	e0ca      	b.n	8000bf2 <__aeabi_fsub+0x2e2>
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	025b      	lsls	r3, r3, #9
 8000a62:	0a5b      	lsrs	r3, r3, #9
 8000a64:	b2d0      	uxtb	r0, r2
 8000a66:	e7cb      	b.n	8000a00 <__aeabi_fsub+0xf0>
 8000a68:	0031      	movs	r1, r6
 8000a6a:	2020      	movs	r0, #32
 8000a6c:	40d1      	lsrs	r1, r2
 8000a6e:	1a82      	subs	r2, r0, r2
 8000a70:	4096      	lsls	r6, r2
 8000a72:	0032      	movs	r2, r6
 8000a74:	1e50      	subs	r0, r2, #1
 8000a76:	4182      	sbcs	r2, r0
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	189b      	adds	r3, r3, r2
 8000a7c:	015a      	lsls	r2, r3, #5
 8000a7e:	d5ae      	bpl.n	80009de <__aeabi_fsub+0xce>
 8000a80:	1c6a      	adds	r2, r5, #1
 8000a82:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a84:	d14a      	bne.n	8000b1c <__aeabi_fsub+0x20c>
 8000a86:	20ff      	movs	r0, #255	@ 0xff
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e7b9      	b.n	8000a00 <__aeabi_fsub+0xf0>
 8000a8c:	22ff      	movs	r2, #255	@ 0xff
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14b      	bne.n	8000b2a <__aeabi_fsub+0x21a>
 8000a92:	000c      	movs	r4, r1
 8000a94:	0033      	movs	r3, r6
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	2aff      	cmp	r2, #255	@ 0xff
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fsub+0x18e>
 8000a9c:	e781      	b.n	80009a2 <__aeabi_fsub+0x92>
 8000a9e:	e7df      	b.n	8000a60 <__aeabi_fsub+0x150>
 8000aa0:	019f      	lsls	r7, r3, #6
 8000aa2:	09bf      	lsrs	r7, r7, #6
 8000aa4:	0038      	movs	r0, r7
 8000aa6:	f000 f943 	bl	8000d30 <__clzsi2>
 8000aaa:	3805      	subs	r0, #5
 8000aac:	4087      	lsls	r7, r0
 8000aae:	4285      	cmp	r5, r0
 8000ab0:	dc21      	bgt.n	8000af6 <__aeabi_fsub+0x1e6>
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	1b42      	subs	r2, r0, r5
 8000ab8:	3201      	adds	r2, #1
 8000aba:	40d3      	lsrs	r3, r2
 8000abc:	1a8a      	subs	r2, r1, r2
 8000abe:	4097      	lsls	r7, r2
 8000ac0:	1e7a      	subs	r2, r7, #1
 8000ac2:	4197      	sbcs	r7, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	433b      	orrs	r3, r7
 8000ac8:	0759      	lsls	r1, r3, #29
 8000aca:	d000      	beq.n	8000ace <__aeabi_fsub+0x1be>
 8000acc:	e78b      	b.n	80009e6 <__aeabi_fsub+0xd6>
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fsub+0xe0>
 8000ad0:	20fe      	movs	r0, #254	@ 0xfe
 8000ad2:	1c6a      	adds	r2, r5, #1
 8000ad4:	4210      	tst	r0, r2
 8000ad6:	d112      	bne.n	8000afe <__aeabi_fsub+0x1ee>
 8000ad8:	2d00      	cmp	r5, #0
 8000ada:	d152      	bne.n	8000b82 <__aeabi_fsub+0x272>
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d07c      	beq.n	8000bda <__aeabi_fsub+0x2ca>
 8000ae0:	2e00      	cmp	r6, #0
 8000ae2:	d0bb      	beq.n	8000a5c <__aeabi_fsub+0x14c>
 8000ae4:	1b9a      	subs	r2, r3, r6
 8000ae6:	0150      	lsls	r0, r2, #5
 8000ae8:	d400      	bmi.n	8000aec <__aeabi_fsub+0x1dc>
 8000aea:	e08b      	b.n	8000c04 <__aeabi_fsub+0x2f4>
 8000aec:	2401      	movs	r4, #1
 8000aee:	2200      	movs	r2, #0
 8000af0:	1af3      	subs	r3, r6, r3
 8000af2:	400c      	ands	r4, r1
 8000af4:	e7e8      	b.n	8000ac8 <__aeabi_fsub+0x1b8>
 8000af6:	4b56      	ldr	r3, [pc, #344]	@ (8000c50 <__aeabi_fsub+0x340>)
 8000af8:	1a2a      	subs	r2, r5, r0
 8000afa:	403b      	ands	r3, r7
 8000afc:	e7e4      	b.n	8000ac8 <__aeabi_fsub+0x1b8>
 8000afe:	1b9f      	subs	r7, r3, r6
 8000b00:	017a      	lsls	r2, r7, #5
 8000b02:	d446      	bmi.n	8000b92 <__aeabi_fsub+0x282>
 8000b04:	2f00      	cmp	r7, #0
 8000b06:	d1cd      	bne.n	8000aa4 <__aeabi_fsub+0x194>
 8000b08:	2400      	movs	r4, #0
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e777      	b.n	8000a00 <__aeabi_fsub+0xf0>
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	2501      	movs	r5, #1
 8000b14:	3201      	adds	r2, #1
 8000b16:	0159      	lsls	r1, r3, #5
 8000b18:	d400      	bmi.n	8000b1c <__aeabi_fsub+0x20c>
 8000b1a:	e760      	b.n	80009de <__aeabi_fsub+0xce>
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	484d      	ldr	r0, [pc, #308]	@ (8000c54 <__aeabi_fsub+0x344>)
 8000b20:	4019      	ands	r1, r3
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	4003      	ands	r3, r0
 8000b26:	430b      	orrs	r3, r1
 8000b28:	e7ce      	b.n	8000ac8 <__aeabi_fsub+0x1b8>
 8000b2a:	1e57      	subs	r7, r2, #1
 8000b2c:	2a01      	cmp	r2, #1
 8000b2e:	d05a      	beq.n	8000be6 <__aeabi_fsub+0x2d6>
 8000b30:	000c      	movs	r4, r1
 8000b32:	2aff      	cmp	r2, #255	@ 0xff
 8000b34:	d033      	beq.n	8000b9e <__aeabi_fsub+0x28e>
 8000b36:	2201      	movs	r2, #1
 8000b38:	2f1b      	cmp	r7, #27
 8000b3a:	dc07      	bgt.n	8000b4c <__aeabi_fsub+0x23c>
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	1bc9      	subs	r1, r1, r7
 8000b40:	001a      	movs	r2, r3
 8000b42:	408b      	lsls	r3, r1
 8000b44:	40fa      	lsrs	r2, r7
 8000b46:	1e59      	subs	r1, r3, #1
 8000b48:	418b      	sbcs	r3, r1
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	0005      	movs	r5, r0
 8000b4e:	1ab3      	subs	r3, r6, r2
 8000b50:	e743      	b.n	80009da <__aeabi_fsub+0xca>
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d123      	bne.n	8000b9e <__aeabi_fsub+0x28e>
 8000b56:	22ff      	movs	r2, #255	@ 0xff
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d09b      	beq.n	8000a94 <__aeabi_fsub+0x184>
 8000b5c:	1e51      	subs	r1, r2, #1
 8000b5e:	2a01      	cmp	r2, #1
 8000b60:	d0d6      	beq.n	8000b10 <__aeabi_fsub+0x200>
 8000b62:	2aff      	cmp	r2, #255	@ 0xff
 8000b64:	d01b      	beq.n	8000b9e <__aeabi_fsub+0x28e>
 8000b66:	291b      	cmp	r1, #27
 8000b68:	dd2c      	ble.n	8000bc4 <__aeabi_fsub+0x2b4>
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	1c73      	adds	r3, r6, #1
 8000b6e:	e73a      	b.n	80009e6 <__aeabi_fsub+0xd6>
 8000b70:	2aff      	cmp	r2, #255	@ 0xff
 8000b72:	d088      	beq.n	8000a86 <__aeabi_fsub+0x176>
 8000b74:	199b      	adds	r3, r3, r6
 8000b76:	085b      	lsrs	r3, r3, #1
 8000b78:	0759      	lsls	r1, r3, #29
 8000b7a:	d000      	beq.n	8000b7e <__aeabi_fsub+0x26e>
 8000b7c:	e733      	b.n	80009e6 <__aeabi_fsub+0xd6>
 8000b7e:	08db      	lsrs	r3, r3, #3
 8000b80:	e76e      	b.n	8000a60 <__aeabi_fsub+0x150>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d110      	bne.n	8000ba8 <__aeabi_fsub+0x298>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d043      	beq.n	8000c12 <__aeabi_fsub+0x302>
 8000b8a:	2401      	movs	r4, #1
 8000b8c:	0033      	movs	r3, r6
 8000b8e:	400c      	ands	r4, r1
 8000b90:	e706      	b.n	80009a0 <__aeabi_fsub+0x90>
 8000b92:	2401      	movs	r4, #1
 8000b94:	1af7      	subs	r7, r6, r3
 8000b96:	400c      	ands	r4, r1
 8000b98:	e784      	b.n	8000aa4 <__aeabi_fsub+0x194>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d104      	bne.n	8000ba8 <__aeabi_fsub+0x298>
 8000b9e:	0033      	movs	r3, r6
 8000ba0:	e6fe      	b.n	80009a0 <__aeabi_fsub+0x90>
 8000ba2:	2501      	movs	r5, #1
 8000ba4:	1b9b      	subs	r3, r3, r6
 8000ba6:	e718      	b.n	80009da <__aeabi_fsub+0xca>
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x29e>
 8000bac:	e6f8      	b.n	80009a0 <__aeabi_fsub+0x90>
 8000bae:	2280      	movs	r2, #128	@ 0x80
 8000bb0:	03d2      	lsls	r2, r2, #15
 8000bb2:	4297      	cmp	r7, r2
 8000bb4:	d304      	bcc.n	8000bc0 <__aeabi_fsub+0x2b0>
 8000bb6:	4594      	cmp	ip, r2
 8000bb8:	d202      	bcs.n	8000bc0 <__aeabi_fsub+0x2b0>
 8000bba:	2401      	movs	r4, #1
 8000bbc:	0033      	movs	r3, r6
 8000bbe:	400c      	ands	r4, r1
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	e6f1      	b.n	80009a8 <__aeabi_fsub+0x98>
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	2520      	movs	r5, #32
 8000bc8:	40ca      	lsrs	r2, r1
 8000bca:	1a69      	subs	r1, r5, r1
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	1e59      	subs	r1, r3, #1
 8000bd0:	418b      	sbcs	r3, r1
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	0005      	movs	r5, r0
 8000bd6:	199b      	adds	r3, r3, r6
 8000bd8:	e750      	b.n	8000a7c <__aeabi_fsub+0x16c>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d094      	beq.n	8000b08 <__aeabi_fsub+0x1f8>
 8000bde:	2401      	movs	r4, #1
 8000be0:	0033      	movs	r3, r6
 8000be2:	400c      	ands	r4, r1
 8000be4:	e73a      	b.n	8000a5c <__aeabi_fsub+0x14c>
 8000be6:	000c      	movs	r4, r1
 8000be8:	2501      	movs	r5, #1
 8000bea:	1af3      	subs	r3, r6, r3
 8000bec:	e6f5      	b.n	80009da <__aeabi_fsub+0xca>
 8000bee:	0033      	movs	r3, r6
 8000bf0:	e734      	b.n	8000a5c <__aeabi_fsub+0x14c>
 8000bf2:	199b      	adds	r3, r3, r6
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	0159      	lsls	r1, r3, #5
 8000bf8:	d5c1      	bpl.n	8000b7e <__aeabi_fsub+0x26e>
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <__aeabi_fsub+0x340>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	08db      	lsrs	r3, r3, #3
 8000c00:	2201      	movs	r2, #1
 8000c02:	e72d      	b.n	8000a60 <__aeabi_fsub+0x150>
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fsub+0x2fa>
 8000c08:	e77e      	b.n	8000b08 <__aeabi_fsub+0x1f8>
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	08db      	lsrs	r3, r3, #3
 8000c10:	e726      	b.n	8000a60 <__aeabi_fsub+0x150>
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	2400      	movs	r4, #0
 8000c16:	20ff      	movs	r0, #255	@ 0xff
 8000c18:	03db      	lsls	r3, r3, #15
 8000c1a:	e6f1      	b.n	8000a00 <__aeabi_fsub+0xf0>
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fsub+0x312>
 8000c20:	e756      	b.n	8000ad0 <__aeabi_fsub+0x1c0>
 8000c22:	1b47      	subs	r7, r0, r5
 8000c24:	003a      	movs	r2, r7
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fsub+0x31c>
 8000c2a:	e730      	b.n	8000a8e <__aeabi_fsub+0x17e>
 8000c2c:	2280      	movs	r2, #128	@ 0x80
 8000c2e:	04d2      	lsls	r2, r2, #19
 8000c30:	000c      	movs	r4, r1
 8000c32:	4313      	orrs	r3, r2
 8000c34:	e77f      	b.n	8000b36 <__aeabi_fsub+0x226>
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fsub+0x32c>
 8000c3a:	e701      	b.n	8000a40 <__aeabi_fsub+0x130>
 8000c3c:	1b41      	subs	r1, r0, r5
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d101      	bne.n	8000c46 <__aeabi_fsub+0x336>
 8000c42:	000a      	movs	r2, r1
 8000c44:	e788      	b.n	8000b58 <__aeabi_fsub+0x248>
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	04d2      	lsls	r2, r2, #19
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	e78b      	b.n	8000b66 <__aeabi_fsub+0x256>
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	fbffffff 	.word	0xfbffffff
 8000c54:	7dffffff 	.word	0x7dffffff

08000c58 <__aeabi_f2iz>:
 8000c58:	0241      	lsls	r1, r0, #9
 8000c5a:	0042      	lsls	r2, r0, #1
 8000c5c:	0fc3      	lsrs	r3, r0, #31
 8000c5e:	0a49      	lsrs	r1, r1, #9
 8000c60:	2000      	movs	r0, #0
 8000c62:	0e12      	lsrs	r2, r2, #24
 8000c64:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c66:	dd03      	ble.n	8000c70 <__aeabi_f2iz+0x18>
 8000c68:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c6a:	dd02      	ble.n	8000c72 <__aeabi_f2iz+0x1a>
 8000c6c:	4a09      	ldr	r2, [pc, #36]	@ (8000c94 <__aeabi_f2iz+0x3c>)
 8000c6e:	1898      	adds	r0, r3, r2
 8000c70:	4770      	bx	lr
 8000c72:	2080      	movs	r0, #128	@ 0x80
 8000c74:	0400      	lsls	r0, r0, #16
 8000c76:	4301      	orrs	r1, r0
 8000c78:	2a95      	cmp	r2, #149	@ 0x95
 8000c7a:	dc07      	bgt.n	8000c8c <__aeabi_f2iz+0x34>
 8000c7c:	2096      	movs	r0, #150	@ 0x96
 8000c7e:	1a82      	subs	r2, r0, r2
 8000c80:	40d1      	lsrs	r1, r2
 8000c82:	4248      	negs	r0, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f3      	bne.n	8000c70 <__aeabi_f2iz+0x18>
 8000c88:	0008      	movs	r0, r1
 8000c8a:	e7f1      	b.n	8000c70 <__aeabi_f2iz+0x18>
 8000c8c:	3a96      	subs	r2, #150	@ 0x96
 8000c8e:	4091      	lsls	r1, r2
 8000c90:	e7f7      	b.n	8000c82 <__aeabi_f2iz+0x2a>
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	7fffffff 	.word	0x7fffffff

08000c98 <__aeabi_i2f>:
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d013      	beq.n	8000cc6 <__aeabi_i2f+0x2e>
 8000c9e:	17c3      	asrs	r3, r0, #31
 8000ca0:	18c5      	adds	r5, r0, r3
 8000ca2:	405d      	eors	r5, r3
 8000ca4:	0fc4      	lsrs	r4, r0, #31
 8000ca6:	0028      	movs	r0, r5
 8000ca8:	f000 f842 	bl	8000d30 <__clzsi2>
 8000cac:	239e      	movs	r3, #158	@ 0x9e
 8000cae:	0001      	movs	r1, r0
 8000cb0:	1a1b      	subs	r3, r3, r0
 8000cb2:	2b96      	cmp	r3, #150	@ 0x96
 8000cb4:	dc0f      	bgt.n	8000cd6 <__aeabi_i2f+0x3e>
 8000cb6:	2808      	cmp	r0, #8
 8000cb8:	d034      	beq.n	8000d24 <__aeabi_i2f+0x8c>
 8000cba:	3908      	subs	r1, #8
 8000cbc:	408d      	lsls	r5, r1
 8000cbe:	026d      	lsls	r5, r5, #9
 8000cc0:	0a6d      	lsrs	r5, r5, #9
 8000cc2:	b2d8      	uxtb	r0, r3
 8000cc4:	e002      	b.n	8000ccc <__aeabi_i2f+0x34>
 8000cc6:	2400      	movs	r4, #0
 8000cc8:	2000      	movs	r0, #0
 8000cca:	2500      	movs	r5, #0
 8000ccc:	05c0      	lsls	r0, r0, #23
 8000cce:	4328      	orrs	r0, r5
 8000cd0:	07e4      	lsls	r4, r4, #31
 8000cd2:	4320      	orrs	r0, r4
 8000cd4:	bd70      	pop	{r4, r5, r6, pc}
 8000cd6:	2b99      	cmp	r3, #153	@ 0x99
 8000cd8:	dc16      	bgt.n	8000d08 <__aeabi_i2f+0x70>
 8000cda:	1f42      	subs	r2, r0, #5
 8000cdc:	2805      	cmp	r0, #5
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_i2f+0x4a>
 8000ce0:	4095      	lsls	r5, r2
 8000ce2:	002a      	movs	r2, r5
 8000ce4:	4811      	ldr	r0, [pc, #68]	@ (8000d2c <__aeabi_i2f+0x94>)
 8000ce6:	4002      	ands	r2, r0
 8000ce8:	076e      	lsls	r6, r5, #29
 8000cea:	d009      	beq.n	8000d00 <__aeabi_i2f+0x68>
 8000cec:	260f      	movs	r6, #15
 8000cee:	4035      	ands	r5, r6
 8000cf0:	2d04      	cmp	r5, #4
 8000cf2:	d005      	beq.n	8000d00 <__aeabi_i2f+0x68>
 8000cf4:	3204      	adds	r2, #4
 8000cf6:	0155      	lsls	r5, r2, #5
 8000cf8:	d502      	bpl.n	8000d00 <__aeabi_i2f+0x68>
 8000cfa:	239f      	movs	r3, #159	@ 0x9f
 8000cfc:	4002      	ands	r2, r0
 8000cfe:	1a5b      	subs	r3, r3, r1
 8000d00:	0192      	lsls	r2, r2, #6
 8000d02:	0a55      	lsrs	r5, r2, #9
 8000d04:	b2d8      	uxtb	r0, r3
 8000d06:	e7e1      	b.n	8000ccc <__aeabi_i2f+0x34>
 8000d08:	2205      	movs	r2, #5
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	0028      	movs	r0, r5
 8000d0e:	40d0      	lsrs	r0, r2
 8000d10:	0002      	movs	r2, r0
 8000d12:	0008      	movs	r0, r1
 8000d14:	301b      	adds	r0, #27
 8000d16:	4085      	lsls	r5, r0
 8000d18:	0028      	movs	r0, r5
 8000d1a:	1e45      	subs	r5, r0, #1
 8000d1c:	41a8      	sbcs	r0, r5
 8000d1e:	4302      	orrs	r2, r0
 8000d20:	0015      	movs	r5, r2
 8000d22:	e7de      	b.n	8000ce2 <__aeabi_i2f+0x4a>
 8000d24:	026d      	lsls	r5, r5, #9
 8000d26:	2096      	movs	r0, #150	@ 0x96
 8000d28:	0a6d      	lsrs	r5, r5, #9
 8000d2a:	e7cf      	b.n	8000ccc <__aeabi_i2f+0x34>
 8000d2c:	fbffffff 	.word	0xfbffffff

08000d30 <__clzsi2>:
 8000d30:	211c      	movs	r1, #28
 8000d32:	2301      	movs	r3, #1
 8000d34:	041b      	lsls	r3, r3, #16
 8000d36:	4298      	cmp	r0, r3
 8000d38:	d301      	bcc.n	8000d3e <__clzsi2+0xe>
 8000d3a:	0c00      	lsrs	r0, r0, #16
 8000d3c:	3910      	subs	r1, #16
 8000d3e:	0a1b      	lsrs	r3, r3, #8
 8000d40:	4298      	cmp	r0, r3
 8000d42:	d301      	bcc.n	8000d48 <__clzsi2+0x18>
 8000d44:	0a00      	lsrs	r0, r0, #8
 8000d46:	3908      	subs	r1, #8
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	4298      	cmp	r0, r3
 8000d4c:	d301      	bcc.n	8000d52 <__clzsi2+0x22>
 8000d4e:	0900      	lsrs	r0, r0, #4
 8000d50:	3904      	subs	r1, #4
 8000d52:	a202      	add	r2, pc, #8	@ (adr r2, 8000d5c <__clzsi2+0x2c>)
 8000d54:	5c10      	ldrb	r0, [r2, r0]
 8000d56:	1840      	adds	r0, r0, r1
 8000d58:	4770      	bx	lr
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	02020304 	.word	0x02020304
 8000d60:	01010101 	.word	0x01010101
	...

08000d6c <__clzdi2>:
 8000d6c:	b510      	push	{r4, lr}
 8000d6e:	2900      	cmp	r1, #0
 8000d70:	d103      	bne.n	8000d7a <__clzdi2+0xe>
 8000d72:	f7ff ffdd 	bl	8000d30 <__clzsi2>
 8000d76:	3020      	adds	r0, #32
 8000d78:	e002      	b.n	8000d80 <__clzdi2+0x14>
 8000d7a:	0008      	movs	r0, r1
 8000d7c:	f7ff ffd8 	bl	8000d30 <__clzsi2>
 8000d80:	bd10      	pop	{r4, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)

08000d84 <modify_bit>:

/*
 * Modify the bit in where the indice 0 is the left one
 */

uint8_t modify_bit(uint8_t x, uint8_t n, uint8_t value) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	0004      	movs	r4, r0
 8000d8c:	0008      	movs	r0, r1
 8000d8e:	0011      	movs	r1, r2
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	1c22      	adds	r2, r4, #0
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	1dbb      	adds	r3, r7, #6
 8000d98:	1c02      	adds	r2, r0, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	1d7b      	adds	r3, r7, #5
 8000d9e:	1c0a      	adds	r2, r1, #0
 8000da0:	701a      	strb	r2, [r3, #0]
    return (value) ? (x | (0x80 >> n)) : (x & ~(0x80 >> n));
 8000da2:	1d7b      	adds	r3, r7, #5
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00c      	beq.n	8000dc4 <modify_bit+0x40>
 8000daa:	1dbb      	adds	r3, r7, #6
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2280      	movs	r2, #128	@ 0x80
 8000db0:	411a      	asrs	r2, r3
 8000db2:	0013      	movs	r3, r2
 8000db4:	b25a      	sxtb	r2, r3
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	e00d      	b.n	8000de0 <modify_bit+0x5c>
 8000dc4:	1dbb      	adds	r3, r7, #6
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2280      	movs	r2, #128	@ 0x80
 8000dca:	411a      	asrs	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	1dfa      	adds	r2, r7, #7
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	b252      	sxtb	r2, r2
 8000dda:	4013      	ands	r3, r2
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b003      	add	sp, #12
 8000de6:	bd90      	pop	{r4, r7, pc}

08000de8 <get_bit>:

/*
 * Get the bit in where the indice 0 is the left one
 */

uint8_t get_bit(uint8_t x,uint8_t n){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	0002      	movs	r2, r0
 8000df0:	1dfb      	adds	r3, r7, #7
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	1dbb      	adds	r3, r7, #6
 8000df6:	1c0a      	adds	r2, r1, #0
 8000df8:	701a      	strb	r2, [r3, #0]
	return (x >> (7-n)) & 1;
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	1dbb      	adds	r3, r7, #6
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2107      	movs	r1, #7
 8000e04:	1acb      	subs	r3, r1, r3
 8000e06:	411a      	asrs	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4013      	ands	r3, r2
 8000e10:	b2db      	uxtb	r3, r3
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <Set_pixel>:

void Set_pixel(uint8_t* Map,uint8_t x,uint16_t y, uint8_t set)
{
 8000e1a:	b590      	push	{r4, r7, lr}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	000c      	movs	r4, r1
 8000e24:	0010      	movs	r0, r2
 8000e26:	0019      	movs	r1, r3
 8000e28:	1cfb      	adds	r3, r7, #3
 8000e2a:	1c22      	adds	r2, r4, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	003b      	movs	r3, r7
 8000e30:	1c02      	adds	r2, r0, #0
 8000e32:	801a      	strh	r2, [r3, #0]
 8000e34:	1cbb      	adds	r3, r7, #2
 8000e36:	1c0a      	adds	r2, r1, #0
 8000e38:	701a      	strb	r2, [r3, #0]
	uint16_t absolute_address;

	absolute_address = y + x*EPD_WIDTH;
 8000e3a:	1cfb      	adds	r3, r7, #3
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	2258      	movs	r2, #88	@ 0x58
 8000e42:	4353      	muls	r3, r2
 8000e44:	b299      	uxth	r1, r3
 8000e46:	200e      	movs	r0, #14
 8000e48:	183b      	adds	r3, r7, r0
 8000e4a:	003a      	movs	r2, r7
 8000e4c:	8812      	ldrh	r2, [r2, #0]
 8000e4e:	188a      	adds	r2, r1, r2
 8000e50:	801a      	strh	r2, [r3, #0]

	Map[absolute_address/8]= modify_bit(Map[absolute_address/8],absolute_address%8,set);
 8000e52:	0001      	movs	r1, r0
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	189b      	adds	r3, r3, r2
 8000e62:	7818      	ldrb	r0, [r3, #0]
 8000e64:	000c      	movs	r4, r1
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	4013      	ands	r3, r2
 8000e70:	b2d9      	uxtb	r1, r3
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	189c      	adds	r4, r3, r2
 8000e80:	1cbb      	adds	r3, r7, #2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	001a      	movs	r2, r3
 8000e86:	f7ff ff7d 	bl	8000d84 <modify_bit>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	7023      	strb	r3, [r4, #0]

}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b005      	add	sp, #20
 8000e94:	bd90      	pop	{r4, r7, pc}

08000e96 <countDigits>:

uint8_t countDigits(uint16_t num) {
 8000e96:	b590      	push	{r4, r7, lr}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	1dbb      	adds	r3, r7, #6
 8000ea0:	801a      	strh	r2, [r3, #0]
	uint8_t count = 0;
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]

	if(num==0)
 8000eaa:	1dbb      	adds	r3, r7, #6
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d110      	bne.n	8000ed4 <countDigits+0x3e>
	{
		return 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e015      	b.n	8000ee2 <countDigits+0x4c>
	}

    while (num != 0) {
        num /= 10;
 8000eb6:	1dbc      	adds	r4, r7, #6
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	210a      	movs	r1, #10
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff f922 	bl	8000108 <__udivsi3>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	8023      	strh	r3, [r4, #0]
        count++;
 8000ec8:	210f      	movs	r1, #15
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	3201      	adds	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
    while (num != 0) {
 8000ed4:	1dbb      	adds	r3, r7, #6
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1ec      	bne.n	8000eb6 <countDigits+0x20>
    }
    return count;
 8000edc:	230f      	movs	r3, #15
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b005      	add	sp, #20
 8000ee8:	bd90      	pop	{r4, r7, pc}

08000eea <getDecimalDigits>:

void getDecimalDigits(uint16_t num, uint8_t * digits, uint16_t numDigits) {
 8000eea:	b5b0      	push	{r4, r5, r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	1dbb      	adds	r3, r7, #6
 8000ef6:	1c02      	adds	r2, r0, #0
 8000ef8:	801a      	strh	r2, [r3, #0]
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	1c0a      	adds	r2, r1, #0
 8000efe:	801a      	strh	r2, [r3, #0]
	int16_t i;
    for (i = numDigits - 1; i >= 0; i--) {
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	230e      	movs	r3, #14
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	801a      	strh	r2, [r3, #0]
 8000f0e:	e020      	b.n	8000f52 <getDecimalDigits+0x68>
        digits[i] = num % 10;
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	210a      	movs	r1, #10
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff f97c 	bl	8000214 <__aeabi_uidivmod>
 8000f1c:	000b      	movs	r3, r1
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	250e      	movs	r5, #14
 8000f22:	197b      	adds	r3, r7, r5
 8000f24:	2200      	movs	r2, #0
 8000f26:	5e9b      	ldrsh	r3, [r3, r2]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	18d3      	adds	r3, r2, r3
 8000f2c:	b2ca      	uxtb	r2, r1
 8000f2e:	701a      	strb	r2, [r3, #0]
        num /= 10;
 8000f30:	1dbc      	adds	r4, r7, #6
 8000f32:	1dbb      	adds	r3, r7, #6
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	210a      	movs	r1, #10
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff f8e5 	bl	8000108 <__udivsi3>
 8000f3e:	0003      	movs	r3, r0
 8000f40:	8023      	strh	r3, [r4, #0]
    for (i = numDigits - 1; i >= 0; i--) {
 8000f42:	197b      	adds	r3, r7, r5
 8000f44:	2200      	movs	r2, #0
 8000f46:	5e9b      	ldrsh	r3, [r3, r2]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	197b      	adds	r3, r7, r5
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	230e      	movs	r3, #14
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	2200      	movs	r2, #0
 8000f58:	5e9b      	ldrsh	r3, [r3, r2]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	dad8      	bge.n	8000f10 <getDecimalDigits+0x26>
    }
}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}

08000f68 <Write_num>:

/*
 * Draw a Number on an array from bottom left
 */
void Write_num(uint8_t* Map,uint8_t x,uint16_t y,sFONT font,uint8_t num)
{
 8000f68:	b082      	sub	sp, #8
 8000f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	0008      	movs	r0, r1
 8000f74:	0011      	movs	r1, r2
 8000f76:	2204      	movs	r2, #4
 8000f78:	2420      	movs	r4, #32
 8000f7a:	1912      	adds	r2, r2, r4
 8000f7c:	2508      	movs	r5, #8
 8000f7e:	46ac      	mov	ip, r5
 8000f80:	44bc      	add	ip, r7
 8000f82:	4462      	add	r2, ip
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	1cfb      	adds	r3, r7, #3
 8000f88:	1c02      	adds	r2, r0, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	1c0a      	adds	r2, r1, #0
 8000f90:	801a      	strh	r2, [r3, #0]
	uint8_t round_width;

	round_width = font.Width/8 + (font.Width%8>0);
 8000f92:	2304      	movs	r3, #4
 8000f94:	0020      	movs	r0, r4
 8000f96:	181b      	adds	r3, r3, r0
 8000f98:	2208      	movs	r2, #8
 8000f9a:	4694      	mov	ip, r2
 8000f9c:	44bc      	add	ip, r7
 8000f9e:	4463      	add	r3, ip
 8000fa0:	889b      	ldrh	r3, [r3, #4]
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	2304      	movs	r3, #4
 8000faa:	181b      	adds	r3, r3, r0
 8000fac:	2108      	movs	r1, #8
 8000fae:	468c      	mov	ip, r1
 8000fb0:	44bc      	add	ip, r7
 8000fb2:	4463      	add	r3, ip
 8000fb4:	889b      	ldrh	r3, [r3, #4]
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	400b      	ands	r3, r1
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	1e59      	subs	r1, r3, #1
 8000fbe:	418b      	sbcs	r3, r1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	240d      	movs	r4, #13
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	1852      	adds	r2, r2, r1
 8000fca:	701a      	strb	r2, [r3, #0]

	uint16_t start_adress;

	start_adress = num*round_width*font.Height;
 8000fcc:	232c      	movs	r3, #44	@ 0x2c
 8000fce:	2208      	movs	r2, #8
 8000fd0:	189b      	adds	r3, r3, r2
 8000fd2:	19db      	adds	r3, r3, r7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	193a      	adds	r2, r7, r4
 8000fda:	7812      	ldrb	r2, [r2, #0]
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	4353      	muls	r3, r2
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	181b      	adds	r3, r3, r0
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	468c      	mov	ip, r1
 8000fea:	44bc      	add	ip, r7
 8000fec:	4463      	add	r3, ip
 8000fee:	88d9      	ldrh	r1, [r3, #6]
 8000ff0:	230a      	movs	r3, #10
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	434a      	muls	r2, r1
 8000ff6:	801a      	strh	r2, [r3, #0]

	uint8_t i;
	uint8_t j;

	for(i=0;i<font.Width;i++)
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e05f      	b.n	80010c2 <Write_num+0x15a>
	{

		for(j=0;j<font.Height;j++)
 8001002:	230e      	movs	r3, #14
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e046      	b.n	800109a <Write_num+0x132>
		{
			Set_pixel(Map,x-i,y-font.Height+j,get_bit(font.table[start_adress+i/8+j*round_width],i%8));
 800100c:	1cfa      	adds	r2, r7, #3
 800100e:	210f      	movs	r1, #15
 8001010:	187b      	adds	r3, r7, r1
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	b2dc      	uxtb	r4, r3
 800101a:	2304      	movs	r3, #4
 800101c:	2620      	movs	r6, #32
 800101e:	199b      	adds	r3, r3, r6
 8001020:	2208      	movs	r2, #8
 8001022:	4694      	mov	ip, r2
 8001024:	44bc      	add	ip, r7
 8001026:	4463      	add	r3, ip
 8001028:	88db      	ldrh	r3, [r3, #6]
 800102a:	003a      	movs	r2, r7
 800102c:	8812      	ldrh	r2, [r2, #0]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	b29a      	uxth	r2, r3
 8001032:	200e      	movs	r0, #14
 8001034:	183b      	adds	r3, r7, r0
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	b29d      	uxth	r5, r3
 800103e:	2304      	movs	r3, #4
 8001040:	199b      	adds	r3, r3, r6
 8001042:	2208      	movs	r2, #8
 8001044:	4694      	mov	ip, r2
 8001046:	44bc      	add	ip, r7
 8001048:	4463      	add	r3, ip
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	220a      	movs	r2, #10
 800104e:	18ba      	adds	r2, r7, r2
 8001050:	8812      	ldrh	r2, [r2, #0]
 8001052:	1879      	adds	r1, r7, r1
 8001054:	7809      	ldrb	r1, [r1, #0]
 8001056:	08c9      	lsrs	r1, r1, #3
 8001058:	b2c9      	uxtb	r1, r1
 800105a:	1851      	adds	r1, r2, r1
 800105c:	0006      	movs	r6, r0
 800105e:	183a      	adds	r2, r7, r0
 8001060:	7812      	ldrb	r2, [r2, #0]
 8001062:	200d      	movs	r0, #13
 8001064:	1838      	adds	r0, r7, r0
 8001066:	7800      	ldrb	r0, [r0, #0]
 8001068:	4342      	muls	r2, r0
 800106a:	188a      	adds	r2, r1, r2
 800106c:	189b      	adds	r3, r3, r2
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	210f      	movs	r1, #15
 8001072:	187b      	adds	r3, r7, r1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2107      	movs	r1, #7
 8001078:	400b      	ands	r3, r1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	0019      	movs	r1, r3
 800107e:	0010      	movs	r0, r2
 8001080:	f7ff feb2 	bl	8000de8 <get_bit>
 8001084:	0003      	movs	r3, r0
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	002a      	movs	r2, r5
 800108a:	0021      	movs	r1, r4
 800108c:	f7ff fec5 	bl	8000e1a <Set_pixel>
		for(j=0;j<font.Height;j++)
 8001090:	19bb      	adds	r3, r7, r6
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	19bb      	adds	r3, r7, r6
 8001096:	3201      	adds	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	230e      	movs	r3, #14
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	2304      	movs	r3, #4
 80010a4:	2120      	movs	r1, #32
 80010a6:	185b      	adds	r3, r3, r1
 80010a8:	2108      	movs	r1, #8
 80010aa:	468c      	mov	ip, r1
 80010ac:	44bc      	add	ip, r7
 80010ae:	4463      	add	r3, ip
 80010b0:	88db      	ldrh	r3, [r3, #6]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3aa      	bcc.n	800100c <Write_num+0xa4>
	for(i=0;i<font.Width;i++)
 80010b6:	210f      	movs	r1, #15
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	3201      	adds	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	230f      	movs	r3, #15
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	2304      	movs	r3, #4
 80010cc:	2120      	movs	r1, #32
 80010ce:	185b      	adds	r3, r3, r1
 80010d0:	2108      	movs	r1, #8
 80010d2:	468c      	mov	ip, r1
 80010d4:	44bc      	add	ip, r7
 80010d6:	4463      	add	r3, ip
 80010d8:	889b      	ldrh	r3, [r3, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d391      	bcc.n	8001002 <Write_num+0x9a>
			//Set_pixel(Map,x-i,y-font.Height+j,(i+j)%2);
		}

	}
}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b005      	add	sp, #20
 80010e6:	bcf0      	pop	{r4, r5, r6, r7}
 80010e8:	bc08      	pop	{r3}
 80010ea:	b002      	add	sp, #8
 80010ec:	4718      	bx	r3

080010ee <Zone_Write_nums>:

#define LETTER_UPPER_CACHE 1

Text_Z Zone_Write_nums(uint8_t x,uint16_t y,sFONT font,uint16_t num,uint8_t v_al,uint8_t h_al,uint8_t max_size)
{
 80010ee:	b082      	sub	sp, #8
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b08d      	sub	sp, #52	@ 0x34
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	0008      	movs	r0, r1
 80010fa:	0011      	movs	r1, r2
 80010fc:	2204      	movs	r2, #4
 80010fe:	2440      	movs	r4, #64	@ 0x40
 8001100:	1912      	adds	r2, r2, r4
 8001102:	2408      	movs	r4, #8
 8001104:	46a4      	mov	ip, r4
 8001106:	44bc      	add	ip, r7
 8001108:	4462      	add	r2, ip
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	1cfb      	adds	r3, r7, #3
 800110e:	1c02      	adds	r2, r0, #0
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	003b      	movs	r3, r7
 8001114:	1c0a      	adds	r2, r1, #0
 8001116:	801a      	strh	r2, [r3, #0]

	Text_Z res;

	res.num_digit = countDigits(num);
 8001118:	234c      	movs	r3, #76	@ 0x4c
 800111a:	2408      	movs	r4, #8
 800111c:	191b      	adds	r3, r3, r4
 800111e:	19db      	adds	r3, r3, r7
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff feb7 	bl	8000e96 <countDigits>
 8001128:	0003      	movs	r3, r0
 800112a:	001a      	movs	r2, r3
 800112c:	230c      	movs	r3, #12
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	769a      	strb	r2, [r3, #26]

	uint16_t max_y;

	switch(v_al){
 8001132:	2350      	movs	r3, #80	@ 0x50
 8001134:	191b      	adds	r3, r3, r4
 8001136:	19db      	adds	r3, r3, r7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d025      	beq.n	800118a <Zone_Write_nums+0x9c>
 800113e:	dc2a      	bgt.n	8001196 <Zone_Write_nums+0xa8>
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <Zone_Write_nums+0x5c>
 8001144:	2b01      	cmp	r3, #1
 8001146:	d00f      	beq.n	8001168 <Zone_Write_nums+0x7a>
 8001148:	e025      	b.n	8001196 <Zone_Write_nums+0xa8>
	case 0: // up
		max_y=y-font.Height;
 800114a:	2304      	movs	r3, #4
 800114c:	2240      	movs	r2, #64	@ 0x40
 800114e:	189b      	adds	r3, r3, r2
 8001150:	2208      	movs	r2, #8
 8001152:	4694      	mov	ip, r2
 8001154:	44bc      	add	ip, r7
 8001156:	4463      	add	r3, ip
 8001158:	88da      	ldrh	r2, [r3, #6]
 800115a:	232e      	movs	r3, #46	@ 0x2e
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	0039      	movs	r1, r7
 8001160:	8809      	ldrh	r1, [r1, #0]
 8001162:	1a8a      	subs	r2, r1, r2
 8001164:	801a      	strh	r2, [r3, #0]
		break;
 8001166:	e016      	b.n	8001196 <Zone_Write_nums+0xa8>
	case 1: // center
		max_y=y-font.Height/2;
 8001168:	2304      	movs	r3, #4
 800116a:	2240      	movs	r2, #64	@ 0x40
 800116c:	189b      	adds	r3, r3, r2
 800116e:	2208      	movs	r2, #8
 8001170:	4694      	mov	ip, r2
 8001172:	44bc      	add	ip, r7
 8001174:	4463      	add	r3, ip
 8001176:	88db      	ldrh	r3, [r3, #6]
 8001178:	085b      	lsrs	r3, r3, #1
 800117a:	b29a      	uxth	r2, r3
 800117c:	232e      	movs	r3, #46	@ 0x2e
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	0039      	movs	r1, r7
 8001182:	8809      	ldrh	r1, [r1, #0]
 8001184:	1a8a      	subs	r2, r1, r2
 8001186:	801a      	strh	r2, [r3, #0]
		break;
 8001188:	e005      	b.n	8001196 <Zone_Write_nums+0xa8>
	case 2: // down
		max_y=y;
 800118a:	232e      	movs	r3, #46	@ 0x2e
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	003a      	movs	r2, r7
 8001190:	8812      	ldrh	r2, [r2, #0]
 8001192:	801a      	strh	r2, [r3, #0]
		break;
 8001194:	46c0      	nop			@ (mov r8, r8)
	}

	uint8_t max_x_th;
	uint8_t max_x;
	switch(h_al){
 8001196:	2354      	movs	r3, #84	@ 0x54
 8001198:	2208      	movs	r2, #8
 800119a:	189b      	adds	r3, r3, r2
 800119c:	19db      	adds	r3, r3, r7
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d052      	beq.n	800124a <Zone_Write_nums+0x15c>
 80011a4:	dc6d      	bgt.n	8001282 <Zone_Write_nums+0x194>
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <Zone_Write_nums+0xc2>
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d01a      	beq.n	80011e4 <Zone_Write_nums+0xf6>
 80011ae:	e068      	b.n	8001282 <Zone_Write_nums+0x194>
	case 0: // left
		max_x=x+(res.num_digit)*font.Width;
 80011b0:	230c      	movs	r3, #12
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	7e9b      	ldrb	r3, [r3, #26]
 80011b6:	2204      	movs	r2, #4
 80011b8:	2140      	movs	r1, #64	@ 0x40
 80011ba:	1852      	adds	r2, r2, r1
 80011bc:	2108      	movs	r1, #8
 80011be:	468c      	mov	ip, r1
 80011c0:	44bc      	add	ip, r7
 80011c2:	4462      	add	r2, ip
 80011c4:	8892      	ldrh	r2, [r2, #4]
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	4353      	muls	r3, r2
 80011ca:	b2d9      	uxtb	r1, r3
 80011cc:	232c      	movs	r3, #44	@ 0x2c
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	1cfa      	adds	r2, r7, #3
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	188a      	adds	r2, r1, r2
 80011d6:	701a      	strb	r2, [r3, #0]
		max_x_th = x;
 80011d8:	232d      	movs	r3, #45	@ 0x2d
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	1cfa      	adds	r2, r7, #3
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	701a      	strb	r2, [r3, #0]
		break;
 80011e2:	e04e      	b.n	8001282 <Zone_Write_nums+0x194>
	case 1: // center
		max_x=x+(res.num_digit*font.Width)/2;
 80011e4:	230c      	movs	r3, #12
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	7e9b      	ldrb	r3, [r3, #26]
 80011ea:	001a      	movs	r2, r3
 80011ec:	2304      	movs	r3, #4
 80011ee:	2140      	movs	r1, #64	@ 0x40
 80011f0:	185b      	adds	r3, r3, r1
 80011f2:	2108      	movs	r1, #8
 80011f4:	468c      	mov	ip, r1
 80011f6:	44bc      	add	ip, r7
 80011f8:	4463      	add	r3, ip
 80011fa:	889b      	ldrh	r3, [r3, #4]
 80011fc:	4353      	muls	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da00      	bge.n	8001204 <Zone_Write_nums+0x116>
 8001202:	3301      	adds	r3, #1
 8001204:	105b      	asrs	r3, r3, #1
 8001206:	b2d9      	uxtb	r1, r3
 8001208:	232c      	movs	r3, #44	@ 0x2c
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	1cfa      	adds	r2, r7, #3
 800120e:	7812      	ldrb	r2, [r2, #0]
 8001210:	188a      	adds	r2, r1, r2
 8001212:	701a      	strb	r2, [r3, #0]
		max_x_th=x-(max_size*font.Width)/2;
 8001214:	2358      	movs	r3, #88	@ 0x58
 8001216:	2208      	movs	r2, #8
 8001218:	189b      	adds	r3, r3, r2
 800121a:	19db      	adds	r3, r3, r7
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2204      	movs	r2, #4
 8001220:	2140      	movs	r1, #64	@ 0x40
 8001222:	1852      	adds	r2, r2, r1
 8001224:	2108      	movs	r1, #8
 8001226:	468c      	mov	ip, r1
 8001228:	44bc      	add	ip, r7
 800122a:	4462      	add	r2, ip
 800122c:	8892      	ldrh	r2, [r2, #4]
 800122e:	4353      	muls	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	da00      	bge.n	8001236 <Zone_Write_nums+0x148>
 8001234:	3301      	adds	r3, #1
 8001236:	105b      	asrs	r3, r3, #1
 8001238:	425b      	negs	r3, r3
 800123a:	b2d9      	uxtb	r1, r3
 800123c:	232d      	movs	r3, #45	@ 0x2d
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	1cfa      	adds	r2, r7, #3
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	188a      	adds	r2, r1, r2
 8001246:	701a      	strb	r2, [r3, #0]
		break;
 8001248:	e01b      	b.n	8001282 <Zone_Write_nums+0x194>
	case 2: // right
		max_x=x;
 800124a:	232c      	movs	r3, #44	@ 0x2c
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	1cfa      	adds	r2, r7, #3
 8001250:	7812      	ldrb	r2, [r2, #0]
 8001252:	701a      	strb	r2, [r3, #0]
		max_x_th=x-max_size*font.Width;
 8001254:	2304      	movs	r3, #4
 8001256:	2240      	movs	r2, #64	@ 0x40
 8001258:	189b      	adds	r3, r3, r2
 800125a:	2208      	movs	r2, #8
 800125c:	4694      	mov	ip, r2
 800125e:	44bc      	add	ip, r7
 8001260:	4463      	add	r3, ip
 8001262:	889b      	ldrh	r3, [r3, #4]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2258      	movs	r2, #88	@ 0x58
 8001268:	2108      	movs	r1, #8
 800126a:	1852      	adds	r2, r2, r1
 800126c:	19d2      	adds	r2, r2, r7
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	4353      	muls	r3, r2
 8001272:	b2da      	uxtb	r2, r3
 8001274:	232d      	movs	r3, #45	@ 0x2d
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	1cf9      	adds	r1, r7, #3
 800127a:	7809      	ldrb	r1, [r1, #0]
 800127c:	1a8a      	subs	r2, r1, r2
 800127e:	701a      	strb	r2, [r3, #0]
		break;
 8001280:	46c0      	nop			@ (mov r8, r8)
	}

	res.y = max_y+font.Height;
 8001282:	2304      	movs	r3, #4
 8001284:	2540      	movs	r5, #64	@ 0x40
 8001286:	195b      	adds	r3, r3, r5
 8001288:	2208      	movs	r2, #8
 800128a:	4694      	mov	ip, r2
 800128c:	44bc      	add	ip, r7
 800128e:	4463      	add	r3, ip
 8001290:	88da      	ldrh	r2, [r3, #6]
 8001292:	202e      	movs	r0, #46	@ 0x2e
 8001294:	183b      	adds	r3, r7, r0
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	18d3      	adds	r3, r2, r3
 800129a:	b29a      	uxth	r2, r3
 800129c:	210c      	movs	r1, #12
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	805a      	strh	r2, [r3, #2]
	res.max_y=max_y-max_y%8;
 80012a2:	183b      	adds	r3, r7, r0
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	2207      	movs	r2, #7
 80012a8:	4393      	bics	r3, r2
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	80da      	strh	r2, [r3, #6]
	res.line=max_y%8 + font.Height;
 80012b0:	183b      	adds	r3, r7, r0
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	2207      	movs	r2, #7
 80012b6:	4013      	ands	r3, r2
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	2304      	movs	r3, #4
 80012bc:	195b      	adds	r3, r3, r5
 80012be:	2008      	movs	r0, #8
 80012c0:	4684      	mov	ip, r0
 80012c2:	44bc      	add	ip, r7
 80012c4:	4463      	add	r3, ip
 80012c6:	88db      	ldrh	r3, [r3, #6]
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	000c      	movs	r4, r1
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	819a      	strh	r2, [r3, #12]
	res.line+=  (8-res.line%8)*(res.line%8!=0);
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	899a      	ldrh	r2, [r3, #12]
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	899b      	ldrh	r3, [r3, #12]
 80012da:	0019      	movs	r1, r3
 80012dc:	2307      	movs	r3, #7
 80012de:	400b      	ands	r3, r1
 80012e0:	2108      	movs	r1, #8
 80012e2:	1acb      	subs	r3, r1, r3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	1939      	adds	r1, r7, r4
 80012e8:	8989      	ldrh	r1, [r1, #12]
 80012ea:	2007      	movs	r0, #7
 80012ec:	4001      	ands	r1, r0
 80012ee:	b289      	uxth	r1, r1
 80012f0:	1e48      	subs	r0, r1, #1
 80012f2:	4181      	sbcs	r1, r0
 80012f4:	b2c9      	uxtb	r1, r1
 80012f6:	b289      	uxth	r1, r1
 80012f8:	434b      	muls	r3, r1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	18d3      	adds	r3, r2, r3
 80012fe:	b29a      	uxth	r2, r3
 8001300:	0021      	movs	r1, r4
 8001302:	187b      	adds	r3, r7, r1
 8001304:	819a      	strh	r2, [r3, #12]

	res.x = max_x;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	222c      	movs	r2, #44	@ 0x2c
 800130a:	18ba      	adds	r2, r7, r2
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	701a      	strb	r2, [r3, #0]
	res.max_x=max_x_th;
 8001310:	187b      	adds	r3, r7, r1
 8001312:	222d      	movs	r2, #45	@ 0x2d
 8001314:	18ba      	adds	r2, r7, r2
 8001316:	7812      	ldrb	r2, [r2, #0]
 8001318:	711a      	strb	r2, [r3, #4]
	res.column= max_size*font.Width;
 800131a:	2658      	movs	r6, #88	@ 0x58
 800131c:	2308      	movs	r3, #8
 800131e:	18f2      	adds	r2, r6, r3
 8001320:	19d3      	adds	r3, r2, r7
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	2204      	movs	r2, #4
 8001328:	1952      	adds	r2, r2, r5
 800132a:	2008      	movs	r0, #8
 800132c:	4684      	mov	ip, r0
 800132e:	44bc      	add	ip, r7
 8001330:	4462      	add	r2, ip
 8001332:	8892      	ldrh	r2, [r2, #4]
 8001334:	4353      	muls	r3, r2
 8001336:	b29a      	uxth	r2, r3
 8001338:	187b      	adds	r3, r7, r1
 800133a:	815a      	strh	r2, [r3, #10]

	res.font=font;
 800133c:	000c      	movs	r4, r1
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2204      	movs	r2, #4
 8001342:	1952      	adds	r2, r2, r5
 8001344:	2008      	movs	r0, #8
 8001346:	4684      	mov	ip, r0
 8001348:	44bc      	add	ip, r7
 800134a:	4462      	add	r2, ip
 800134c:	3310      	adds	r3, #16
 800134e:	ca03      	ldmia	r2!, {r0, r1}
 8001350:	c303      	stmia	r3!, {r0, r1}

	res.num=num;
 8001352:	193b      	adds	r3, r7, r4
 8001354:	224c      	movs	r2, #76	@ 0x4c
 8001356:	2108      	movs	r1, #8
 8001358:	1852      	adds	r2, r2, r1
 800135a:	19d2      	adds	r2, r2, r7
 800135c:	8812      	ldrh	r2, [r2, #0]
 800135e:	831a      	strh	r2, [r3, #24]

	res.max_digit=max_size;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	1872      	adds	r2, r6, r1
 8001364:	19d2      	adds	r2, r2, r7
 8001366:	7812      	ldrb	r2, [r2, #0]
 8001368:	721a      	strb	r2, [r3, #8]

	res.area_draw=res.column*res.line/8;
 800136a:	193b      	adds	r3, r7, r4
 800136c:	895b      	ldrh	r3, [r3, #10]
 800136e:	001a      	movs	r2, r3
 8001370:	193b      	adds	r3, r7, r4
 8001372:	899b      	ldrh	r3, [r3, #12]
 8001374:	4353      	muls	r3, r2
 8001376:	2b00      	cmp	r3, #0
 8001378:	da00      	bge.n	800137c <Zone_Write_nums+0x28e>
 800137a:	3307      	adds	r3, #7
 800137c:	10db      	asrs	r3, r3, #3
 800137e:	b29a      	uxth	r2, r3
 8001380:	210c      	movs	r1, #12
 8001382:	187b      	adds	r3, r7, r1
 8001384:	839a      	strh	r2, [r3, #28]

	res.absolute_address = (res.max_x*EPD_WIDTH+res.max_y)/8;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	791b      	ldrb	r3, [r3, #4]
 800138a:	001a      	movs	r2, r3
 800138c:	2358      	movs	r3, #88	@ 0x58
 800138e:	4353      	muls	r3, r2
 8001390:	187a      	adds	r2, r7, r1
 8001392:	88d2      	ldrh	r2, [r2, #6]
 8001394:	189b      	adds	r3, r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	da00      	bge.n	800139c <Zone_Write_nums+0x2ae>
 800139a:	3307      	adds	r3, #7
 800139c:	10db      	asrs	r3, r3, #3
 800139e:	b29a      	uxth	r2, r3
 80013a0:	210c      	movs	r1, #12
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	83da      	strh	r2, [r3, #30]

	return res;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	187a      	adds	r2, r7, r1
 80013aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013ac:	c313      	stmia	r3!, {r0, r1, r4}
 80013ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013b0:	c313      	stmia	r3!, {r0, r1, r4}
 80013b2:	ca03      	ldmia	r2!, {r0, r1}
 80013b4:	c303      	stmia	r3!, {r0, r1}
}
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b00d      	add	sp, #52	@ 0x34
 80013bc:	bcf0      	pop	{r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	b002      	add	sp, #8
 80013c2:	4718      	bx	r3

080013c4 <Save_data>:

/*
 * Save data inside the draw zone of a text into an array save
 */
void Save_data(uint8_t * save,Text_Z text,uint8_t * Map)
{
 80013c4:	b084      	sub	sp, #16
 80013c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	2004      	movs	r0, #4
 80013d0:	2420      	movs	r4, #32
 80013d2:	1900      	adds	r0, r0, r4
 80013d4:	2408      	movs	r4, #8
 80013d6:	46a4      	mov	ip, r4
 80013d8:	44bc      	add	ip, r7
 80013da:	4460      	add	r0, ip
 80013dc:	6001      	str	r1, [r0, #0]
 80013de:	6042      	str	r2, [r0, #4]
 80013e0:	6083      	str	r3, [r0, #8]

	uint16_t i;
	for(i=0;i<text.area_draw;i++){
 80013e2:	230e      	movs	r3, #14
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	801a      	strh	r2, [r3, #0]
 80013ea:	e041      	b.n	8001470 <Save_data+0xac>
		save[i]=Map[text.absolute_address+i%(text.line/8)+i/(text.line/8)*EPD_WIDTH/8];
 80013ec:	2304      	movs	r3, #4
 80013ee:	2620      	movs	r6, #32
 80013f0:	199b      	adds	r3, r3, r6
 80013f2:	2208      	movs	r2, #8
 80013f4:	4694      	mov	ip, r2
 80013f6:	44bc      	add	ip, r7
 80013f8:	4463      	add	r3, ip
 80013fa:	8bdb      	ldrh	r3, [r3, #30]
 80013fc:	001c      	movs	r4, r3
 80013fe:	2304      	movs	r3, #4
 8001400:	199b      	adds	r3, r3, r6
 8001402:	2208      	movs	r2, #8
 8001404:	4694      	mov	ip, r2
 8001406:	44bc      	add	ip, r7
 8001408:	4463      	add	r3, ip
 800140a:	899b      	ldrh	r3, [r3, #12]
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	b29a      	uxth	r2, r3
 8001410:	250e      	movs	r5, #14
 8001412:	197b      	adds	r3, r7, r5
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	0011      	movs	r1, r2
 8001418:	0018      	movs	r0, r3
 800141a:	f7fe fefb 	bl	8000214 <__aeabi_uidivmod>
 800141e:	000b      	movs	r3, r1
 8001420:	b29b      	uxth	r3, r3
 8001422:	18e4      	adds	r4, r4, r3
 8001424:	2304      	movs	r3, #4
 8001426:	199b      	adds	r3, r3, r6
 8001428:	2208      	movs	r2, #8
 800142a:	4694      	mov	ip, r2
 800142c:	44bc      	add	ip, r7
 800142e:	4463      	add	r3, ip
 8001430:	899b      	ldrh	r3, [r3, #12]
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	b29a      	uxth	r2, r3
 8001436:	197b      	adds	r3, r7, r5
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	0011      	movs	r1, r2
 800143c:	0018      	movs	r0, r3
 800143e:	f7fe fe63 	bl	8000108 <__udivsi3>
 8001442:	0003      	movs	r3, r0
 8001444:	b29b      	uxth	r3, r3
 8001446:	001a      	movs	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	189b      	adds	r3, r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	189b      	adds	r3, r3, r2
 8001452:	18e3      	adds	r3, r4, r3
 8001454:	001a      	movs	r2, r3
 8001456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001458:	189a      	adds	r2, r3, r2
 800145a:	197b      	adds	r3, r7, r5
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	18cb      	adds	r3, r1, r3
 8001462:	7812      	ldrb	r2, [r2, #0]
 8001464:	701a      	strb	r2, [r3, #0]
	for(i=0;i<text.area_draw;i++){
 8001466:	197b      	adds	r3, r7, r5
 8001468:	881a      	ldrh	r2, [r3, #0]
 800146a:	197b      	adds	r3, r7, r5
 800146c:	3201      	adds	r2, #1
 800146e:	801a      	strh	r2, [r3, #0]
 8001470:	2304      	movs	r3, #4
 8001472:	2220      	movs	r2, #32
 8001474:	189b      	adds	r3, r3, r2
 8001476:	2208      	movs	r2, #8
 8001478:	4694      	mov	ip, r2
 800147a:	44bc      	add	ip, r7
 800147c:	4463      	add	r3, ip
 800147e:	8b9b      	ldrh	r3, [r3, #28]
 8001480:	220e      	movs	r2, #14
 8001482:	18ba      	adds	r2, r7, r2
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3b0      	bcc.n	80013ec <Save_data+0x28>
	}
}
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b005      	add	sp, #20
 8001492:	bcf0      	pop	{r4, r5, r6, r7}
 8001494:	bc08      	pop	{r3}
 8001496:	b004      	add	sp, #16
 8001498:	4718      	bx	r3

0800149a <Wipe_TextZone>:

/*
 * Wipe the text zone
 */
void Wipe_TextZone(uint8_t * Map,Text_Z text,uint8_t * Background){
 800149a:	b084      	sub	sp, #16
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	2004      	movs	r0, #4
 80014a6:	2420      	movs	r4, #32
 80014a8:	1900      	adds	r0, r0, r4
 80014aa:	2408      	movs	r4, #8
 80014ac:	46a4      	mov	ip, r4
 80014ae:	44bc      	add	ip, r7
 80014b0:	4460      	add	r0, ip
 80014b2:	6001      	str	r1, [r0, #0]
 80014b4:	6042      	str	r2, [r0, #4]
 80014b6:	6083      	str	r3, [r0, #8]
	uint16_t i;
	for(i=0;i<text.area_draw;i++){
 80014b8:	230e      	movs	r3, #14
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	2200      	movs	r2, #0
 80014be:	801a      	strh	r2, [r3, #0]
 80014c0:	e045      	b.n	800154e <Wipe_TextZone+0xb4>
		uint16_t address = text.absolute_address+i%(text.line/8)+i/(text.line/8)*EPD_WIDTH/8;
 80014c2:	2304      	movs	r3, #4
 80014c4:	2620      	movs	r6, #32
 80014c6:	199b      	adds	r3, r3, r6
 80014c8:	2208      	movs	r2, #8
 80014ca:	4694      	mov	ip, r2
 80014cc:	44bc      	add	ip, r7
 80014ce:	4463      	add	r3, ip
 80014d0:	8bdc      	ldrh	r4, [r3, #30]
 80014d2:	2304      	movs	r3, #4
 80014d4:	199b      	adds	r3, r3, r6
 80014d6:	2208      	movs	r2, #8
 80014d8:	4694      	mov	ip, r2
 80014da:	44bc      	add	ip, r7
 80014dc:	4463      	add	r3, ip
 80014de:	899b      	ldrh	r3, [r3, #12]
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	250e      	movs	r5, #14
 80014e6:	197b      	adds	r3, r7, r5
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	0011      	movs	r1, r2
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7fe fe91 	bl	8000214 <__aeabi_uidivmod>
 80014f2:	000b      	movs	r3, r1
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	18e3      	adds	r3, r4, r3
 80014f8:	b29c      	uxth	r4, r3
 80014fa:	2304      	movs	r3, #4
 80014fc:	199b      	adds	r3, r3, r6
 80014fe:	2208      	movs	r2, #8
 8001500:	4694      	mov	ip, r2
 8001502:	44bc      	add	ip, r7
 8001504:	4463      	add	r3, ip
 8001506:	899b      	ldrh	r3, [r3, #12]
 8001508:	08db      	lsrs	r3, r3, #3
 800150a:	b29a      	uxth	r2, r3
 800150c:	197b      	adds	r3, r7, r5
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	0011      	movs	r1, r2
 8001512:	0018      	movs	r0, r3
 8001514:	f7fe fdf8 	bl	8000108 <__udivsi3>
 8001518:	0003      	movs	r3, r0
 800151a:	b29b      	uxth	r3, r3
 800151c:	1c1a      	adds	r2, r3, #0
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	18d2      	adds	r2, r2, r3
 8001522:	1892      	adds	r2, r2, r2
 8001524:	18d3      	adds	r3, r2, r3
 8001526:	b29a      	uxth	r2, r3
 8001528:	210c      	movs	r1, #12
 800152a:	187b      	adds	r3, r7, r1
 800152c:	18a2      	adds	r2, r4, r2
 800152e:	801a      	strh	r2, [r3, #0]
		Map[address]=Background[address];
 8001530:	187b      	adds	r3, r7, r1
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001536:	18d2      	adds	r2, r2, r3
 8001538:	187b      	adds	r3, r7, r1
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	18cb      	adds	r3, r1, r3
 8001540:	7812      	ldrb	r2, [r2, #0]
 8001542:	701a      	strb	r2, [r3, #0]
	for(i=0;i<text.area_draw;i++){
 8001544:	197b      	adds	r3, r7, r5
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	197b      	adds	r3, r7, r5
 800154a:	3201      	adds	r2, #1
 800154c:	801a      	strh	r2, [r3, #0]
 800154e:	2304      	movs	r3, #4
 8001550:	2220      	movs	r2, #32
 8001552:	189b      	adds	r3, r3, r2
 8001554:	2208      	movs	r2, #8
 8001556:	4694      	mov	ip, r2
 8001558:	44bc      	add	ip, r7
 800155a:	4463      	add	r3, ip
 800155c:	8b9b      	ldrh	r3, [r3, #28]
 800155e:	220e      	movs	r2, #14
 8001560:	18ba      	adds	r2, r7, r2
 8001562:	8812      	ldrh	r2, [r2, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d3ac      	bcc.n	80014c2 <Wipe_TextZone+0x28>
	}
}
 8001568:	46c0      	nop			@ (mov r8, r8)
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b005      	add	sp, #20
 8001570:	bcf0      	pop	{r4, r5, r6, r7}
 8001572:	bc08      	pop	{r3}
 8001574:	b004      	add	sp, #16
 8001576:	4718      	bx	r3

08001578 <Write_nums>:
/*
 * Write the different number of the Text_Z element from bottom left
 */

void Write_nums(uint8_t* Map,Text_Z text)
{
 8001578:	b084      	sub	sp, #16
 800157a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157c:	46c6      	mov	lr, r8
 800157e:	b500      	push	{lr}
 8001580:	b08e      	sub	sp, #56	@ 0x38
 8001582:	af02      	add	r7, sp, #8
 8001584:	61f8      	str	r0, [r7, #28]
 8001586:	2004      	movs	r0, #4
 8001588:	2630      	movs	r6, #48	@ 0x30
 800158a:	1980      	adds	r0, r0, r6
 800158c:	61b8      	str	r0, [r7, #24]
 800158e:	2018      	movs	r0, #24
 8001590:	4684      	mov	ip, r0
 8001592:	44bc      	add	ip, r7
 8001594:	69b8      	ldr	r0, [r7, #24]
 8001596:	4460      	add	r0, ip
 8001598:	6001      	str	r1, [r0, #0]
 800159a:	6042      	str	r2, [r0, #4]
 800159c:	6083      	str	r3, [r0, #8]
 800159e:	466b      	mov	r3, sp
 80015a0:	4698      	mov	r8, r3

    uint8_t digits[text.num_digit]; // Array to store digits
 80015a2:	2304      	movs	r3, #4
 80015a4:	0032      	movs	r2, r6
 80015a6:	189b      	adds	r3, r3, r2
 80015a8:	2218      	movs	r2, #24
 80015aa:	4694      	mov	ip, r2
 80015ac:	44bc      	add	ip, r7
 80015ae:	4463      	add	r3, ip
 80015b0:	7e9b      	ldrb	r3, [r3, #26]
 80015b2:	001a      	movs	r2, r3
 80015b4:	3a01      	subs	r2, #1
 80015b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	2200      	movs	r2, #0
 80015bc:	60fa      	str	r2, [r7, #12]
 80015be:	68b8      	ldr	r0, [r7, #8]
 80015c0:	68f9      	ldr	r1, [r7, #12]
 80015c2:	0006      	movs	r6, r0
 80015c4:	0f72      	lsrs	r2, r6, #29
 80015c6:	000e      	movs	r6, r1
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	617e      	str	r6, [r7, #20]
 80015cc:	697e      	ldr	r6, [r7, #20]
 80015ce:	4316      	orrs	r6, r2
 80015d0:	617e      	str	r6, [r7, #20]
 80015d2:	0001      	movs	r1, r0
 80015d4:	00c9      	lsls	r1, r1, #3
 80015d6:	6139      	str	r1, [r7, #16]
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	2200      	movs	r2, #0
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	0006      	movs	r6, r0
 80015e4:	0f72      	lsrs	r2, r6, #29
 80015e6:	000e      	movs	r6, r1
 80015e8:	00f5      	lsls	r5, r6, #3
 80015ea:	4315      	orrs	r5, r2
 80015ec:	0001      	movs	r1, r0
 80015ee:	00cc      	lsls	r4, r1, #3
 80015f0:	3307      	adds	r3, #7
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4669      	mov	r1, sp
 80015f8:	1acb      	subs	r3, r1, r3
 80015fa:	469d      	mov	sp, r3
 80015fc:	ab02      	add	r3, sp, #8
 80015fe:	3300      	adds	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24

    getDecimalDigits(text.num, digits, text.num_digit); // Store digits in the array
 8001602:	2304      	movs	r3, #4
 8001604:	2230      	movs	r2, #48	@ 0x30
 8001606:	189b      	adds	r3, r3, r2
 8001608:	2118      	movs	r1, #24
 800160a:	468c      	mov	ip, r1
 800160c:	44bc      	add	ip, r7
 800160e:	4463      	add	r3, ip
 8001610:	8b18      	ldrh	r0, [r3, #24]
 8001612:	2304      	movs	r3, #4
 8001614:	189b      	adds	r3, r3, r2
 8001616:	2218      	movs	r2, #24
 8001618:	4694      	mov	ip, r2
 800161a:	44bc      	add	ip, r7
 800161c:	4463      	add	r3, ip
 800161e:	7e9b      	ldrb	r3, [r3, #26]
 8001620:	001a      	movs	r2, r3
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	0019      	movs	r1, r3
 8001626:	f7ff fc60 	bl	8000eea <getDecimalDigits>

	uint8_t i;
	for(i=0;i<text.num_digit;i++)
 800162a:	2317      	movs	r3, #23
 800162c:	2218      	movs	r2, #24
 800162e:	189b      	adds	r3, r3, r2
 8001630:	19db      	adds	r3, r3, r7
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e041      	b.n	80016bc <Write_nums+0x144>
	{
		Write_num(Map,text.x-i*text.font.Width,text.y,text.font,digits[i]);
 8001638:	2304      	movs	r3, #4
 800163a:	2030      	movs	r0, #48	@ 0x30
 800163c:	181b      	adds	r3, r3, r0
 800163e:	2218      	movs	r2, #24
 8001640:	4694      	mov	ip, r2
 8001642:	44bc      	add	ip, r7
 8001644:	4463      	add	r3, ip
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	2304      	movs	r3, #4
 800164a:	181b      	adds	r3, r3, r0
 800164c:	2118      	movs	r1, #24
 800164e:	468c      	mov	ip, r1
 8001650:	44bc      	add	ip, r7
 8001652:	4463      	add	r3, ip
 8001654:	8a9b      	ldrh	r3, [r3, #20]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2117      	movs	r1, #23
 800165a:	000e      	movs	r6, r1
 800165c:	2418      	movs	r4, #24
 800165e:	1909      	adds	r1, r1, r4
 8001660:	19c9      	adds	r1, r1, r7
 8001662:	7809      	ldrb	r1, [r1, #0]
 8001664:	434b      	muls	r3, r1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	b2dc      	uxtb	r4, r3
 800166c:	2304      	movs	r3, #4
 800166e:	181b      	adds	r3, r3, r0
 8001670:	2218      	movs	r2, #24
 8001672:	4694      	mov	ip, r2
 8001674:	44bc      	add	ip, r7
 8001676:	4463      	add	r3, ip
 8001678:	885d      	ldrh	r5, [r3, #2]
 800167a:	0031      	movs	r1, r6
 800167c:	000e      	movs	r6, r1
 800167e:	2318      	movs	r3, #24
 8001680:	18ca      	adds	r2, r1, r3
 8001682:	19d3      	adds	r3, r2, r7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001688:	5cd2      	ldrb	r2, [r2, r3]
 800168a:	2304      	movs	r3, #4
 800168c:	181b      	adds	r3, r3, r0
 800168e:	2118      	movs	r1, #24
 8001690:	468c      	mov	ip, r1
 8001692:	44bc      	add	ip, r7
 8001694:	4463      	add	r3, ip
 8001696:	69f8      	ldr	r0, [r7, #28]
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	466a      	mov	r2, sp
 800169c:	6959      	ldr	r1, [r3, #20]
 800169e:	6011      	str	r1, [r2, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	002a      	movs	r2, r5
 80016a4:	0021      	movs	r1, r4
 80016a6:	f7ff fc5f 	bl	8000f68 <Write_num>
	for(i=0;i<text.num_digit;i++)
 80016aa:	0031      	movs	r1, r6
 80016ac:	2018      	movs	r0, #24
 80016ae:	180b      	adds	r3, r1, r0
 80016b0:	19db      	adds	r3, r3, r7
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	180b      	adds	r3, r1, r0
 80016b6:	19db      	adds	r3, r3, r7
 80016b8:	3201      	adds	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	2304      	movs	r3, #4
 80016be:	2230      	movs	r2, #48	@ 0x30
 80016c0:	189b      	adds	r3, r3, r2
 80016c2:	2218      	movs	r2, #24
 80016c4:	4694      	mov	ip, r2
 80016c6:	44bc      	add	ip, r7
 80016c8:	4463      	add	r3, ip
 80016ca:	7e9b      	ldrb	r3, [r3, #26]
 80016cc:	2217      	movs	r2, #23
 80016ce:	2118      	movs	r1, #24
 80016d0:	1852      	adds	r2, r2, r1
 80016d2:	19d2      	adds	r2, r2, r7
 80016d4:	7812      	ldrb	r2, [r2, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3ae      	bcc.n	8001638 <Write_nums+0xc0>
 80016da:	46c5      	mov	sp, r8
	}

}
 80016dc:	46c0      	nop			@ (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b00c      	add	sp, #48	@ 0x30
 80016e2:	bc80      	pop	{r7}
 80016e4:	46b8      	mov	r8, r7
 80016e6:	bcf0      	pop	{r4, r5, r6, r7}
 80016e8:	bc08      	pop	{r3}
 80016ea:	b004      	add	sp, #16
 80016ec:	4718      	bx	r3

080016ee <Display_Text>:



void Display_Text(Text_Z text, uint8_t * Map,uint8_t * background)
{
 80016ee:	b084      	sub	sp, #16
 80016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f2:	46c6      	mov	lr, r8
 80016f4:	b500      	push	{lr}
 80016f6:	b09a      	sub	sp, #104	@ 0x68
 80016f8:	af06      	add	r7, sp, #24
 80016fa:	2428      	movs	r4, #40	@ 0x28
 80016fc:	2538      	movs	r5, #56	@ 0x38
 80016fe:	1964      	adds	r4, r4, r5
 8001700:	2508      	movs	r5, #8
 8001702:	46ac      	mov	ip, r5
 8001704:	44bc      	add	ip, r7
 8001706:	4464      	add	r4, ip
 8001708:	6020      	str	r0, [r4, #0]
 800170a:	6061      	str	r1, [r4, #4]
 800170c:	60a2      	str	r2, [r4, #8]
 800170e:	60e3      	str	r3, [r4, #12]
 8001710:	466b      	mov	r3, sp
 8001712:	4698      	mov	r8, r3

	uint8_t old_datas[text.area_draw];
 8001714:	2428      	movs	r4, #40	@ 0x28
 8001716:	2338      	movs	r3, #56	@ 0x38
 8001718:	18e3      	adds	r3, r4, r3
 800171a:	2208      	movs	r2, #8
 800171c:	4694      	mov	ip, r2
 800171e:	44bc      	add	ip, r7
 8001720:	4463      	add	r3, ip
 8001722:	8b9a      	ldrh	r2, [r3, #28]
 8001724:	0013      	movs	r3, r2
 8001726:	3b01      	subs	r3, #1
 8001728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800172a:	623a      	str	r2, [r7, #32]
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001730:	6a38      	ldr	r0, [r7, #32]
 8001732:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001734:	0003      	movs	r3, r0
 8001736:	0f5b      	lsrs	r3, r3, #29
 8001738:	469c      	mov	ip, r3
 800173a:	000b      	movs	r3, r1
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	4663      	mov	r3, ip
 8001742:	687d      	ldr	r5, [r7, #4]
 8001744:	431d      	orrs	r5, r3
 8001746:	607d      	str	r5, [r7, #4]
 8001748:	0003      	movs	r3, r0
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	61ba      	str	r2, [r7, #24]
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69b8      	ldr	r0, [r7, #24]
 8001756:	69f9      	ldr	r1, [r7, #28]
 8001758:	0003      	movs	r3, r0
 800175a:	0f5b      	lsrs	r3, r3, #29
 800175c:	000d      	movs	r5, r1
 800175e:	00ed      	lsls	r5, r5, #3
 8001760:	63fd      	str	r5, [r7, #60]	@ 0x3c
 8001762:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8001764:	431d      	orrs	r5, r3
 8001766:	63fd      	str	r5, [r7, #60]	@ 0x3c
 8001768:	0003      	movs	r3, r0
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800176e:	0013      	movs	r3, r2
 8001770:	3307      	adds	r3, #7
 8001772:	08db      	lsrs	r3, r3, #3
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	466a      	mov	r2, sp
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	469d      	mov	sp, r3
 800177c:	ab06      	add	r3, sp, #24
 800177e:	3300      	adds	r3, #0
 8001780:	64bb      	str	r3, [r7, #72]	@ 0x48

	//memset(old_datas,0xFF,text.area_draw);
	Save_data(old_datas,text,Map);
 8001782:	2338      	movs	r3, #56	@ 0x38
 8001784:	18e3      	adds	r3, r4, r3
 8001786:	2208      	movs	r2, #8
 8001788:	18ba      	adds	r2, r7, r2
 800178a:	1898      	adds	r0, r3, r2
 800178c:	6cbe      	ldr	r6, [r7, #72]	@ 0x48
 800178e:	2380      	movs	r3, #128	@ 0x80
 8001790:	2208      	movs	r2, #8
 8001792:	189b      	adds	r3, r3, r2
 8001794:	19db      	adds	r3, r3, r7
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	9305      	str	r3, [sp, #20]
 800179a:	466b      	mov	r3, sp
 800179c:	001a      	movs	r2, r3
 800179e:	0003      	movs	r3, r0
 80017a0:	330c      	adds	r3, #12
 80017a2:	cb32      	ldmia	r3!, {r1, r4, r5}
 80017a4:	c232      	stmia	r2!, {r1, r4, r5}
 80017a6:	cb12      	ldmia	r3!, {r1, r4}
 80017a8:	c212      	stmia	r2!, {r1, r4}
 80017aa:	6801      	ldr	r1, [r0, #0]
 80017ac:	6842      	ldr	r2, [r0, #4]
 80017ae:	6883      	ldr	r3, [r0, #8]
 80017b0:	0030      	movs	r0, r6
 80017b2:	f7ff fe07 	bl	80013c4 <Save_data>


	Wipe_TextZone(Map,text,background);
 80017b6:	2428      	movs	r4, #40	@ 0x28
 80017b8:	2338      	movs	r3, #56	@ 0x38
 80017ba:	18e3      	adds	r3, r4, r3
 80017bc:	2208      	movs	r2, #8
 80017be:	18ba      	adds	r2, r7, r2
 80017c0:	1898      	adds	r0, r3, r2
 80017c2:	2380      	movs	r3, #128	@ 0x80
 80017c4:	2208      	movs	r2, #8
 80017c6:	189b      	adds	r3, r3, r2
 80017c8:	19db      	adds	r3, r3, r7
 80017ca:	681e      	ldr	r6, [r3, #0]
 80017cc:	2384      	movs	r3, #132	@ 0x84
 80017ce:	2208      	movs	r2, #8
 80017d0:	189b      	adds	r3, r3, r2
 80017d2:	19db      	adds	r3, r3, r7
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	9305      	str	r3, [sp, #20]
 80017d8:	466b      	mov	r3, sp
 80017da:	001a      	movs	r2, r3
 80017dc:	0003      	movs	r3, r0
 80017de:	330c      	adds	r3, #12
 80017e0:	cb32      	ldmia	r3!, {r1, r4, r5}
 80017e2:	c232      	stmia	r2!, {r1, r4, r5}
 80017e4:	cb12      	ldmia	r3!, {r1, r4}
 80017e6:	c212      	stmia	r2!, {r1, r4}
 80017e8:	6801      	ldr	r1, [r0, #0]
 80017ea:	6842      	ldr	r2, [r0, #4]
 80017ec:	6883      	ldr	r3, [r0, #8]
 80017ee:	0030      	movs	r0, r6
 80017f0:	f7ff fe53 	bl	800149a <Wipe_TextZone>
	Write_nums(Map,text);
 80017f4:	2428      	movs	r4, #40	@ 0x28
 80017f6:	2338      	movs	r3, #56	@ 0x38
 80017f8:	18e3      	adds	r3, r4, r3
 80017fa:	2208      	movs	r2, #8
 80017fc:	18ba      	adds	r2, r7, r2
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	2208      	movs	r2, #8
 8001804:	189b      	adds	r3, r3, r2
 8001806:	19db      	adds	r3, r3, r7
 8001808:	681e      	ldr	r6, [r3, #0]
 800180a:	466b      	mov	r3, sp
 800180c:	001a      	movs	r2, r3
 800180e:	0003      	movs	r3, r0
 8001810:	330c      	adds	r3, #12
 8001812:	cb32      	ldmia	r3!, {r1, r4, r5}
 8001814:	c232      	stmia	r2!, {r1, r4, r5}
 8001816:	cb12      	ldmia	r3!, {r1, r4}
 8001818:	c212      	stmia	r2!, {r1, r4}
 800181a:	6801      	ldr	r1, [r0, #0]
 800181c:	6842      	ldr	r2, [r0, #4]
 800181e:	6883      	ldr	r3, [r0, #8]
 8001820:	0030      	movs	r0, r6
 8001822:	f7ff fea9 	bl	8001578 <Write_nums>

	uint8_t new_datas[text.area_draw];
 8001826:	2428      	movs	r4, #40	@ 0x28
 8001828:	2338      	movs	r3, #56	@ 0x38
 800182a:	18e3      	adds	r3, r4, r3
 800182c:	2208      	movs	r2, #8
 800182e:	4694      	mov	ip, r2
 8001830:	44bc      	add	ip, r7
 8001832:	4463      	add	r3, ip
 8001834:	8b9b      	ldrh	r3, [r3, #28]
 8001836:	001a      	movs	r2, r3
 8001838:	3a01      	subs	r2, #1
 800183a:	647a      	str	r2, [r7, #68]	@ 0x44
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	2200      	movs	r2, #0
 8001840:	617a      	str	r2, [r7, #20]
 8001842:	6938      	ldr	r0, [r7, #16]
 8001844:	6979      	ldr	r1, [r7, #20]
 8001846:	0002      	movs	r2, r0
 8001848:	0f52      	lsrs	r2, r2, #29
 800184a:	000d      	movs	r5, r1
 800184c:	00ed      	lsls	r5, r5, #3
 800184e:	637d      	str	r5, [r7, #52]	@ 0x34
 8001850:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 8001852:	4315      	orrs	r5, r2
 8001854:	637d      	str	r5, [r7, #52]	@ 0x34
 8001856:	0002      	movs	r2, r0
 8001858:	00d2      	lsls	r2, r2, #3
 800185a:	633a      	str	r2, [r7, #48]	@ 0x30
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	2200      	movs	r2, #0
 8001860:	60fa      	str	r2, [r7, #12]
 8001862:	68b8      	ldr	r0, [r7, #8]
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	0002      	movs	r2, r0
 8001868:	0f52      	lsrs	r2, r2, #29
 800186a:	000d      	movs	r5, r1
 800186c:	00ed      	lsls	r5, r5, #3
 800186e:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8001870:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8001872:	4315      	orrs	r5, r2
 8001874:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8001876:	0002      	movs	r2, r0
 8001878:	00d2      	lsls	r2, r2, #3
 800187a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800187c:	3307      	adds	r3, #7
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	466a      	mov	r2, sp
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	469d      	mov	sp, r3
 8001888:	ab06      	add	r3, sp, #24
 800188a:	3300      	adds	r3, #0
 800188c:	643b      	str	r3, [r7, #64]	@ 0x40
//		//new_datas[i] = 0xAA;
//		new_datas[i]=Map[text.absolute_address+i%(text.line/8)+i/(text.line/8)*EPD_WIDTH/8];
//	}

	//memset(new_datas,0x00,text.area_draw);
	Save_data(new_datas,text,Map);
 800188e:	2338      	movs	r3, #56	@ 0x38
 8001890:	18e3      	adds	r3, r4, r3
 8001892:	2208      	movs	r2, #8
 8001894:	4694      	mov	ip, r2
 8001896:	44bc      	add	ip, r7
 8001898:	4463      	add	r3, ip
 800189a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800189c:	2280      	movs	r2, #128	@ 0x80
 800189e:	2108      	movs	r1, #8
 80018a0:	1852      	adds	r2, r2, r1
 80018a2:	19d2      	adds	r2, r2, r7
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	9205      	str	r2, [sp, #20]
 80018a8:	466a      	mov	r2, sp
 80018aa:	0011      	movs	r1, r2
 80018ac:	001d      	movs	r5, r3
 80018ae:	350c      	adds	r5, #12
 80018b0:	002a      	movs	r2, r5
 80018b2:	ca70      	ldmia	r2!, {r4, r5, r6}
 80018b4:	c170      	stmia	r1!, {r4, r5, r6}
 80018b6:	ca30      	ldmia	r2!, {r4, r5}
 80018b8:	c130      	stmia	r1!, {r4, r5}
 80018ba:	6819      	ldr	r1, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f7ff fd80 	bl	80013c4 <Save_data>



	EPD_Dis_Part_Old(text.max_y,text.max_x,new_datas,old_datas,text.column,text.line);
 80018c4:	2228      	movs	r2, #40	@ 0x28
 80018c6:	2338      	movs	r3, #56	@ 0x38
 80018c8:	18d3      	adds	r3, r2, r3
 80018ca:	2108      	movs	r1, #8
 80018cc:	468c      	mov	ip, r1
 80018ce:	44bc      	add	ip, r7
 80018d0:	4463      	add	r3, ip
 80018d2:	88db      	ldrh	r3, [r3, #6]
 80018d4:	001c      	movs	r4, r3
 80018d6:	2338      	movs	r3, #56	@ 0x38
 80018d8:	18d3      	adds	r3, r2, r3
 80018da:	2108      	movs	r1, #8
 80018dc:	468c      	mov	ip, r1
 80018de:	44bc      	add	ip, r7
 80018e0:	4463      	add	r3, ip
 80018e2:	791b      	ldrb	r3, [r3, #4]
 80018e4:	001d      	movs	r5, r3
 80018e6:	2338      	movs	r3, #56	@ 0x38
 80018e8:	18d3      	adds	r3, r2, r3
 80018ea:	2108      	movs	r1, #8
 80018ec:	468c      	mov	ip, r1
 80018ee:	44bc      	add	ip, r7
 80018f0:	4463      	add	r3, ip
 80018f2:	895b      	ldrh	r3, [r3, #10]
 80018f4:	0019      	movs	r1, r3
 80018f6:	2338      	movs	r3, #56	@ 0x38
 80018f8:	18d3      	adds	r3, r2, r3
 80018fa:	2208      	movs	r2, #8
 80018fc:	4694      	mov	ip, r2
 80018fe:	44bc      	add	ip, r7
 8001900:	4463      	add	r3, ip
 8001902:	899b      	ldrh	r3, [r3, #12]
 8001904:	0018      	movs	r0, r3
 8001906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001908:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800190a:	9001      	str	r0, [sp, #4]
 800190c:	9100      	str	r1, [sp, #0]
 800190e:	0029      	movs	r1, r5
 8001910:	0020      	movs	r0, r4
 8001912:	f000 fabb 	bl	8001e8c <EPD_Dis_Part_Old>
 8001916:	46c5      	mov	sp, r8



}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b014      	add	sp, #80	@ 0x50
 800191e:	bc80      	pop	{r7}
 8001920:	46b8      	mov	r8, r7
 8001922:	bcf0      	pop	{r4, r5, r6, r7}
 8001924:	bc08      	pop	{r3}
 8001926:	b004      	add	sp, #16
 8001928:	4718      	bx	r3

0800192a <Send_I2C_Command>:


HAL_StatusTypeDef Send_I2C_Command(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t command, uint32_t Timeout)
{
 800192a:	b590      	push	{r4, r7, lr}
 800192c:	b089      	sub	sp, #36	@ 0x24
 800192e:	af02      	add	r7, sp, #8
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	0008      	movs	r0, r1
 8001934:	0011      	movs	r1, r2
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	240a      	movs	r4, #10
 800193a:	193b      	adds	r3, r7, r4
 800193c:	1c02      	adds	r2, r0, #0
 800193e:	801a      	strh	r2, [r3, #0]
 8001940:	2008      	movs	r0, #8
 8001942:	183b      	adds	r3, r7, r0
 8001944:	1c0a      	adds	r2, r1, #0
 8001946:	801a      	strh	r2, [r3, #0]

	uint8_t comm[] = {(command >> 8) & 0xFF,command & 0xFF};
 8001948:	0001      	movs	r1, r0
 800194a:	187b      	adds	r3, r7, r1
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	b29b      	uxth	r3, r3
 8001952:	b2da      	uxtb	r2, r3
 8001954:	2014      	movs	r0, #20
 8001956:	183b      	adds	r3, r7, r0
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	187b      	adds	r3, r7, r1
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	183b      	adds	r3, r7, r0
 8001962:	705a      	strb	r2, [r3, #1]

	//return HAL_I2C_Master_Transmit(hi2c, DevAddress, (uint8_t*)&command,2, 500);
	return HAL_I2C_Master_Transmit(hi2c, DevAddress, comm,2, 500);
 8001964:	183a      	adds	r2, r7, r0
 8001966:	193b      	adds	r3, r7, r4
 8001968:	8819      	ldrh	r1, [r3, #0]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	23fa      	movs	r3, #250	@ 0xfa
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2302      	movs	r3, #2
 8001974:	f001 fc60 	bl	8003238 <HAL_I2C_Master_Transmit>
 8001978:	0003      	movs	r3, r0
}
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b007      	add	sp, #28
 8001980:	bd90      	pop	{r4, r7, pc}
	...

08001984 <SCREEN_GPIO_Act>:

void SCREEN_GPIO_Act(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	0018      	movs	r0, r3
 800198e:	2314      	movs	r3, #20
 8001990:	001a      	movs	r2, r3
 8001992:	2100      	movs	r1, #0
 8001994:	f003 fdf8 	bl	8005588 <memset>

  /* GPIO Ports Clock Enable */

  /*Configure GPIO pin Output Level */
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_CS_GPIO_Port, Screen_CS_Pin, GPIO_PIN_RESET);
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	4833      	ldr	r0, [pc, #204]	@ (8001a6c <SCREEN_GPIO_Act+0xe8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	0019      	movs	r1, r3
 80019a2:	f001 fb96 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Screen_PWR_Pin, GPIO_PIN_RESET); // Activate the screen
 80019a6:	23a0      	movs	r3, #160	@ 0xa0
 80019a8:	05db      	lsls	r3, r3, #23
 80019aa:	2200      	movs	r2, #0
 80019ac:	2102      	movs	r1, #2
 80019ae:	0018      	movs	r0, r3
 80019b0:	f001 fb8f 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_C_Pin, GPIO_PIN_RESET);
 80019b4:	2380      	movs	r3, #128	@ 0x80
 80019b6:	01d9      	lsls	r1, r3, #7
 80019b8:	23a0      	movs	r3, #160	@ 0xa0
 80019ba:	05db      	lsls	r3, r3, #23
 80019bc:	2200      	movs	r2, #0
 80019be:	0018      	movs	r0, r3
 80019c0:	f001 fb87 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_Res_GPIO_Port, Screen_Res_Pin, GPIO_PIN_RESET);
 80019c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <SCREEN_GPIO_Act+0xec>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	2102      	movs	r1, #2
 80019ca:	0018      	movs	r0, r3
 80019cc:	f001 fb81 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CO2_PWR_Pin Screen_CS_Pin */
  GPIO_InitStruct.Pin = Screen_CS_Pin;
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2280      	movs	r2, #128	@ 0x80
 80019d4:	0212      	lsls	r2, r2, #8
 80019d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2201      	movs	r2, #1
 80019dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4a1f      	ldr	r2, [pc, #124]	@ (8001a6c <SCREEN_GPIO_Act+0xe8>)
 80019ee:	0019      	movs	r1, r3
 80019f0:	0010      	movs	r0, r2
 80019f2:	f001 f9e3 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_PWR_Pin SD_PWR_Pin SD_CS_Pin D_C_Pin */
  GPIO_InitStruct.Pin = D_C_Pin;
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2280      	movs	r2, #128	@ 0x80
 80019fa:	01d2      	lsls	r2, r2, #7
 80019fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2201      	movs	r2, #1
 8001a02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	1d3a      	adds	r2, r7, #4
 8001a12:	23a0      	movs	r3, #160	@ 0xa0
 8001a14:	05db      	lsls	r3, r3, #23
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f001 f9cf 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_Busy_Pin */
  GPIO_InitStruct.Pin = Screen_Busy_Pin;
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2210      	movs	r2, #16
 8001a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Screen_Busy_GPIO_Port, &GPIO_InitStruct);
 8001a30:	1d3a      	adds	r2, r7, #4
 8001a32:	23a0      	movs	r3, #160	@ 0xa0
 8001a34:	05db      	lsls	r3, r3, #23
 8001a36:	0011      	movs	r1, r2
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f001 f9bf 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_Res_Pin */
  GPIO_InitStruct.Pin = Screen_Res_Pin;
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2202      	movs	r2, #2
 8001a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2201      	movs	r2, #1
 8001a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Screen_Res_GPIO_Port, &GPIO_InitStruct);
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <SCREEN_GPIO_Act+0xec>)
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	0010      	movs	r0, r2
 8001a5e:	f001 f9ad 	bl	8002dbc <HAL_GPIO_Init>

}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b006      	add	sp, #24
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			@ (mov r8, r8)
 8001a6c:	50000800 	.word	0x50000800
 8001a70:	50000400 	.word	0x50000400

08001a74 <SCREEN_GPIO_Deact>:

void SCREEN_GPIO_Deact(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	2314      	movs	r3, #20
 8001a80:	001a      	movs	r2, r3
 8001a82:	2100      	movs	r1, #0
 8001a84:	f003 fd80 	bl	8005588 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  HAL_GPIO_WritePin(Screen_CS_GPIO_Port, Screen_CS_Pin, GPIO_PIN_RESET);
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	482e      	ldr	r0, [pc, #184]	@ (8001b48 <SCREEN_GPIO_Deact+0xd4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	0019      	movs	r1, r3
 8001a92:	f001 fb1e 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Screen_PWR_Pin, GPIO_PIN_SET); // Deactivate the screen
 8001a96:	23a0      	movs	r3, #160	@ 0xa0
 8001a98:	05db      	lsls	r3, r3, #23
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2102      	movs	r1, #2
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f001 fb17 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_C_Pin, GPIO_PIN_RESET);
 8001aa4:	2380      	movs	r3, #128	@ 0x80
 8001aa6:	01d9      	lsls	r1, r3, #7
 8001aa8:	23a0      	movs	r3, #160	@ 0xa0
 8001aaa:	05db      	lsls	r3, r3, #23
 8001aac:	2200      	movs	r2, #0
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f001 fb0f 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_Res_GPIO_Port, Screen_Res_Pin, GPIO_PIN_RESET);
 8001ab4:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <SCREEN_GPIO_Deact+0xd8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2102      	movs	r1, #2
 8001aba:	0018      	movs	r0, r3
 8001abc:	f001 fb09 	bl	80030d2 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  /*Configure GPIO pin Output Level */


  /*Configure GPIO pins : CO2_PWR_Pin Screen_CS_Pin */
  GPIO_InitStruct.Pin = Screen_CS_Pin;
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2280      	movs	r2, #128	@ 0x80
 8001ac4:	0212      	lsls	r2, r2, #8
 8001ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2203      	movs	r2, #3
 8001acc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b48 <SCREEN_GPIO_Deact+0xd4>)
 8001ad8:	0019      	movs	r1, r3
 8001ada:	0010      	movs	r0, r2
 8001adc:	f001 f96e 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_PWR_Pin SD_PWR_Pin SD_CS_Pin D_C_Pin */
  GPIO_InitStruct.Pin = D_C_Pin;
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2280      	movs	r2, #128	@ 0x80
 8001ae4:	01d2      	lsls	r2, r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2203      	movs	r2, #3
 8001aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	1d3a      	adds	r2, r7, #4
 8001af6:	23a0      	movs	r3, #160	@ 0xa0
 8001af8:	05db      	lsls	r3, r3, #23
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f001 f95d 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_Busy_Pin */
  GPIO_InitStruct.Pin = Screen_Busy_Pin;
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2210      	movs	r2, #16
 8001b06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Screen_Busy_GPIO_Port, &GPIO_InitStruct);
 8001b14:	1d3a      	adds	r2, r7, #4
 8001b16:	23a0      	movs	r3, #160	@ 0xa0
 8001b18:	05db      	lsls	r3, r3, #23
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f001 f94d 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_Res_Pin */
  GPIO_InitStruct.Pin = Screen_Res_Pin;
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2202      	movs	r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Screen_Res_GPIO_Port, &GPIO_InitStruct);
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <SCREEN_GPIO_Deact+0xd8>)
 8001b38:	0019      	movs	r1, r3
 8001b3a:	0010      	movs	r0, r2
 8001b3c:	f001 f93e 	bl	8002dbc <HAL_GPIO_Init>

}
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b006      	add	sp, #24
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	50000800 	.word	0x50000800
 8001b4c:	50000400 	.word	0x50000400

08001b50 <delay_xms>:
unsigned char oldDataC[256];
unsigned char oldDataD[256];
unsigned char oldDataE[256];
unsigned char partFlag=1;
void delay_xms(unsigned int xms)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	unsigned int i;
	while(xms--)
 8001b58:	e007      	b.n	8001b6a <delay_xms+0x1a>
	{
		i=12000;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <delay_xms+0x30>)
 8001b5c:	60fb      	str	r3, [r7, #12]
		while(i--);
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1e5a      	subs	r2, r3, #1
 8001b64:	60fa      	str	r2, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1fa      	bne.n	8001b60 <delay_xms+0x10>
	while(xms--)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f2      	bne.n	8001b5a <delay_xms+0xa>
	}
}
 8001b74:	46c0      	nop			@ (mov r8, r8)
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			@ (mov r8, r8)
 8001b80:	00002ee0 	.word	0x00002ee0

08001b84 <lcd_chkstatus>:
void lcd_chkstatus(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	while(isEPD_W21_BUSY==0);
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	23a0      	movs	r3, #160	@ 0xa0
 8001b8c:	05db      	lsls	r3, r3, #23
 8001b8e:	2110      	movs	r1, #16
 8001b90:	0018      	movs	r0, r3
 8001b92:	f001 fa81 	bl	8003098 <HAL_GPIO_ReadPin>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d0f7      	beq.n	8001b8a <lcd_chkstatus+0x6>
                   
}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	46c0      	nop			@ (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <EPD_lut>:
EPD_W21_WriteDATA (0x87);
}


void EPD_lut(unsigned char LUTsel)			
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	0002      	movs	r2, r0
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	701a      	strb	r2, [r3, #0]
	unsigned char tempfull,temppartial;
	EPD_W21_WriteCMD(0x40);
 8001bae:	2040      	movs	r0, #64	@ 0x40
 8001bb0:	f000 fa2a 	bl	8002008 <EPD_W21_WriteCMD>
	lcd_chkstatus();
 8001bb4:	f7ff ffe6 	bl	8001b84 <lcd_chkstatus>
	//tempfull = EPD_W21_ReadDATA();
	tempfull =25;
 8001bb8:	210f      	movs	r1, #15
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2219      	movs	r2, #25
 8001bbe:	701a      	strb	r2, [r3, #0]
	if((128>tempfull)&&(tempfull>54))		
 8001bc0:	000a      	movs	r2, r1
 8001bc2:	18bb      	adds	r3, r7, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b25b      	sxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db07      	blt.n	8001bdc <EPD_lut+0x3a>
 8001bcc:	18bb      	adds	r3, r7, r2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b36      	cmp	r3, #54	@ 0x36
 8001bd2:	d903      	bls.n	8001bdc <EPD_lut+0x3a>
		tempfull = 53 ;						
 8001bd4:	18bb      	adds	r3, r7, r2
 8001bd6:	2235      	movs	r2, #53	@ 0x35
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e007      	b.n	8001bec <EPD_lut+0x4a>
	else if(tempfull>128)					
 8001bdc:	220f      	movs	r2, #15
 8001bde:	18bb      	adds	r3, r7, r2
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b80      	cmp	r3, #128	@ 0x80
 8001be4:	d902      	bls.n	8001bec <EPD_lut+0x4a>
		tempfull = 1;							
 8001be6:	18bb      	adds	r3, r7, r2
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
	
	temppartial = tempfull+60;			
 8001bec:	210e      	movs	r1, #14
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	18ba      	adds	r2, r7, r2
 8001bf4:	7812      	ldrb	r2, [r2, #0]
 8001bf6:	323c      	adds	r2, #60	@ 0x3c
 8001bf8:	701a      	strb	r2, [r3, #0]
	if(temppartial>128)						
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b80      	cmp	r3, #128	@ 0x80
 8001c00:	d902      	bls.n	8001c08 <EPD_lut+0x66>
		temppartial = 127;
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	227f      	movs	r2, #127	@ 0x7f
 8001c06:	701a      	strb	r2, [r3, #0]
	
	if(LUTsel==0)							
 8001c08:	1dfb      	adds	r3, r7, #7
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10f      	bne.n	8001c30 <EPD_lut+0x8e>
	{
			EPD_W21_WriteCMD(0xE0);					
 8001c10:	20e0      	movs	r0, #224	@ 0xe0
 8001c12:	f000 f9f9 	bl	8002008 <EPD_W21_WriteCMD>
			EPD_W21_WriteDATA(0x02);		
 8001c16:	2002      	movs	r0, #2
 8001c18:	f000 fa1b 	bl	8002052 <EPD_W21_WriteDATA>
			EPD_W21_WriteCMD(0xE5);			
 8001c1c:	20e5      	movs	r0, #229	@ 0xe5
 8001c1e:	f000 f9f3 	bl	8002008 <EPD_W21_WriteCMD>
			EPD_W21_WriteDATA(tempfull);	//define the Temperature value////			
 8001c22:	230f      	movs	r3, #15
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f000 fa12 	bl	8002052 <EPD_W21_WriteDATA>
			EPD_W21_WriteCMD(0xe0);
			EPD_W21_WriteDATA (0x02);
			EPD_W21_WriteCMD(0xe5);
			EPD_W21_WriteDATA (temppartial);
	}
}
 8001c2e:	e012      	b.n	8001c56 <EPD_lut+0xb4>
	else if(LUTsel==1)							
 8001c30:	1dfb      	adds	r3, r7, #7
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d10e      	bne.n	8001c56 <EPD_lut+0xb4>
			EPD_W21_WriteCMD(0xe0);
 8001c38:	20e0      	movs	r0, #224	@ 0xe0
 8001c3a:	f000 f9e5 	bl	8002008 <EPD_W21_WriteCMD>
			EPD_W21_WriteDATA (0x02);
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f000 fa07 	bl	8002052 <EPD_W21_WriteDATA>
			EPD_W21_WriteCMD(0xe5);
 8001c44:	20e5      	movs	r0, #229	@ 0xe5
 8001c46:	f000 f9df 	bl	8002008 <EPD_W21_WriteCMD>
			EPD_W21_WriteDATA (temppartial);
 8001c4a:	230e      	movs	r3, #14
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f000 f9fe 	bl	8002052 <EPD_W21_WriteDATA>
}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b004      	add	sp, #16
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <EPD_Init>:
//JD79651
void EPD_Init(void)
{	
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
		EPD_W21_RST_0;		// Module reset
 8001c64:	4b2d      	ldr	r3, [pc, #180]	@ (8001d1c <EPD_Init+0xbc>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	2102      	movs	r1, #2
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f001 fa31 	bl	80030d2 <HAL_GPIO_WritePin>
		HAL_Delay(10);//At least 10ms delay
 8001c70:	200a      	movs	r0, #10
 8001c72:	f000 ff85 	bl	8002b80 <HAL_Delay>
		EPD_W21_RST_1;
 8001c76:	4b29      	ldr	r3, [pc, #164]	@ (8001d1c <EPD_Init+0xbc>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f001 fa28 	bl	80030d2 <HAL_GPIO_WritePin>
		HAL_Delay(10);//At least 10ms delay
 8001c82:	200a      	movs	r0, #10
 8001c84:	f000 ff7c 	bl	8002b80 <HAL_Delay>
    lcd_chkstatus();
 8001c88:	f7ff ff7c 	bl	8001b84 <lcd_chkstatus>
    /******FiTi  init****************/

		EPD_W21_WriteCMD(0x4D);        			//FITIinternal code
 8001c8c:	204d      	movs	r0, #77	@ 0x4d
 8001c8e:	f000 f9bb 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0xAA);
 8001c92:	20aa      	movs	r0, #170	@ 0xaa
 8001c94:	f000 f9dd 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x87);        			//FITIinternal code
 8001c98:	2087      	movs	r0, #135	@ 0x87
 8001c9a:	f000 f9b5 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x28);
 8001c9e:	2028      	movs	r0, #40	@ 0x28
 8001ca0:	f000 f9d7 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x88);        			//FITIinternal code
 8001ca4:	2088      	movs	r0, #136	@ 0x88
 8001ca6:	f000 f9af 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x80);
 8001caa:	2080      	movs	r0, #128	@ 0x80
 8001cac:	f000 f9d1 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x90);        			//FITIinternal code
 8001cb0:	2090      	movs	r0, #144	@ 0x90
 8001cb2:	f000 f9a9 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x02);
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f000 f9cb 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x91);        			//FITIinternal code
 8001cbc:	2091      	movs	r0, #145	@ 0x91
 8001cbe:	f000 f9a3 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x8d);
 8001cc2:	208d      	movs	r0, #141	@ 0x8d
 8001cc4:	f000 f9c5 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0xAA);        			//FITIinternal code
 8001cc8:	20aa      	movs	r0, #170	@ 0xaa
 8001cca:	f000 f99d 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x0f);
 8001cce:	200f      	movs	r0, #15
 8001cd0:	f000 f9bf 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_lut(0);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff ff64 	bl	8001ba2 <EPD_lut>

		EPD_W21_WriteCMD(0xE8);
 8001cda:	20e8      	movs	r0, #232	@ 0xe8
 8001cdc:	f000 f994 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0xA8);		//A
 8001ce0:	20a8      	movs	r0, #168	@ 0xa8
 8001ce2:	f000 f9b6 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x26);
 8001ce6:	2026      	movs	r0, #38	@ 0x26
 8001ce8:	f000 f98e 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x0f);		//A
 8001cec:	200f      	movs	r0, #15
 8001cee:	f000 f9b0 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x04);  // power ON
 8001cf2:	2004      	movs	r0, #4
 8001cf4:	f000 f988 	bl	8002008 <EPD_W21_WriteCMD>
		lcd_chkstatus();
 8001cf8:	f7ff ff44 	bl	8001b84 <lcd_chkstatus>

		EPD_W21_WriteCMD(0x00);			//panel setting
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f000 f983 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0x1f);		//KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8001d02:	201f      	movs	r0, #31
 8001d04:	f000 f9a5 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0X50);
 8001d08:	2050      	movs	r0, #80	@ 0x50
 8001d0a:	f000 f97d 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0x97);
 8001d0e:	2097      	movs	r0, #151	@ 0x97
 8001d10:	f000 f99f 	bl	8002052 <EPD_W21_WriteDATA>

}
 8001d14:	46c0      	nop			@ (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	50000400 	.word	0x50000400

08001d20 <EPD_Init_Part>:


void EPD_Init_Part(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
		EPD_W21_RST_0;		// Module reset
 8001d24:	4b2d      	ldr	r3, [pc, #180]	@ (8001ddc <EPD_Init_Part+0xbc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	2102      	movs	r1, #2
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f001 f9d1 	bl	80030d2 <HAL_GPIO_WritePin>
		delay_xms(10);//At least 10ms delay 
 8001d30:	200a      	movs	r0, #10
 8001d32:	f7ff ff0d 	bl	8001b50 <delay_xms>
		EPD_W21_RST_1;
 8001d36:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <EPD_Init_Part+0xbc>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f001 f9c8 	bl	80030d2 <HAL_GPIO_WritePin>
		delay_xms(10);//At least 10ms delay 
 8001d42:	200a      	movs	r0, #10
 8001d44:	f7ff ff04 	bl	8001b50 <delay_xms>
    lcd_chkstatus();
 8001d48:	f7ff ff1c 	bl	8001b84 <lcd_chkstatus>

		EPD_W21_WriteCMD(0x4D);        			//FITIinternal code
 8001d4c:	204d      	movs	r0, #77	@ 0x4d
 8001d4e:	f000 f95b 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0xAA);
 8001d52:	20aa      	movs	r0, #170	@ 0xaa
 8001d54:	f000 f97d 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x87);        			//FITIinternal code
 8001d58:	2087      	movs	r0, #135	@ 0x87
 8001d5a:	f000 f955 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x28);
 8001d5e:	2028      	movs	r0, #40	@ 0x28
 8001d60:	f000 f977 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x88);        			//FITIinternal code
 8001d64:	2088      	movs	r0, #136	@ 0x88
 8001d66:	f000 f94f 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x80);
 8001d6a:	2080      	movs	r0, #128	@ 0x80
 8001d6c:	f000 f971 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x90);        			//FITIinternal code
 8001d70:	2090      	movs	r0, #144	@ 0x90
 8001d72:	f000 f949 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x02);
 8001d76:	2002      	movs	r0, #2
 8001d78:	f000 f96b 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x91);        			//FITIinternal code
 8001d7c:	2091      	movs	r0, #145	@ 0x91
 8001d7e:	f000 f943 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x8d);
 8001d82:	208d      	movs	r0, #141	@ 0x8d
 8001d84:	f000 f965 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0xAA);        			//FITIinternal code
 8001d88:	20aa      	movs	r0, #170	@ 0xaa
 8001d8a:	f000 f93d 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x0f);
 8001d8e:	200f      	movs	r0, #15
 8001d90:	f000 f95f 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_lut(1);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7ff ff04 	bl	8001ba2 <EPD_lut>

		EPD_W21_WriteCMD(0xE8);         
 8001d9a:	20e8      	movs	r0, #232	@ 0xe8
 8001d9c:	f000 f934 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0xA8);		//A
 8001da0:	20a8      	movs	r0, #168	@ 0xa8
 8001da2:	f000 f956 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x26);         
 8001da6:	2026      	movs	r0, #38	@ 0x26
 8001da8:	f000 f92e 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x0f);		//A
 8001dac:	200f      	movs	r0, #15
 8001dae:	f000 f950 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x04);  
 8001db2:	2004      	movs	r0, #4
 8001db4:	f000 f928 	bl	8002008 <EPD_W21_WriteCMD>
		lcd_chkstatus();
 8001db8:	f7ff fee4 	bl	8001b84 <lcd_chkstatus>

		EPD_W21_WriteCMD(0x00);			//panel setting
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f000 f923 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0x1f);		//KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8001dc2:	201f      	movs	r0, #31
 8001dc4:	f000 f945 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0X50);
 8001dc8:	2050      	movs	r0, #80	@ 0x50
 8001dca:	f000 f91d 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0xf7);
 8001dce:	20f7      	movs	r0, #247	@ 0xf7
 8001dd0:	f000 f93f 	bl	8002052 <EPD_W21_WriteDATA>
	}
 8001dd4:	46c0      	nop			@ (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	50000400 	.word	0x50000400

08001de0 <EPD_DeepSleep>:
	
void EPD_DeepSleep(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
		EPD_W21_WriteCMD(0X50);  //VCOM AND DATA INTERVAL SETTING			
 8001de4:	2050      	movs	r0, #80	@ 0x50
 8001de6:	f000 f90f 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0xf7); //WBmode:VBDF 17|D7 VBDW 97 VBDB 57		WBRmode:VBDF F7 VBDW 77 VBDB 37  VBDR B7	
 8001dea:	20f7      	movs	r0, #247	@ 0xf7
 8001dec:	f000 f931 	bl	8002052 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0X02);  	//power off
 8001df0:	2002      	movs	r0, #2
 8001df2:	f000 f909 	bl	8002008 <EPD_W21_WriteCMD>
	  lcd_chkstatus();          //waiting for the electronic paper IC to release the idle signal
 8001df6:	f7ff fec5 	bl	8001b84 <lcd_chkstatus>
    delay_xms(100);
 8001dfa:	2064      	movs	r0, #100	@ 0x64
 8001dfc:	f7ff fea8 	bl	8001b50 <delay_xms>
	  EPD_W21_WriteCMD(0X07);  	//deep sleep
 8001e00:	2007      	movs	r0, #7
 8001e02:	f000 f901 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0xA5);
 8001e06:	20a5      	movs	r0, #165	@ 0xa5
 8001e08:	f000 f923 	bl	8002052 <EPD_W21_WriteDATA>
}
 8001e0c:	46c0      	nop			@ (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <EPD_Update>:
//Full screen refresh update function
void EPD_Update(void)
{   
 8001e12:	b580      	push	{r7, lr}
 8001e14:	af00      	add	r7, sp, #0
	//Refresh
	EPD_W21_WriteCMD(0x12);		//DISPLAY REFRESH 	
 8001e16:	2012      	movs	r0, #18
 8001e18:	f000 f8f6 	bl	8002008 <EPD_W21_WriteCMD>
	delay_xms(1);	             //!!!The delay here is necessary, 200uS at least!!!     
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f7ff fe97 	bl	8001b50 <delay_xms>
	lcd_chkstatus();          //waiting for the electronic paper IC to release the idle signal
 8001e22:	f7ff feaf 	bl	8001b84 <lcd_chkstatus>
}
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <EPD_WhiteScreen_ALL>:


void EPD_WhiteScreen_ALL(const unsigned char *datas)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
    unsigned int i;
	  //Write Data
		EPD_W21_WriteCMD(0x10);	       //Transfer old data
 8001e34:	2010      	movs	r0, #16
 8001e36:	f000 f8e7 	bl	8002008 <EPD_W21_WriteCMD>
	  for(i=0;i<EPD_ARRAY;i++)	  
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e005      	b.n	8001e4c <EPD_WhiteScreen_ALL+0x20>
    {	
	    EPD_W21_WriteDATA(0xFF);  //Transfer the actual displayed data
 8001e40:	20ff      	movs	r0, #255	@ 0xff
 8001e42:	f000 f906 	bl	8002052 <EPD_W21_WriteDATA>
	  for(i=0;i<EPD_ARRAY;i++)	  
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	23fd      	movs	r3, #253	@ 0xfd
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d3f4      	bcc.n	8001e40 <EPD_WhiteScreen_ALL+0x14>
    }	
		EPD_W21_WriteCMD(0x13);		     //Transfer new data
 8001e56:	2013      	movs	r0, #19
 8001e58:	f000 f8d6 	bl	8002008 <EPD_W21_WriteCMD>
	  for(i=0;i<EPD_ARRAY;i++)	     
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e009      	b.n	8001e76 <EPD_WhiteScreen_ALL+0x4a>
	  {
	    EPD_W21_WriteDATA(datas[i]);  //Transfer the actual displayed data
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	18d3      	adds	r3, r2, r3
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f000 f8f1 	bl	8002052 <EPD_W21_WriteDATA>
	  for(i=0;i<EPD_ARRAY;i++)	     
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	23fd      	movs	r3, #253	@ 0xfd
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d3f0      	bcc.n	8001e62 <EPD_WhiteScreen_ALL+0x36>
	  }
    EPD_Update();	    
 8001e80:	f7ff ffc7 	bl	8001e12 <EPD_Update>


}
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b004      	add	sp, #16
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <EPD_Dis_Part_Old>:
		lcd_chkstatus();          //waiting for the electronic paper IC to release the idle signal  
	  
}

void EPD_Dis_Part_Old(unsigned int x_start,unsigned int y_start,uint8_t * datas,uint8_t * oldDatas,unsigned int PART_COLUMN,unsigned int PART_LINE)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  unsigned int i;

  	  	EPD_Init_Part();
 8001e9a:	f7ff ff41 	bl	8001d20 <EPD_Init_Part>

		EPD_W21_WriteCMD(0x91);		//This command makes the display enter partial mode
 8001e9e:	2091      	movs	r0, #145	@ 0x91
 8001ea0:	f000 f8b2 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteCMD(0x90);		//resolution setting
 8001ea4:	2090      	movs	r0, #144	@ 0x90
 8001ea6:	f000 f8af 	bl	8002008 <EPD_W21_WriteCMD>

		EPD_W21_WriteCMD(0x14);		//resolution setting
 8001eaa:	2014      	movs	r0, #20
 8001eac:	f000 f8ac 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (x_start);   //x-start
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f000 f8cc 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start/256);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f000 f8c6 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start%256);      //y-start
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 f8c1 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA(PART_LINE);	        //w
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f000 f8bc 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)/256);	    //l-MSB
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f000 f8b6 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)%256);	    //l-LSB
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 f8b1 	bl	8002052 <EPD_W21_WriteDATA>

		for(i=0;i<PART_COLUMN*PART_LINE/8;i++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e009      	b.n	8001f0a <EPD_Dis_Part_Old+0x7e>
		{
		EPD_W21_WriteDATA(oldDatas[i]);
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	18d3      	adds	r3, r2, r3
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f8a7 	bl	8002052 <EPD_W21_WriteDATA>
		for(i=0;i<PART_COLUMN*PART_LINE/8;i++)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f0e:	4353      	muls	r3, r2
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d3ee      	bcc.n	8001ef6 <EPD_Dis_Part_Old+0x6a>
		}

		EPD_W21_WriteCMD(0x15);		//resolution setting
 8001f18:	2015      	movs	r0, #21
 8001f1a:	f000 f875 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (x_start);   //x-start
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 f895 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start/256);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f000 f88f 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start%256);   //y-start
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f000 f88a 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA(PART_LINE);	        //w
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 f885 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)/256);	    //l-MSB
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f87f 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)%256);	    //l-LSB
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f000 f87a 	bl	8002052 <EPD_W21_WriteDATA>

		for(i=0;i<PART_COLUMN*PART_LINE/8;i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	e009      	b.n	8001f78 <EPD_Dis_Part_Old+0xec>
		{
		EPD_W21_WriteDATA(datas[i]);
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	18d3      	adds	r3, r2, r3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 f870 	bl	8002052 <EPD_W21_WriteDATA>
		for(i=0;i<PART_COLUMN*PART_LINE/8;i++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f7c:	4353      	muls	r3, r2
 8001f7e:	08db      	lsrs	r3, r3, #3
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3ee      	bcc.n	8001f64 <EPD_Dis_Part_Old+0xd8>
		}

    		//Refresh
		EPD_W21_WriteCMD(0x16);	//DISPLAY REFRESH
 8001f86:	2016      	movs	r0, #22
 8001f88:	f000 f83e 	bl	8002008 <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (x_start);   //x-start
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	0018      	movs	r0, r3
 8001f92:	f000 f85e 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start/256);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 f858 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start%256);   //y-start
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 f853 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA(PART_LINE);	        //w
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f000 f84e 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)/256);	    //l-MSB
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 f848 	bl	8002052 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)%256);	    //l-LSB
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 f843 	bl	8002052 <EPD_W21_WriteDATA>

		HAL_Delay(2);	             //!!!The delay here is necessary, 200uS at least!!!
 8001fcc:	2002      	movs	r0, #2
 8001fce:	f000 fdd7 	bl	8002b80 <HAL_Delay>
		lcd_chkstatus();          //waiting for the electronic paper IC to release the idle signal
 8001fd2:	f7ff fdd7 	bl	8001b84 <lcd_chkstatus>

}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b006      	add	sp, #24
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <SPI_Write>:
//
//}

// SPI Hardware Implement
void SPI_Write(uint8_t value)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	1dfb      	adds	r3, r7, #7
 8001fea:	701a      	strb	r2, [r3, #0]

HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8001fec:	2301      	movs	r3, #1
 8001fee:	425b      	negs	r3, r3
 8001ff0:	1df9      	adds	r1, r7, #7
 8001ff2:	4804      	ldr	r0, [pc, #16]	@ (8002004 <SPI_Write+0x24>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f003 f896 	bl	8005126 <HAL_SPI_Transmit>

}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b002      	add	sp, #8
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	200008a0 	.word	0x200008a0

08002008 <EPD_W21_WriteCMD>:



void EPD_W21_WriteCMD(uint8_t command)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	0002      	movs	r2, r0
 8002010:	1dfb      	adds	r3, r7, #7
 8002012:	701a      	strb	r2, [r3, #0]
	EPD_W21_CS_0;
 8002014:	23a0      	movs	r3, #160	@ 0xa0
 8002016:	05db      	lsls	r3, r3, #23
 8002018:	2200      	movs	r2, #0
 800201a:	2108      	movs	r1, #8
 800201c:	0018      	movs	r0, r3
 800201e:	f001 f858 	bl	80030d2 <HAL_GPIO_WritePin>
	EPD_W21_DC_0;  // D/C#   0:command  1:data
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	01d9      	lsls	r1, r3, #7
 8002026:	23a0      	movs	r3, #160	@ 0xa0
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	2200      	movs	r2, #0
 800202c:	0018      	movs	r0, r3
 800202e:	f001 f850 	bl	80030d2 <HAL_GPIO_WritePin>
	SPI_Write(command);
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	0018      	movs	r0, r3
 8002038:	f7ff ffd2 	bl	8001fe0 <SPI_Write>
	EPD_W21_CS_1;
 800203c:	23a0      	movs	r3, #160	@ 0xa0
 800203e:	05db      	lsls	r3, r3, #23
 8002040:	2201      	movs	r2, #1
 8002042:	2108      	movs	r1, #8
 8002044:	0018      	movs	r0, r3
 8002046:	f001 f844 	bl	80030d2 <HAL_GPIO_WritePin>
}
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	46bd      	mov	sp, r7
 800204e:	b002      	add	sp, #8
 8002050:	bd80      	pop	{r7, pc}

08002052 <EPD_W21_WriteDATA>:
//SPI write data
void EPD_W21_WriteDATA(uint8_t datas)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	0002      	movs	r2, r0
 800205a:	1dfb      	adds	r3, r7, #7
 800205c:	701a      	strb	r2, [r3, #0]
	EPD_W21_CS_0;
 800205e:	23a0      	movs	r3, #160	@ 0xa0
 8002060:	05db      	lsls	r3, r3, #23
 8002062:	2200      	movs	r2, #0
 8002064:	2108      	movs	r1, #8
 8002066:	0018      	movs	r0, r3
 8002068:	f001 f833 	bl	80030d2 <HAL_GPIO_WritePin>
	EPD_W21_DC_1;  // D/C#   0:command  1:data
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	01d9      	lsls	r1, r3, #7
 8002070:	23a0      	movs	r3, #160	@ 0xa0
 8002072:	05db      	lsls	r3, r3, #23
 8002074:	2201      	movs	r2, #1
 8002076:	0018      	movs	r0, r3
 8002078:	f001 f82b 	bl	80030d2 <HAL_GPIO_WritePin>
	SPI_Write(datas);
 800207c:	1dfb      	adds	r3, r7, #7
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff ffad 	bl	8001fe0 <SPI_Write>
	EPD_W21_CS_1;
 8002086:	23a0      	movs	r3, #160	@ 0xa0
 8002088:	05db      	lsls	r3, r3, #23
 800208a:	2201      	movs	r2, #1
 800208c:	2108      	movs	r1, #8
 800208e:	0018      	movs	r0, r3
 8002090:	f001 f81f 	bl	80030d2 <HAL_GPIO_WritePin>
}
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	4cf0      	ldr	r4, [pc, #960]	@ (8002460 <main+0x3c4>)
 80020a0:	44a5      	add	sp, r4
 80020a2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020a4:	f000 fcfc 	bl	8002aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020a8:	f000 fa0e 	bl	80024c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ac:	f000 fb26 	bl	80026fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80020b0:	f000 fa78 	bl	80025a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80020b4:	f000 faea 	bl	800268c <MX_SPI1_Init>
  MX_RTC_Init();
 80020b8:	f000 fab4 	bl	8002624 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  SCREEN_GPIO_Deact();
 80020bc:	f7ff fcda 	bl	8001a74 <SCREEN_GPIO_Deact>

  uint8_t DrawMap[EPD_ARRAY];

  //memset(DrawMap,0xFF,sizeof(DrawMap));
  memcpy(DrawMap,Base_map,sizeof(Base_map));
 80020c0:	4be8      	ldr	r3, [pc, #928]	@ (8002464 <main+0x3c8>)
 80020c2:	4ae9      	ldr	r2, [pc, #932]	@ (8002468 <main+0x3cc>)
 80020c4:	189b      	adds	r3, r3, r2
 80020c6:	19da      	adds	r2, r3, r7
 80020c8:	4be8      	ldr	r3, [pc, #928]	@ (800246c <main+0x3d0>)
 80020ca:	0010      	movs	r0, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	23fd      	movs	r3, #253	@ 0xfd
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	001a      	movs	r2, r3
 80020d4:	f003 fa84 	bl	80055e0 <memcpy>

  //HAL_GPIO_WritePin(GPIOC, CO2_PWR_Pin, GPIO_PIN_SET);


    SCREEN_GPIO_Act();
 80020d8:	f7ff fc54 	bl	8001984 <SCREEN_GPIO_Act>

    HAL_Delay(1000);
 80020dc:	23fa      	movs	r3, #250	@ 0xfa
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 fd4d 	bl	8002b80 <HAL_Delay>

	EPD_Init(); //Full screen refresh initialization.
 80020e6:	f7ff fdbb 	bl	8001c60 <EPD_Init>
	EPD_WhiteScreen_ALL(DrawMap); //To Display one image using full screen refresh.
 80020ea:	230c      	movs	r3, #12
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7ff fe9c 	bl	8001e2c <EPD_WhiteScreen_ALL>
	EPD_DeepSleep(); //Enter the sleep mode and please do not delete it, otherwise it will reduce the lifespan of the screen.
 80020f4:	f7ff fe74 	bl	8001de0 <EPD_DeepSleep>

	SCREEN_GPIO_Deact();
 80020f8:	f7ff fcbc 	bl	8001a74 <SCREEN_GPIO_Deact>

	HAL_Delay(1000);
 80020fc:	23fa      	movs	r3, #250	@ 0xfa
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	0018      	movs	r0, r3
 8002102:	f000 fd3d 	bl	8002b80 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
		unsigned int t = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	228a      	movs	r2, #138	@ 0x8a
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	18ba      	adds	r2, r7, r2
 800210e:	6013      	str	r3, [r2, #0]
		//UNCOMMENT THIS

		uint8_t response[9];
		HAL_GPIO_WritePin(GPIOC, CO2_PWR_Pin, GPIO_PIN_RESET); // pin power
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	01db      	lsls	r3, r3, #7
 8002114:	48d6      	ldr	r0, [pc, #856]	@ (8002470 <main+0x3d4>)
 8002116:	2200      	movs	r2, #0
 8002118:	0019      	movs	r1, r3
 800211a:	f000 ffda 	bl	80030d2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800211e:	2064      	movs	r0, #100	@ 0x64
 8002120:	f000 fd2e 	bl	8002b80 <HAL_Delay>

		while(Send_I2C_Command(&hi2c1, SCD_ADDRESS, (uint16_t ) 0x21b1, 20)!= HAL_OK){HAL_Delay(50);};
 8002124:	e002      	b.n	800212c <main+0x90>
 8002126:	2032      	movs	r0, #50	@ 0x32
 8002128:	f000 fd2a 	bl	8002b80 <HAL_Delay>
 800212c:	4ad1      	ldr	r2, [pc, #836]	@ (8002474 <main+0x3d8>)
 800212e:	48d2      	ldr	r0, [pc, #840]	@ (8002478 <main+0x3dc>)
 8002130:	2314      	movs	r3, #20
 8002132:	21c4      	movs	r1, #196	@ 0xc4
 8002134:	f7ff fbf9 	bl	800192a <Send_I2C_Command>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d1f4      	bne.n	8002126 <main+0x8a>

		HAL_StatusTypeDef ans1 = HAL_ERROR;
 800213c:	4bcf      	ldr	r3, [pc, #828]	@ (800247c <main+0x3e0>)
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]

		while( ans1 == HAL_ERROR)
 8002144:	e017      	b.n	8002176 <main+0xda>
		{
			Send_I2C_Command(&hi2c1, SCD_ADDRESS, (uint16_t ) 0xec05, 20);
 8002146:	4ace      	ldr	r2, [pc, #824]	@ (8002480 <main+0x3e4>)
 8002148:	48cb      	ldr	r0, [pc, #812]	@ (8002478 <main+0x3dc>)
 800214a:	2314      	movs	r3, #20
 800214c:	21c4      	movs	r1, #196	@ 0xc4
 800214e:	f7ff fbec 	bl	800192a <Send_I2C_Command>

			HAL_Delay(1);
 8002152:	2001      	movs	r0, #1
 8002154:	f000 fd14 	bl	8002b80 <HAL_Delay>

			ans1 = HAL_I2C_Master_Receive(&hi2c1,SCD_ADDRESS, (uint8_t *) response,9, 20);
 8002158:	4bc8      	ldr	r3, [pc, #800]	@ (800247c <main+0x3e0>)
 800215a:	18fc      	adds	r4, r7, r3
 800215c:	003a      	movs	r2, r7
 800215e:	48c6      	ldr	r0, [pc, #792]	@ (8002478 <main+0x3dc>)
 8002160:	2314      	movs	r3, #20
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2309      	movs	r3, #9
 8002166:	21c4      	movs	r1, #196	@ 0xc4
 8002168:	f001 f96e 	bl	8003448 <HAL_I2C_Master_Receive>
 800216c:	0003      	movs	r3, r0
 800216e:	7023      	strb	r3, [r4, #0]
			HAL_Delay(50);
 8002170:	2032      	movs	r0, #50	@ 0x32
 8002172:	f000 fd05 	bl	8002b80 <HAL_Delay>
		while( ans1 == HAL_ERROR)
 8002176:	4bc1      	ldr	r3, [pc, #772]	@ (800247c <main+0x3e0>)
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d0e2      	beq.n	8002146 <main+0xaa>
		}

		Send_I2C_Command(&hi2c1, SCD_ADDRESS, (uint16_t ) 0x3f86, 20);
 8002180:	4ac0      	ldr	r2, [pc, #768]	@ (8002484 <main+0x3e8>)
 8002182:	48bd      	ldr	r0, [pc, #756]	@ (8002478 <main+0x3dc>)
 8002184:	2314      	movs	r3, #20
 8002186:	21c4      	movs	r1, #196	@ 0xc4
 8002188:	f7ff fbcf 	bl	800192a <Send_I2C_Command>

		HAL_GPIO_WritePin(GPIOC, CO2_PWR_Pin, GPIO_PIN_SET); // pin power
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	01db      	lsls	r3, r3, #7
 8002190:	48b7      	ldr	r0, [pc, #732]	@ (8002470 <main+0x3d4>)
 8002192:	2201      	movs	r2, #1
 8002194:	0019      	movs	r1, r3
 8002196:	f000 ff9c 	bl	80030d2 <HAL_GPIO_WritePin>
//		//
//		//
//		//
//		//
		uint16_t CO2 = (response[0] << 8) | response[1];
 800219a:	4bbb      	ldr	r3, [pc, #748]	@ (8002488 <main+0x3ec>)
 800219c:	4cb2      	ldr	r4, [pc, #712]	@ (8002468 <main+0x3cc>)
 800219e:	191b      	adds	r3, r3, r4
 80021a0:	19db      	adds	r3, r3, r7
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	4bb7      	ldr	r3, [pc, #732]	@ (8002488 <main+0x3ec>)
 80021aa:	191b      	adds	r3, r3, r4
 80021ac:	19db      	adds	r3, r3, r7
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	4bb5      	ldr	r3, [pc, #724]	@ (800248c <main+0x3f0>)
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	801a      	strh	r2, [r3, #0]

		float T =  (response[3] << 8) | response[4];
 80021bc:	4bb2      	ldr	r3, [pc, #712]	@ (8002488 <main+0x3ec>)
 80021be:	191a      	adds	r2, r3, r4
 80021c0:	19d3      	adds	r3, r2, r7
 80021c2:	78db      	ldrb	r3, [r3, #3]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	4ab0      	ldr	r2, [pc, #704]	@ (8002488 <main+0x3ec>)
 80021c8:	1912      	adds	r2, r2, r4
 80021ca:	19d2      	adds	r2, r2, r7
 80021cc:	7912      	ldrb	r2, [r2, #4]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7fe fd61 	bl	8000c98 <__aeabi_i2f>
 80021d6:	1c03      	adds	r3, r0, #0
 80021d8:	4dad      	ldr	r5, [pc, #692]	@ (8002490 <main+0x3f4>)
 80021da:	197a      	adds	r2, r7, r5
 80021dc:	6013      	str	r3, [r2, #0]

		T = -45 + 175*T/65536;
 80021de:	49ad      	ldr	r1, [pc, #692]	@ (8002494 <main+0x3f8>)
 80021e0:	197a      	adds	r2, r7, r5
 80021e2:	6810      	ldr	r0, [r2, #0]
 80021e4:	f7fe fa56 	bl	8000694 <__aeabi_fmul>
 80021e8:	1c03      	adds	r3, r0, #0
 80021ea:	218f      	movs	r1, #143	@ 0x8f
 80021ec:	05c9      	lsls	r1, r1, #23
 80021ee:	1c18      	adds	r0, r3, #0
 80021f0:	f7fe f930 	bl	8000454 <__aeabi_fdiv>
 80021f4:	1c03      	adds	r3, r0, #0
 80021f6:	49a8      	ldr	r1, [pc, #672]	@ (8002498 <main+0x3fc>)
 80021f8:	1c18      	adds	r0, r3, #0
 80021fa:	f7fe fb89 	bl	8000910 <__aeabi_fsub>
 80021fe:	1c03      	adds	r3, r0, #0
 8002200:	197a      	adds	r2, r7, r5
 8002202:	6013      	str	r3, [r2, #0]

		float H =  (response[6] << 8) | response[7];
 8002204:	4ba0      	ldr	r3, [pc, #640]	@ (8002488 <main+0x3ec>)
 8002206:	191a      	adds	r2, r3, r4
 8002208:	19d3      	adds	r3, r2, r7
 800220a:	799b      	ldrb	r3, [r3, #6]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	4a9e      	ldr	r2, [pc, #632]	@ (8002488 <main+0x3ec>)
 8002210:	1912      	adds	r2, r2, r4
 8002212:	19d2      	adds	r2, r2, r7
 8002214:	79d2      	ldrb	r2, [r2, #7]
 8002216:	4313      	orrs	r3, r2
 8002218:	0018      	movs	r0, r3
 800221a:	f7fe fd3d 	bl	8000c98 <__aeabi_i2f>
 800221e:	1c03      	adds	r3, r0, #0
 8002220:	4c9e      	ldr	r4, [pc, #632]	@ (800249c <main+0x400>)
 8002222:	193a      	adds	r2, r7, r4
 8002224:	6013      	str	r3, [r2, #0]

		H = 100*H/65536;
 8002226:	499e      	ldr	r1, [pc, #632]	@ (80024a0 <main+0x404>)
 8002228:	193a      	adds	r2, r7, r4
 800222a:	6810      	ldr	r0, [r2, #0]
 800222c:	f7fe fa32 	bl	8000694 <__aeabi_fmul>
 8002230:	1c03      	adds	r3, r0, #0
 8002232:	218f      	movs	r1, #143	@ 0x8f
 8002234:	05c9      	lsls	r1, r1, #23
 8002236:	1c18      	adds	r0, r3, #0
 8002238:	f7fe f90c 	bl	8000454 <__aeabi_fdiv>
 800223c:	1c03      	adds	r3, r0, #0
 800223e:	193a      	adds	r2, r7, r4
 8002240:	6013      	str	r3, [r2, #0]

		SCREEN_GPIO_Act();
 8002242:	f7ff fb9f 	bl	8001984 <SCREEN_GPIO_Act>

		HAL_Delay(250);
 8002246:	20fa      	movs	r0, #250	@ 0xfa
 8002248:	f000 fc9a 	bl	8002b80 <HAL_Delay>

		t = t+2;
 800224c:	228a      	movs	r2, #138	@ 0x8a
 800224e:	0112      	lsls	r2, r2, #4
 8002250:	18b8      	adds	r0, r7, r2
 8002252:	6803      	ldr	r3, [r0, #0]
 8002254:	3302      	adds	r3, #2
 8002256:	18b8      	adds	r0, r7, r2
 8002258:	6003      	str	r3, [r0, #0]

		Display_Text(Zone_Write_nums(64,17,FONT_INFO,(int) T,0,0,4),DrawMap,Base_map );
 800225a:	1978      	adds	r0, r7, r5
 800225c:	6800      	ldr	r0, [r0, #0]
 800225e:	f7fe fcfb 	bl	8000c58 <__aeabi_f2iz>
 8002262:	0003      	movs	r3, r0
 8002264:	b29a      	uxth	r2, r3
 8002266:	4d8f      	ldr	r5, [pc, #572]	@ (80024a4 <main+0x408>)
 8002268:	1978      	adds	r0, r7, r5
 800226a:	4b8f      	ldr	r3, [pc, #572]	@ (80024a8 <main+0x40c>)
 800226c:	2104      	movs	r1, #4
 800226e:	9104      	str	r1, [sp, #16]
 8002270:	2100      	movs	r1, #0
 8002272:	9103      	str	r1, [sp, #12]
 8002274:	2100      	movs	r1, #0
 8002276:	9102      	str	r1, [sp, #8]
 8002278:	9201      	str	r2, [sp, #4]
 800227a:	466a      	mov	r2, sp
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	6011      	str	r1, [r2, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2211      	movs	r2, #17
 8002284:	2140      	movs	r1, #64	@ 0x40
 8002286:	f7fe ff32 	bl	80010ee <Zone_Write_nums>
 800228a:	197b      	adds	r3, r7, r5
 800228c:	4a77      	ldr	r2, [pc, #476]	@ (800246c <main+0x3d0>)
 800228e:	9205      	str	r2, [sp, #20]
 8002290:	260c      	movs	r6, #12
 8002292:	19ba      	adds	r2, r7, r6
 8002294:	9204      	str	r2, [sp, #16]
 8002296:	466a      	mov	r2, sp
 8002298:	0011      	movs	r1, r2
 800229a:	0018      	movs	r0, r3
 800229c:	3010      	adds	r0, #16
 800229e:	0002      	movs	r2, r0
 80022a0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80022a2:	c131      	stmia	r1!, {r0, r4, r5}
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	600a      	str	r2, [r1, #0]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f7ff fa1d 	bl	80016ee <Display_Text>
		Display_Text(Zone_Write_nums(34,65,FONT_CO2,CO2,0,1,5),DrawMap,Base_map);
 80022b4:	4d7d      	ldr	r5, [pc, #500]	@ (80024ac <main+0x410>)
 80022b6:	1978      	adds	r0, r7, r5
 80022b8:	4b7d      	ldr	r3, [pc, #500]	@ (80024b0 <main+0x414>)
 80022ba:	2205      	movs	r2, #5
 80022bc:	9204      	str	r2, [sp, #16]
 80022be:	2201      	movs	r2, #1
 80022c0:	9203      	str	r2, [sp, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	9202      	str	r2, [sp, #8]
 80022c6:	4971      	ldr	r1, [pc, #452]	@ (800248c <main+0x3f0>)
 80022c8:	187a      	adds	r2, r7, r1
 80022ca:	8812      	ldrh	r2, [r2, #0]
 80022cc:	9201      	str	r2, [sp, #4]
 80022ce:	466a      	mov	r2, sp
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	6011      	str	r1, [r2, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2241      	movs	r2, #65	@ 0x41
 80022d8:	2122      	movs	r1, #34	@ 0x22
 80022da:	f7fe ff08 	bl	80010ee <Zone_Write_nums>
 80022de:	197b      	adds	r3, r7, r5
 80022e0:	4a62      	ldr	r2, [pc, #392]	@ (800246c <main+0x3d0>)
 80022e2:	9205      	str	r2, [sp, #20]
 80022e4:	19ba      	adds	r2, r7, r6
 80022e6:	9204      	str	r2, [sp, #16]
 80022e8:	466a      	mov	r2, sp
 80022ea:	0011      	movs	r1, r2
 80022ec:	0018      	movs	r0, r3
 80022ee:	3010      	adds	r0, #16
 80022f0:	0002      	movs	r2, r0
 80022f2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80022f4:	c131      	stmia	r1!, {r0, r4, r5}
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	600a      	str	r2, [r1, #0]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	6859      	ldr	r1, [r3, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f7ff f9f4 	bl	80016ee <Display_Text>
		Display_Text(Zone_Write_nums(20,17,FONT_INFO,(int) H,0,0,4),DrawMap,Base_map );
 8002306:	4c65      	ldr	r4, [pc, #404]	@ (800249c <main+0x400>)
 8002308:	193b      	adds	r3, r7, r4
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	f7fe fca4 	bl	8000c58 <__aeabi_f2iz>
 8002310:	0003      	movs	r3, r0
 8002312:	b29a      	uxth	r2, r3
 8002314:	4c67      	ldr	r4, [pc, #412]	@ (80024b4 <main+0x418>)
 8002316:	1938      	adds	r0, r7, r4
 8002318:	4b63      	ldr	r3, [pc, #396]	@ (80024a8 <main+0x40c>)
 800231a:	2104      	movs	r1, #4
 800231c:	9104      	str	r1, [sp, #16]
 800231e:	2100      	movs	r1, #0
 8002320:	9103      	str	r1, [sp, #12]
 8002322:	2100      	movs	r1, #0
 8002324:	9102      	str	r1, [sp, #8]
 8002326:	9201      	str	r2, [sp, #4]
 8002328:	466a      	mov	r2, sp
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	6011      	str	r1, [r2, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2211      	movs	r2, #17
 8002332:	2114      	movs	r1, #20
 8002334:	f7fe fedb 	bl	80010ee <Zone_Write_nums>
 8002338:	193b      	adds	r3, r7, r4
 800233a:	4a4c      	ldr	r2, [pc, #304]	@ (800246c <main+0x3d0>)
 800233c:	9205      	str	r2, [sp, #20]
 800233e:	19ba      	adds	r2, r7, r6
 8002340:	9204      	str	r2, [sp, #16]
 8002342:	466a      	mov	r2, sp
 8002344:	0011      	movs	r1, r2
 8002346:	0018      	movs	r0, r3
 8002348:	3010      	adds	r0, #16
 800234a:	0002      	movs	r2, r0
 800234c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800234e:	c131      	stmia	r1!, {r0, r4, r5}
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	600a      	str	r2, [r1, #0]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f7ff f9c7 	bl	80016ee <Display_Text>

		Display_Text(Zone_Write_nums(118,83,FONT_TIME,t/60,0,0,5),DrawMap,Base_map ); //Heure
 8002360:	228a      	movs	r2, #138	@ 0x8a
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	18bb      	adds	r3, r7, r2
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	213c      	movs	r1, #60	@ 0x3c
 800236a:	0018      	movs	r0, r3
 800236c:	f7fd fecc 	bl	8000108 <__udivsi3>
 8002370:	0003      	movs	r3, r0
 8002372:	b29a      	uxth	r2, r3
 8002374:	4c50      	ldr	r4, [pc, #320]	@ (80024b8 <main+0x41c>)
 8002376:	1938      	adds	r0, r7, r4
 8002378:	4b50      	ldr	r3, [pc, #320]	@ (80024bc <main+0x420>)
 800237a:	2105      	movs	r1, #5
 800237c:	9104      	str	r1, [sp, #16]
 800237e:	2100      	movs	r1, #0
 8002380:	9103      	str	r1, [sp, #12]
 8002382:	2100      	movs	r1, #0
 8002384:	9102      	str	r1, [sp, #8]
 8002386:	9201      	str	r2, [sp, #4]
 8002388:	466a      	mov	r2, sp
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	6011      	str	r1, [r2, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2253      	movs	r2, #83	@ 0x53
 8002392:	2176      	movs	r1, #118	@ 0x76
 8002394:	f7fe feab 	bl	80010ee <Zone_Write_nums>
 8002398:	193b      	adds	r3, r7, r4
 800239a:	4a34      	ldr	r2, [pc, #208]	@ (800246c <main+0x3d0>)
 800239c:	9205      	str	r2, [sp, #20]
 800239e:	19ba      	adds	r2, r7, r6
 80023a0:	9204      	str	r2, [sp, #16]
 80023a2:	466a      	mov	r2, sp
 80023a4:	0011      	movs	r1, r2
 80023a6:	0018      	movs	r0, r3
 80023a8:	3010      	adds	r0, #16
 80023aa:	0002      	movs	r2, r0
 80023ac:	ca31      	ldmia	r2!, {r0, r4, r5}
 80023ae:	c131      	stmia	r1!, {r0, r4, r5}
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	600a      	str	r2, [r1, #0]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f7ff f997 	bl	80016ee <Display_Text>
		Display_Text(Zone_Write_nums(81,83,FONT_TIME,t%60,0,0,2),DrawMap,Base_map ); //Minutes
 80023c0:	228a      	movs	r2, #138	@ 0x8a
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	18bb      	adds	r3, r7, r2
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	213c      	movs	r1, #60	@ 0x3c
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7fd ff22 	bl	8000214 <__aeabi_uidivmod>
 80023d0:	000b      	movs	r3, r1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	4c3a      	ldr	r4, [pc, #232]	@ (80024c0 <main+0x424>)
 80023d6:	1938      	adds	r0, r7, r4
 80023d8:	4b38      	ldr	r3, [pc, #224]	@ (80024bc <main+0x420>)
 80023da:	2102      	movs	r1, #2
 80023dc:	9104      	str	r1, [sp, #16]
 80023de:	2100      	movs	r1, #0
 80023e0:	9103      	str	r1, [sp, #12]
 80023e2:	2100      	movs	r1, #0
 80023e4:	9102      	str	r1, [sp, #8]
 80023e6:	9201      	str	r2, [sp, #4]
 80023e8:	466a      	mov	r2, sp
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	6011      	str	r1, [r2, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2253      	movs	r2, #83	@ 0x53
 80023f2:	2151      	movs	r1, #81	@ 0x51
 80023f4:	f7fe fe7b 	bl	80010ee <Zone_Write_nums>
 80023f8:	193b      	adds	r3, r7, r4
 80023fa:	4a1c      	ldr	r2, [pc, #112]	@ (800246c <main+0x3d0>)
 80023fc:	9205      	str	r2, [sp, #20]
 80023fe:	19ba      	adds	r2, r7, r6
 8002400:	9204      	str	r2, [sp, #16]
 8002402:	466a      	mov	r2, sp
 8002404:	0011      	movs	r1, r2
 8002406:	001a      	movs	r2, r3
 8002408:	3210      	adds	r2, #16
 800240a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800240c:	c131      	stmia	r1!, {r0, r4, r5}
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	600a      	str	r2, [r1, #0]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f7ff f968 	bl	80016ee <Display_Text>

		EPD_DeepSleep();
 800241e:	f7ff fcdf 	bl	8001de0 <EPD_DeepSleep>


//
//		//--------------------------------------
//
	  HAL_GPIO_WritePin(GPIOC, CO2_PWR_Pin, GPIO_PIN_SET);
 8002422:	2380      	movs	r3, #128	@ 0x80
 8002424:	01db      	lsls	r3, r3, #7
 8002426:	4812      	ldr	r0, [pc, #72]	@ (8002470 <main+0x3d4>)
 8002428:	2201      	movs	r2, #1
 800242a:	0019      	movs	r1, r3
 800242c:	f000 fe51 	bl	80030d2 <HAL_GPIO_WritePin>
	  SCREEN_GPIO_Deact();
 8002430:	f7ff fb20 	bl	8001a74 <SCREEN_GPIO_Deact>

		HAL_SuspendTick();
 8002434:	f000 fbc8 	bl	8002bc8 <HAL_SuspendTick>
		HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8002438:	2396      	movs	r3, #150	@ 0x96
 800243a:	0099      	lsls	r1, r3, #2
 800243c:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <main+0x428>)
 800243e:	2204      	movs	r2, #4
 8002440:	0018      	movs	r0, r3
 8002442:	f002 fc73 	bl	8004d2c <HAL_RTCEx_SetWakeUpTimer_IT>

		/* Enter STOP 2 mode */
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,  PWR_STOPENTRY_WFI);
 8002446:	2101      	movs	r1, #1
 8002448:	2001      	movs	r0, #1
 800244a:	f001 fc4b 	bl	8003ce4 <HAL_PWR_EnterSTOPMode>
		//HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON,  PWR_STOPENTRY_WFI);


		//HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800244e:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <main+0x428>)
 8002450:	0018      	movs	r0, r3
 8002452:	f002 fd43 	bl	8004edc <HAL_RTCEx_DeactivateWakeUpTimer>
		SystemClock_Config();
 8002456:	f000 f837 	bl	80024c8 <SystemClock_Config>
		HAL_ResumeTick();
 800245a:	f000 fbc3 	bl	8002be4 <HAL_ResumeTick>
  {
 800245e:	e652      	b.n	8002106 <main+0x6a>
 8002460:	fffff73c 	.word	0xfffff73c
 8002464:	fffff764 	.word	0xfffff764
 8002468:	000008a8 	.word	0x000008a8
 800246c:	20000000 	.word	0x20000000
 8002470:	50000800 	.word	0x50000800
 8002474:	000021b1 	.word	0x000021b1
 8002478:	20000828 	.word	0x20000828
 800247c:	000008a7 	.word	0x000008a7
 8002480:	0000ec05 	.word	0x0000ec05
 8002484:	00003f86 	.word	0x00003f86
 8002488:	fffff758 	.word	0xfffff758
 800248c:	0000089e 	.word	0x0000089e
 8002490:	00000898 	.word	0x00000898
 8002494:	432f0000 	.word	0x432f0000
 8002498:	42340000 	.word	0x42340000
 800249c:	00000894 	.word	0x00000894
 80024a0:	42c80000 	.word	0x42c80000
 80024a4:	000007f4 	.word	0x000007f4
 80024a8:	200007f4 	.word	0x200007f4
 80024ac:	00000814 	.word	0x00000814
 80024b0:	200007ec 	.word	0x200007ec
 80024b4:	00000834 	.word	0x00000834
 80024b8:	00000854 	.word	0x00000854
 80024bc:	200007fc 	.word	0x200007fc
 80024c0:	00000874 	.word	0x00000874
 80024c4:	2000087c 	.word	0x2000087c

080024c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b099      	sub	sp, #100	@ 0x64
 80024cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ce:	242c      	movs	r4, #44	@ 0x2c
 80024d0:	193b      	adds	r3, r7, r4
 80024d2:	0018      	movs	r0, r3
 80024d4:	2334      	movs	r3, #52	@ 0x34
 80024d6:	001a      	movs	r2, r3
 80024d8:	2100      	movs	r1, #0
 80024da:	f003 f855 	bl	8005588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024de:	2318      	movs	r3, #24
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	0018      	movs	r0, r3
 80024e4:	2314      	movs	r3, #20
 80024e6:	001a      	movs	r2, r3
 80024e8:	2100      	movs	r1, #0
 80024ea:	f003 f84d 	bl	8005588 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024ee:	003b      	movs	r3, r7
 80024f0:	0018      	movs	r0, r3
 80024f2:	2318      	movs	r3, #24
 80024f4:	001a      	movs	r2, r3
 80024f6:	2100      	movs	r1, #0
 80024f8:	f003 f846 	bl	8005588 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024fc:	4b27      	ldr	r3, [pc, #156]	@ (800259c <SystemClock_Config+0xd4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a27      	ldr	r2, [pc, #156]	@ (80025a0 <SystemClock_Config+0xd8>)
 8002502:	401a      	ands	r2, r3
 8002504:	4b25      	ldr	r3, [pc, #148]	@ (800259c <SystemClock_Config+0xd4>)
 8002506:	2180      	movs	r1, #128	@ 0x80
 8002508:	0109      	lsls	r1, r1, #4
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800250e:	0021      	movs	r1, r4
 8002510:	187b      	adds	r3, r7, r1
 8002512:	220a      	movs	r2, #10
 8002514:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2201      	movs	r2, #1
 800251a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2210      	movs	r2, #16
 8002520:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2201      	movs	r2, #1
 8002526:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2200      	movs	r2, #0
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800252e:	187b      	adds	r3, r7, r1
 8002530:	0018      	movs	r0, r3
 8002532:	f001 fc33 	bl	8003d9c <HAL_RCC_OscConfig>
 8002536:	1e03      	subs	r3, r0, #0
 8002538:	d001      	beq.n	800253e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800253a:	f000 f999 	bl	8002870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800253e:	2118      	movs	r1, #24
 8002540:	187b      	adds	r3, r7, r1
 8002542:	220f      	movs	r2, #15
 8002544:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002546:	187b      	adds	r3, r7, r1
 8002548:	2201      	movs	r2, #1
 800254a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800254c:	187b      	adds	r3, r7, r1
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2200      	movs	r2, #0
 8002556:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002558:	187b      	adds	r3, r7, r1
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800255e:	187b      	adds	r3, r7, r1
 8002560:	2100      	movs	r1, #0
 8002562:	0018      	movs	r0, r3
 8002564:	f001 ff96 	bl	8004494 <HAL_RCC_ClockConfig>
 8002568:	1e03      	subs	r3, r0, #0
 800256a:	d001      	beq.n	8002570 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800256c:	f000 f980 	bl	8002870 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8002570:	003b      	movs	r3, r7
 8002572:	2228      	movs	r2, #40	@ 0x28
 8002574:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002576:	003b      	movs	r3, r7
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800257c:	003b      	movs	r3, r7
 800257e:	2280      	movs	r2, #128	@ 0x80
 8002580:	0292      	lsls	r2, r2, #10
 8002582:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002584:	003b      	movs	r3, r7
 8002586:	0018      	movs	r0, r3
 8002588:	f002 f972 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 800258c:	1e03      	subs	r3, r0, #0
 800258e:	d001      	beq.n	8002594 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002590:	f000 f96e 	bl	8002870 <Error_Handler>
  }
}
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b019      	add	sp, #100	@ 0x64
 800259a:	bd90      	pop	{r4, r7, pc}
 800259c:	40007000 	.word	0x40007000
 80025a0:	ffffe7ff 	.word	0xffffe7ff

080025a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <MX_I2C1_Init+0x74>)
 80025aa:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <MX_I2C1_Init+0x78>)
 80025ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <MX_I2C1_Init+0x74>)
 80025b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <MX_I2C1_Init+0x7c>)
 80025b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025b4:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <MX_I2C1_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ba:	4b17      	ldr	r3, [pc, #92]	@ (8002618 <MX_I2C1_Init+0x74>)
 80025bc:	2201      	movs	r2, #1
 80025be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025c0:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <MX_I2C1_Init+0x74>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025c6:	4b14      	ldr	r3, [pc, #80]	@ (8002618 <MX_I2C1_Init+0x74>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025cc:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <MX_I2C1_Init+0x74>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <MX_I2C1_Init+0x74>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <MX_I2C1_Init+0x74>)
 80025da:	2200      	movs	r2, #0
 80025dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025de:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <MX_I2C1_Init+0x74>)
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fd93 	bl	800310c <HAL_I2C_Init>
 80025e6:	1e03      	subs	r3, r0, #0
 80025e8:	d001      	beq.n	80025ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025ea:	f000 f941 	bl	8002870 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <MX_I2C1_Init+0x74>)
 80025f0:	2100      	movs	r1, #0
 80025f2:	0018      	movs	r0, r3
 80025f4:	f001 fade 	bl	8003bb4 <HAL_I2CEx_ConfigAnalogFilter>
 80025f8:	1e03      	subs	r3, r0, #0
 80025fa:	d001      	beq.n	8002600 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025fc:	f000 f938 	bl	8002870 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002600:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <MX_I2C1_Init+0x74>)
 8002602:	2100      	movs	r1, #0
 8002604:	0018      	movs	r0, r3
 8002606:	f001 fb21 	bl	8003c4c <HAL_I2CEx_ConfigDigitalFilter>
 800260a:	1e03      	subs	r3, r0, #0
 800260c:	d001      	beq.n	8002612 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800260e:	f000 f92f 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000828 	.word	0x20000828
 800261c:	40005400 	.word	0x40005400
 8002620:	00303d5b 	.word	0x00303d5b

08002624 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002628:	4b16      	ldr	r3, [pc, #88]	@ (8002684 <MX_RTC_Init+0x60>)
 800262a:	4a17      	ldr	r2, [pc, #92]	@ (8002688 <MX_RTC_Init+0x64>)
 800262c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800262e:	4b15      	ldr	r3, [pc, #84]	@ (8002684 <MX_RTC_Init+0x60>)
 8002630:	2200      	movs	r2, #0
 8002632:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002634:	4b13      	ldr	r3, [pc, #76]	@ (8002684 <MX_RTC_Init+0x60>)
 8002636:	227f      	movs	r2, #127	@ 0x7f
 8002638:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800263a:	4b12      	ldr	r3, [pc, #72]	@ (8002684 <MX_RTC_Init+0x60>)
 800263c:	22ff      	movs	r2, #255	@ 0xff
 800263e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002640:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <MX_RTC_Init+0x60>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002646:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <MX_RTC_Init+0x60>)
 8002648:	2200      	movs	r2, #0
 800264a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800264c:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <MX_RTC_Init+0x60>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002652:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <MX_RTC_Init+0x60>)
 8002654:	2200      	movs	r2, #0
 8002656:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002658:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <MX_RTC_Init+0x60>)
 800265a:	0018      	movs	r0, r3
 800265c:	f002 fa34 	bl	8004ac8 <HAL_RTC_Init>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d001      	beq.n	8002668 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002664:	f000 f904 	bl	8002870 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <MX_RTC_Init+0x60>)
 800266a:	2204      	movs	r2, #4
 800266c:	2105      	movs	r1, #5
 800266e:	0018      	movs	r0, r3
 8002670:	f002 fb5c 	bl	8004d2c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002674:	1e03      	subs	r3, r0, #0
 8002676:	d001      	beq.n	800267c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002678:	f000 f8fa 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800267c:	46c0      	nop			@ (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	2000087c 	.word	0x2000087c
 8002688:	40002800 	.word	0x40002800

0800268c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002690:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <MX_SPI1_Init+0x68>)
 8002692:	4a19      	ldr	r2, [pc, #100]	@ (80026f8 <MX_SPI1_Init+0x6c>)
 8002694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002696:	4b17      	ldr	r3, [pc, #92]	@ (80026f4 <MX_SPI1_Init+0x68>)
 8002698:	2282      	movs	r2, #130	@ 0x82
 800269a:	0052      	lsls	r2, r2, #1
 800269c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <MX_SPI1_Init+0x68>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026a4:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <MX_SPI1_Init+0x68>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026aa:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <MX_SPI1_Init+0x68>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026b0:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <MX_SPI1_Init+0x68>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026b6:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <MX_SPI1_Init+0x68>)
 80026b8:	2280      	movs	r2, #128	@ 0x80
 80026ba:	0092      	lsls	r2, r2, #2
 80026bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026be:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <MX_SPI1_Init+0x68>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <MX_SPI1_Init+0x68>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <MX_SPI1_Init+0x68>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d0:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <MX_SPI1_Init+0x68>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80026d6:	4b07      	ldr	r3, [pc, #28]	@ (80026f4 <MX_SPI1_Init+0x68>)
 80026d8:	2207      	movs	r2, #7
 80026da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026dc:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <MX_SPI1_Init+0x68>)
 80026de:	0018      	movs	r0, r3
 80026e0:	f002 fc98 	bl	8005014 <HAL_SPI_Init>
 80026e4:	1e03      	subs	r3, r0, #0
 80026e6:	d001      	beq.n	80026ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026e8:	f000 f8c2 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026ec:	46c0      	nop			@ (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	200008a0 	.word	0x200008a0
 80026f8:	40013000 	.word	0x40013000

080026fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b089      	sub	sp, #36	@ 0x24
 8002700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002702:	240c      	movs	r4, #12
 8002704:	193b      	adds	r3, r7, r4
 8002706:	0018      	movs	r0, r3
 8002708:	2314      	movs	r3, #20
 800270a:	001a      	movs	r2, r3
 800270c:	2100      	movs	r1, #0
 800270e:	f002 ff3b 	bl	8005588 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <MX_GPIO_Init+0x15c>)
 8002714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002716:	4b50      	ldr	r3, [pc, #320]	@ (8002858 <MX_GPIO_Init+0x15c>)
 8002718:	2104      	movs	r1, #4
 800271a:	430a      	orrs	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800271e:	4b4e      	ldr	r3, [pc, #312]	@ (8002858 <MX_GPIO_Init+0x15c>)
 8002720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002722:	2204      	movs	r2, #4
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	4b4b      	ldr	r3, [pc, #300]	@ (8002858 <MX_GPIO_Init+0x15c>)
 800272c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800272e:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <MX_GPIO_Init+0x15c>)
 8002730:	2101      	movs	r1, #1
 8002732:	430a      	orrs	r2, r1
 8002734:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002736:	4b48      	ldr	r3, [pc, #288]	@ (8002858 <MX_GPIO_Init+0x15c>)
 8002738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273a:	2201      	movs	r2, #1
 800273c:	4013      	ands	r3, r2
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	4b45      	ldr	r3, [pc, #276]	@ (8002858 <MX_GPIO_Init+0x15c>)
 8002744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002746:	4b44      	ldr	r3, [pc, #272]	@ (8002858 <MX_GPIO_Init+0x15c>)
 8002748:	2102      	movs	r1, #2
 800274a:	430a      	orrs	r2, r1
 800274c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800274e:	4b42      	ldr	r3, [pc, #264]	@ (8002858 <MX_GPIO_Init+0x15c>)
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	2202      	movs	r2, #2
 8002754:	4013      	ands	r3, r2
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CO2_PWR_GPIO_Port, CO2_PWR_Pin, GPIO_PIN_SET);
 800275a:	2380      	movs	r3, #128	@ 0x80
 800275c:	01db      	lsls	r3, r3, #7
 800275e:	483f      	ldr	r0, [pc, #252]	@ (800285c <MX_GPIO_Init+0x160>)
 8002760:	2201      	movs	r2, #1
 8002762:	0019      	movs	r1, r3
 8002764:	f000 fcb5 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_CS_GPIO_Port, Screen_CS_Pin, GPIO_PIN_RESET);
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	483b      	ldr	r0, [pc, #236]	@ (800285c <MX_GPIO_Init+0x160>)
 800276e:	2200      	movs	r2, #0
 8002770:	0019      	movs	r1, r3
 8002772:	f000 fcae 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Screen_PWR_Pin|SD_PWR_Pin, GPIO_PIN_SET);
 8002776:	23a0      	movs	r3, #160	@ 0xa0
 8002778:	05db      	lsls	r3, r3, #23
 800277a:	2201      	movs	r2, #1
 800277c:	2106      	movs	r1, #6
 800277e:	0018      	movs	r0, r3
 8002780:	f000 fca7 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|D_C_Pin, GPIO_PIN_RESET);
 8002784:	4936      	ldr	r1, [pc, #216]	@ (8002860 <MX_GPIO_Init+0x164>)
 8002786:	23a0      	movs	r3, #160	@ 0xa0
 8002788:	05db      	lsls	r3, r3, #23
 800278a:	2200      	movs	r2, #0
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fca0 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_Res_GPIO_Port, Screen_Res_Pin, GPIO_PIN_RESET);
 8002792:	4b34      	ldr	r3, [pc, #208]	@ (8002864 <MX_GPIO_Init+0x168>)
 8002794:	2200      	movs	r2, #0
 8002796:	2102      	movs	r1, #2
 8002798:	0018      	movs	r0, r3
 800279a:	f000 fc9a 	bl	80030d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CO2_PWR_Pin Screen_CS_Pin */
  GPIO_InitStruct.Pin = CO2_PWR_Pin|Screen_CS_Pin;
 800279e:	193b      	adds	r3, r7, r4
 80027a0:	22c0      	movs	r2, #192	@ 0xc0
 80027a2:	0212      	lsls	r2, r2, #8
 80027a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a6:	193b      	adds	r3, r7, r4
 80027a8:	2201      	movs	r2, #1
 80027aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	193b      	adds	r3, r7, r4
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	193b      	adds	r3, r7, r4
 80027b4:	2200      	movs	r2, #0
 80027b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b8:	193b      	adds	r3, r7, r4
 80027ba:	4a28      	ldr	r2, [pc, #160]	@ (800285c <MX_GPIO_Init+0x160>)
 80027bc:	0019      	movs	r1, r3
 80027be:	0010      	movs	r0, r2
 80027c0:	f000 fafc 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 80027c4:	193b      	adds	r3, r7, r4
 80027c6:	4a28      	ldr	r2, [pc, #160]	@ (8002868 <MX_GPIO_Init+0x16c>)
 80027c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	2203      	movs	r2, #3
 80027ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	193b      	adds	r3, r7, r4
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	193a      	adds	r2, r7, r4
 80027d8:	23a0      	movs	r3, #160	@ 0xa0
 80027da:	05db      	lsls	r3, r3, #23
 80027dc:	0011      	movs	r1, r2
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 faec 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_PWR_Pin SD_PWR_Pin SD_CS_Pin D_C_Pin */
  GPIO_InitStruct.Pin = Screen_PWR_Pin|SD_PWR_Pin|SD_CS_Pin|D_C_Pin;
 80027e4:	193b      	adds	r3, r7, r4
 80027e6:	4a21      	ldr	r2, [pc, #132]	@ (800286c <MX_GPIO_Init+0x170>)
 80027e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	2201      	movs	r2, #1
 80027ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	193b      	adds	r3, r7, r4
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	2200      	movs	r2, #0
 80027fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fc:	193a      	adds	r2, r7, r4
 80027fe:	23a0      	movs	r3, #160	@ 0xa0
 8002800:	05db      	lsls	r3, r3, #23
 8002802:	0011      	movs	r1, r2
 8002804:	0018      	movs	r0, r3
 8002806:	f000 fad9 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_Busy_Pin */
  GPIO_InitStruct.Pin = Screen_Busy_Pin;
 800280a:	193b      	adds	r3, r7, r4
 800280c:	2210      	movs	r2, #16
 800280e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002810:	193b      	adds	r3, r7, r4
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002816:	193b      	adds	r3, r7, r4
 8002818:	2201      	movs	r2, #1
 800281a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Screen_Busy_GPIO_Port, &GPIO_InitStruct);
 800281c:	193a      	adds	r2, r7, r4
 800281e:	23a0      	movs	r3, #160	@ 0xa0
 8002820:	05db      	lsls	r3, r3, #23
 8002822:	0011      	movs	r1, r2
 8002824:	0018      	movs	r0, r3
 8002826:	f000 fac9 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_Res_Pin */
  GPIO_InitStruct.Pin = Screen_Res_Pin;
 800282a:	0021      	movs	r1, r4
 800282c:	187b      	adds	r3, r7, r1
 800282e:	2202      	movs	r2, #2
 8002830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002832:	187b      	adds	r3, r7, r1
 8002834:	2201      	movs	r2, #1
 8002836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	187b      	adds	r3, r7, r1
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	187b      	adds	r3, r7, r1
 8002840:	2200      	movs	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Screen_Res_GPIO_Port, &GPIO_InitStruct);
 8002844:	187b      	adds	r3, r7, r1
 8002846:	4a07      	ldr	r2, [pc, #28]	@ (8002864 <MX_GPIO_Init+0x168>)
 8002848:	0019      	movs	r1, r3
 800284a:	0010      	movs	r0, r2
 800284c:	f000 fab6 	bl	8002dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002850:	46c0      	nop			@ (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b009      	add	sp, #36	@ 0x24
 8002856:	bd90      	pop	{r4, r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	50000800 	.word	0x50000800
 8002860:	00004008 	.word	0x00004008
 8002864:	50000400 	.word	0x50000400
 8002868:	00002001 	.word	0x00002001
 800286c:	0000400e 	.word	0x0000400e

08002870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002874:	b672      	cpsid	i
}
 8002876:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002878:	46c0      	nop			@ (mov r8, r8)
 800287a:	e7fd      	b.n	8002878 <Error_Handler+0x8>

0800287c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002880:	4b07      	ldr	r3, [pc, #28]	@ (80028a0 <HAL_MspInit+0x24>)
 8002882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002884:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_MspInit+0x24>)
 8002886:	2101      	movs	r1, #1
 8002888:	430a      	orrs	r2, r1
 800288a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b04      	ldr	r3, [pc, #16]	@ (80028a0 <HAL_MspInit+0x24>)
 800288e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002890:	4b03      	ldr	r3, [pc, #12]	@ (80028a0 <HAL_MspInit+0x24>)
 8002892:	2180      	movs	r1, #128	@ 0x80
 8002894:	0549      	lsls	r1, r1, #21
 8002896:	430a      	orrs	r2, r1
 8002898:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000

080028a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b089      	sub	sp, #36	@ 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	240c      	movs	r4, #12
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	0018      	movs	r0, r3
 80028b2:	2314      	movs	r3, #20
 80028b4:	001a      	movs	r2, r3
 80028b6:	2100      	movs	r1, #0
 80028b8:	f002 fe66 	bl	8005588 <memset>
  if(hi2c->Instance==I2C1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a18      	ldr	r2, [pc, #96]	@ (8002924 <HAL_I2C_MspInit+0x80>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d12a      	bne.n	800291c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <HAL_I2C_MspInit+0x84>)
 80028c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ca:	4b17      	ldr	r3, [pc, #92]	@ (8002928 <HAL_I2C_MspInit+0x84>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_I2C_MspInit+0x84>)
 80028d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d6:	2201      	movs	r2, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	22c0      	movs	r2, #192	@ 0xc0
 80028e2:	00d2      	lsls	r2, r2, #3
 80028e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e6:	0021      	movs	r1, r4
 80028e8:	187b      	adds	r3, r7, r1
 80028ea:	2212      	movs	r2, #18
 80028ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	2203      	movs	r2, #3
 80028f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80028fa:	187b      	adds	r3, r7, r1
 80028fc:	2201      	movs	r2, #1
 80028fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002900:	187a      	adds	r2, r7, r1
 8002902:	23a0      	movs	r3, #160	@ 0xa0
 8002904:	05db      	lsls	r3, r3, #23
 8002906:	0011      	movs	r1, r2
 8002908:	0018      	movs	r0, r3
 800290a:	f000 fa57 	bl	8002dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_I2C_MspInit+0x84>)
 8002910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002912:	4b05      	ldr	r3, [pc, #20]	@ (8002928 <HAL_I2C_MspInit+0x84>)
 8002914:	2180      	movs	r1, #128	@ 0x80
 8002916:	0389      	lsls	r1, r1, #14
 8002918:	430a      	orrs	r2, r1
 800291a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800291c:	46c0      	nop			@ (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b009      	add	sp, #36	@ 0x24
 8002922:	bd90      	pop	{r4, r7, pc}
 8002924:	40005400 	.word	0x40005400
 8002928:	40021000 	.word	0x40021000

0800292c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <HAL_RTC_MspInit+0x38>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d10e      	bne.n	800295c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800293e:	4b0a      	ldr	r3, [pc, #40]	@ (8002968 <HAL_RTC_MspInit+0x3c>)
 8002940:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002942:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_RTC_MspInit+0x3c>)
 8002944:	2180      	movs	r1, #128	@ 0x80
 8002946:	02c9      	lsls	r1, r1, #11
 8002948:	430a      	orrs	r2, r1
 800294a:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	2002      	movs	r0, #2
 8002952:	f000 fa01 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002956:	2002      	movs	r0, #2
 8002958:	f000 fa13 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800295c:	46c0      	nop			@ (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b002      	add	sp, #8
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40002800 	.word	0x40002800
 8002968:	40021000 	.word	0x40021000

0800296c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b089      	sub	sp, #36	@ 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	240c      	movs	r4, #12
 8002976:	193b      	adds	r3, r7, r4
 8002978:	0018      	movs	r0, r3
 800297a:	2314      	movs	r3, #20
 800297c:	001a      	movs	r2, r3
 800297e:	2100      	movs	r1, #0
 8002980:	f002 fe02 	bl	8005588 <memset>
  if(hspi->Instance==SPI1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a18      	ldr	r2, [pc, #96]	@ (80029ec <HAL_SPI_MspInit+0x80>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d129      	bne.n	80029e2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800298e:	4b18      	ldr	r3, [pc, #96]	@ (80029f0 <HAL_SPI_MspInit+0x84>)
 8002990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002992:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <HAL_SPI_MspInit+0x84>)
 8002994:	2180      	movs	r1, #128	@ 0x80
 8002996:	0149      	lsls	r1, r1, #5
 8002998:	430a      	orrs	r2, r1
 800299a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299c:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <HAL_SPI_MspInit+0x84>)
 800299e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a0:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <HAL_SPI_MspInit+0x84>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	430a      	orrs	r2, r1
 80029a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029a8:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <HAL_SPI_MspInit+0x84>)
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	2201      	movs	r2, #1
 80029ae:	4013      	ands	r3, r2
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029b4:	0021      	movs	r1, r4
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	22e0      	movs	r2, #224	@ 0xe0
 80029ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	2202      	movs	r2, #2
 80029c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2203      	movs	r2, #3
 80029cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	187a      	adds	r2, r7, r1
 80029d6:	23a0      	movs	r3, #160	@ 0xa0
 80029d8:	05db      	lsls	r3, r3, #23
 80029da:	0011      	movs	r1, r2
 80029dc:	0018      	movs	r0, r3
 80029de:	f000 f9ed 	bl	8002dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b009      	add	sp, #36	@ 0x24
 80029e8:	bd90      	pop	{r4, r7, pc}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	40013000 	.word	0x40013000
 80029f0:	40021000 	.word	0x40021000

080029f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029f8:	46c0      	nop			@ (mov r8, r8)
 80029fa:	e7fd      	b.n	80029f8 <NMI_Handler+0x4>

080029fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a00:	46c0      	nop			@ (mov r8, r8)
 8002a02:	e7fd      	b.n	8002a00 <HardFault_Handler+0x4>

08002a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a08:	46c0      	nop			@ (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a1c:	f000 f894 	bl	8002b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <RTC_IRQHandler+0x14>)
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f002 fab8 	bl	8004fa4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002a34:	46c0      	nop			@ (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	2000087c 	.word	0x2000087c

08002a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a44:	46c0      	nop			@ (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002a4c:	480d      	ldr	r0, [pc, #52]	@ (8002a84 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002a4e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a50:	f7ff fff6 	bl	8002a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a54:	480c      	ldr	r0, [pc, #48]	@ (8002a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a56:	490d      	ldr	r1, [pc, #52]	@ (8002a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a58:	4a0d      	ldr	r2, [pc, #52]	@ (8002a90 <LoopForever+0xe>)
  movs r3, #0
 8002a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a5c:	e002      	b.n	8002a64 <LoopCopyDataInit>

08002a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a62:	3304      	adds	r3, #4

08002a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a68:	d3f9      	bcc.n	8002a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a98 <LoopForever+0x16>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a70:	e001      	b.n	8002a76 <LoopFillZerobss>

08002a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a74:	3204      	adds	r2, #4

08002a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a78:	d3fb      	bcc.n	8002a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a7a:	f002 fd8d 	bl	8005598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a7e:	f7ff fb0d 	bl	800209c <main>

08002a82 <LoopForever>:

LoopForever:
    b LoopForever
 8002a82:	e7fe      	b.n	8002a82 <LoopForever>
   ldr   r0, =_estack
 8002a84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a8c:	2000080c 	.word	0x2000080c
  ldr r2, =_sidata
 8002a90:	08005ad8 	.word	0x08005ad8
  ldr r2, =_sbss
 8002a94:	2000080c 	.word	0x2000080c
  ldr r4, =_ebss
 8002a98:	200008fc 	.word	0x200008fc

08002a9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC1_COMP_IRQHandler>
	...

08002aa0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aa6:	1dfb      	adds	r3, r7, #7
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_Init+0x3c>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <HAL_Init+0x3c>)
 8002ab2:	2140      	movs	r1, #64	@ 0x40
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ab8:	2003      	movs	r0, #3
 8002aba:	f000 f811 	bl	8002ae0 <HAL_InitTick>
 8002abe:	1e03      	subs	r3, r0, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002ac2:	1dfb      	adds	r3, r7, #7
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e001      	b.n	8002ace <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002aca:	f7ff fed7 	bl	800287c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ace:	1dfb      	adds	r3, r7, #7
 8002ad0:	781b      	ldrb	r3, [r3, #0]
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			@ (mov r8, r8)
 8002adc:	40022000 	.word	0x40022000

08002ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ae8:	4b14      	ldr	r3, [pc, #80]	@ (8002b3c <HAL_InitTick+0x5c>)
 8002aea:	681c      	ldr	r4, [r3, #0]
 8002aec:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <HAL_InitTick+0x60>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	0019      	movs	r1, r3
 8002af2:	23fa      	movs	r3, #250	@ 0xfa
 8002af4:	0098      	lsls	r0, r3, #2
 8002af6:	f7fd fb07 	bl	8000108 <__udivsi3>
 8002afa:	0003      	movs	r3, r0
 8002afc:	0019      	movs	r1, r3
 8002afe:	0020      	movs	r0, r4
 8002b00:	f7fd fb02 	bl	8000108 <__udivsi3>
 8002b04:	0003      	movs	r3, r0
 8002b06:	0018      	movs	r0, r3
 8002b08:	f000 f94b 	bl	8002da2 <HAL_SYSTICK_Config>
 8002b0c:	1e03      	subs	r3, r0, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e00f      	b.n	8002b34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d80b      	bhi.n	8002b32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	425b      	negs	r3, r3
 8002b20:	2200      	movs	r2, #0
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 f918 	bl	8002d58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_InitTick+0x64>)
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b003      	add	sp, #12
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	200007e8 	.word	0x200007e8
 8002b40:	20000808 	.word	0x20000808
 8002b44:	20000804 	.word	0x20000804

08002b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b4c:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_IncTick+0x1c>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	001a      	movs	r2, r3
 8002b52:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <HAL_IncTick+0x20>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	18d2      	adds	r2, r2, r3
 8002b58:	4b03      	ldr	r3, [pc, #12]	@ (8002b68 <HAL_IncTick+0x20>)
 8002b5a:	601a      	str	r2, [r3, #0]
}
 8002b5c:	46c0      	nop			@ (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	20000808 	.word	0x20000808
 8002b68:	200008f8 	.word	0x200008f8

08002b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b70:	4b02      	ldr	r3, [pc, #8]	@ (8002b7c <HAL_GetTick+0x10>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	200008f8 	.word	0x200008f8

08002b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b88:	f7ff fff0 	bl	8002b6c <HAL_GetTick>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3301      	adds	r3, #1
 8002b98:	d005      	beq.n	8002ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <HAL_Delay+0x44>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	f7ff ffe0 	bl	8002b6c <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d8f7      	bhi.n	8002ba8 <HAL_Delay+0x28>
  {
  }
}
 8002bb8:	46c0      	nop			@ (mov r8, r8)
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b004      	add	sp, #16
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	46c0      	nop			@ (mov r8, r8)
 8002bc4:	20000808 	.word	0x20000808

08002bc8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <HAL_SuspendTick+0x18>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b03      	ldr	r3, [pc, #12]	@ (8002be0 <HAL_SuspendTick+0x18>)
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	438a      	bics	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	46c0      	nop			@ (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	e000e010 	.word	0xe000e010

08002be4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002be8:	4b04      	ldr	r3, [pc, #16]	@ (8002bfc <HAL_ResumeTick+0x18>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <HAL_ResumeTick+0x18>)
 8002bee:	2102      	movs	r1, #2
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
}
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	e000e010 	.word	0xe000e010

08002c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	0002      	movs	r2, r0
 8002c08:	1dfb      	adds	r3, r7, #7
 8002c0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	1dfb      	adds	r3, r7, #7
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c12:	d809      	bhi.n	8002c28 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	001a      	movs	r2, r3
 8002c1a:	231f      	movs	r3, #31
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <__NVIC_EnableIRQ+0x30>)
 8002c20:	2101      	movs	r1, #1
 8002c22:	4091      	lsls	r1, r2
 8002c24:	000a      	movs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
  }
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	1dfb      	adds	r3, r7, #7
 8002c40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c48:	d828      	bhi.n	8002c9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d08 <__NVIC_SetPriority+0xd4>)
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b25b      	sxtb	r3, r3
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	33c0      	adds	r3, #192	@ 0xc0
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	589b      	ldr	r3, [r3, r2]
 8002c5a:	1dfa      	adds	r2, r7, #7
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	0011      	movs	r1, r2
 8002c60:	2203      	movs	r2, #3
 8002c62:	400a      	ands	r2, r1
 8002c64:	00d2      	lsls	r2, r2, #3
 8002c66:	21ff      	movs	r1, #255	@ 0xff
 8002c68:	4091      	lsls	r1, r2
 8002c6a:	000a      	movs	r2, r1
 8002c6c:	43d2      	mvns	r2, r2
 8002c6e:	401a      	ands	r2, r3
 8002c70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	22ff      	movs	r2, #255	@ 0xff
 8002c78:	401a      	ands	r2, r3
 8002c7a:	1dfb      	adds	r3, r7, #7
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	2303      	movs	r3, #3
 8002c82:	4003      	ands	r3, r0
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c88:	481f      	ldr	r0, [pc, #124]	@ (8002d08 <__NVIC_SetPriority+0xd4>)
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b25b      	sxtb	r3, r3
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	430a      	orrs	r2, r1
 8002c94:	33c0      	adds	r3, #192	@ 0xc0
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c9a:	e031      	b.n	8002d00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d0c <__NVIC_SetPriority+0xd8>)
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	3306      	adds	r3, #6
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	18d3      	adds	r3, r2, r3
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	1dfa      	adds	r2, r7, #7
 8002cb8:	7812      	ldrb	r2, [r2, #0]
 8002cba:	0011      	movs	r1, r2
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	00d2      	lsls	r2, r2, #3
 8002cc2:	21ff      	movs	r1, #255	@ 0xff
 8002cc4:	4091      	lsls	r1, r2
 8002cc6:	000a      	movs	r2, r1
 8002cc8:	43d2      	mvns	r2, r2
 8002cca:	401a      	ands	r2, r3
 8002ccc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	22ff      	movs	r2, #255	@ 0xff
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	1dfb      	adds	r3, r7, #7
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	2303      	movs	r3, #3
 8002cde:	4003      	ands	r3, r0
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ce4:	4809      	ldr	r0, [pc, #36]	@ (8002d0c <__NVIC_SetPriority+0xd8>)
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	001c      	movs	r4, r3
 8002cec:	230f      	movs	r3, #15
 8002cee:	4023      	ands	r3, r4
 8002cf0:	3b08      	subs	r3, #8
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	3306      	adds	r3, #6
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	18c3      	adds	r3, r0, r3
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	601a      	str	r2, [r3, #0]
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b003      	add	sp, #12
 8002d06:	bd90      	pop	{r4, r7, pc}
 8002d08:	e000e100 	.word	0xe000e100
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1e5a      	subs	r2, r3, #1
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	045b      	lsls	r3, r3, #17
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d301      	bcc.n	8002d28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d24:	2301      	movs	r3, #1
 8002d26:	e010      	b.n	8002d4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d28:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <SysTick_Config+0x44>)
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d30:	2301      	movs	r3, #1
 8002d32:	425b      	negs	r3, r3
 8002d34:	2103      	movs	r1, #3
 8002d36:	0018      	movs	r0, r3
 8002d38:	f7ff ff7c 	bl	8002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d3c:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <SysTick_Config+0x44>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d42:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <SysTick_Config+0x44>)
 8002d44:	2207      	movs	r2, #7
 8002d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b002      	add	sp, #8
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	e000e010 	.word	0xe000e010

08002d58 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	210f      	movs	r1, #15
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	1c02      	adds	r2, r0, #0
 8002d68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b25b      	sxtb	r3, r3
 8002d72:	0011      	movs	r1, r2
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff ff5d 	bl	8002c34 <__NVIC_SetPriority>
}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b004      	add	sp, #16
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	0002      	movs	r2, r0
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8e:	1dfb      	adds	r3, r7, #7
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7ff ff33 	bl	8002c00 <__NVIC_EnableIRQ>
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7ff ffaf 	bl	8002d10 <SysTick_Config>
 8002db2:	0003      	movs	r3, r0
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002dd2:	e149      	b.n	8003068 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4091      	lsls	r1, r2
 8002dde:	000a      	movs	r2, r1
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d100      	bne.n	8002dec <HAL_GPIO_Init+0x30>
 8002dea:	e13a      	b.n	8003062 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2203      	movs	r2, #3
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d005      	beq.n	8002e04 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d130      	bne.n	8002e66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	409a      	lsls	r2, r3
 8002e12:	0013      	movs	r3, r2
 8002e14:	43da      	mvns	r2, r3
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	409a      	lsls	r2, r3
 8002e26:	0013      	movs	r3, r2
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	0013      	movs	r3, r2
 8002e42:	43da      	mvns	r2, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	091b      	lsrs	r3, r3, #4
 8002e50:	2201      	movs	r2, #1
 8002e52:	401a      	ands	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	409a      	lsls	r2, r3
 8002e58:	0013      	movs	r3, r2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d017      	beq.n	8002ea2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	0013      	movs	r3, r2
 8002e82:	43da      	mvns	r2, r3
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	409a      	lsls	r2, r3
 8002e94:	0013      	movs	r3, r2
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d123      	bne.n	8002ef6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	08da      	lsrs	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3208      	adds	r2, #8
 8002eb6:	0092      	lsls	r2, r2, #2
 8002eb8:	58d3      	ldr	r3, [r2, r3]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	220f      	movs	r2, #15
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	0013      	movs	r3, r2
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2107      	movs	r1, #7
 8002eda:	400b      	ands	r3, r1
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	08da      	lsrs	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3208      	adds	r2, #8
 8002ef0:	0092      	lsls	r2, r2, #2
 8002ef2:	6939      	ldr	r1, [r7, #16]
 8002ef4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	2203      	movs	r2, #3
 8002f02:	409a      	lsls	r2, r3
 8002f04:	0013      	movs	r3, r2
 8002f06:	43da      	mvns	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2203      	movs	r2, #3
 8002f14:	401a      	ands	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	0013      	movs	r3, r2
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	23c0      	movs	r3, #192	@ 0xc0
 8002f30:	029b      	lsls	r3, r3, #10
 8002f32:	4013      	ands	r3, r2
 8002f34:	d100      	bne.n	8002f38 <HAL_GPIO_Init+0x17c>
 8002f36:	e094      	b.n	8003062 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f38:	4b51      	ldr	r3, [pc, #324]	@ (8003080 <HAL_GPIO_Init+0x2c4>)
 8002f3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f3c:	4b50      	ldr	r3, [pc, #320]	@ (8003080 <HAL_GPIO_Init+0x2c4>)
 8002f3e:	2101      	movs	r1, #1
 8002f40:	430a      	orrs	r2, r1
 8002f42:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f44:	4a4f      	ldr	r2, [pc, #316]	@ (8003084 <HAL_GPIO_Init+0x2c8>)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	589b      	ldr	r3, [r3, r2]
 8002f50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2203      	movs	r2, #3
 8002f56:	4013      	ands	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	220f      	movs	r2, #15
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	0013      	movs	r3, r2
 8002f60:	43da      	mvns	r2, r3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	23a0      	movs	r3, #160	@ 0xa0
 8002f6c:	05db      	lsls	r3, r3, #23
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d013      	beq.n	8002f9a <HAL_GPIO_Init+0x1de>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a44      	ldr	r2, [pc, #272]	@ (8003088 <HAL_GPIO_Init+0x2cc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00d      	beq.n	8002f96 <HAL_GPIO_Init+0x1da>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a43      	ldr	r2, [pc, #268]	@ (800308c <HAL_GPIO_Init+0x2d0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d007      	beq.n	8002f92 <HAL_GPIO_Init+0x1d6>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a42      	ldr	r2, [pc, #264]	@ (8003090 <HAL_GPIO_Init+0x2d4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <HAL_GPIO_Init+0x1d2>
 8002f8a:	2305      	movs	r3, #5
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x1e0>
 8002f8e:	2306      	movs	r3, #6
 8002f90:	e004      	b.n	8002f9c <HAL_GPIO_Init+0x1e0>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_Init+0x1e0>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_GPIO_Init+0x1e0>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	2103      	movs	r1, #3
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	4093      	lsls	r3, r2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fac:	4935      	ldr	r1, [pc, #212]	@ (8003084 <HAL_GPIO_Init+0x2c8>)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fba:	4b36      	ldr	r3, [pc, #216]	@ (8003094 <HAL_GPIO_Init+0x2d8>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	2380      	movs	r3, #128	@ 0x80
 8002fd0:	035b      	lsls	r3, r3, #13
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fde:	4b2d      	ldr	r3, [pc, #180]	@ (8003094 <HAL_GPIO_Init+0x2d8>)
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8003094 <HAL_GPIO_Init+0x2d8>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	43da      	mvns	r2, r3
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	039b      	lsls	r3, r3, #14
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003008:	4b22      	ldr	r3, [pc, #136]	@ (8003094 <HAL_GPIO_Init+0x2d8>)
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800300e:	4b21      	ldr	r3, [pc, #132]	@ (8003094 <HAL_GPIO_Init+0x2d8>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	43da      	mvns	r2, r3
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	2380      	movs	r3, #128	@ 0x80
 8003024:	029b      	lsls	r3, r3, #10
 8003026:	4013      	ands	r3, r2
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003032:	4b18      	ldr	r3, [pc, #96]	@ (8003094 <HAL_GPIO_Init+0x2d8>)
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003038:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <HAL_GPIO_Init+0x2d8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43da      	mvns	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	2380      	movs	r3, #128	@ 0x80
 800304e:	025b      	lsls	r3, r3, #9
 8003050:	4013      	ands	r3, r2
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800305c:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <HAL_GPIO_Init+0x2d8>)
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	3301      	adds	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	40da      	lsrs	r2, r3
 8003070:	1e13      	subs	r3, r2, #0
 8003072:	d000      	beq.n	8003076 <HAL_GPIO_Init+0x2ba>
 8003074:	e6ae      	b.n	8002dd4 <HAL_GPIO_Init+0x18>
  }
}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	46c0      	nop			@ (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b006      	add	sp, #24
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	40010000 	.word	0x40010000
 8003088:	50000400 	.word	0x50000400
 800308c:	50000800 	.word	0x50000800
 8003090:	50001c00 	.word	0x50001c00
 8003094:	40010400 	.word	0x40010400

08003098 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	000a      	movs	r2, r1
 80030a2:	1cbb      	adds	r3, r7, #2
 80030a4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	1cba      	adds	r2, r7, #2
 80030ac:	8812      	ldrh	r2, [r2, #0]
 80030ae:	4013      	ands	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80030b2:	230f      	movs	r3, #15
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e003      	b.n	80030c4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030bc:	230f      	movs	r3, #15
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80030c4:	230f      	movs	r3, #15
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	781b      	ldrb	r3, [r3, #0]
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b004      	add	sp, #16
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	0008      	movs	r0, r1
 80030dc:	0011      	movs	r1, r2
 80030de:	1cbb      	adds	r3, r7, #2
 80030e0:	1c02      	adds	r2, r0, #0
 80030e2:	801a      	strh	r2, [r3, #0]
 80030e4:	1c7b      	adds	r3, r7, #1
 80030e6:	1c0a      	adds	r2, r1, #0
 80030e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ea:	1c7b      	adds	r3, r7, #1
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f2:	1cbb      	adds	r3, r7, #2
 80030f4:	881a      	ldrh	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80030fa:	e003      	b.n	8003104 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80030fc:	1cbb      	adds	r3, r7, #2
 80030fe:	881a      	ldrh	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003104:	46c0      	nop			@ (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e082      	b.n	8003224 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2241      	movs	r2, #65	@ 0x41
 8003122:	5c9b      	ldrb	r3, [r3, r2]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2240      	movs	r2, #64	@ 0x40
 800312e:	2100      	movs	r1, #0
 8003130:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	0018      	movs	r0, r3
 8003136:	f7ff fbb5 	bl	80028a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2241      	movs	r2, #65	@ 0x41
 800313e:	2124      	movs	r1, #36	@ 0x24
 8003140:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2101      	movs	r1, #1
 800314e:	438a      	bics	r2, r1
 8003150:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4934      	ldr	r1, [pc, #208]	@ (800322c <HAL_I2C_Init+0x120>)
 800315c:	400a      	ands	r2, r1
 800315e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4931      	ldr	r1, [pc, #196]	@ (8003230 <HAL_I2C_Init+0x124>)
 800316c:	400a      	ands	r2, r1
 800316e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d108      	bne.n	800318a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	0209      	lsls	r1, r1, #8
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	e007      	b.n	800319a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2184      	movs	r1, #132	@ 0x84
 8003194:	0209      	lsls	r1, r1, #8
 8003196:	430a      	orrs	r2, r1
 8003198:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d104      	bne.n	80031ac <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2280      	movs	r2, #128	@ 0x80
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	491f      	ldr	r1, [pc, #124]	@ (8003234 <HAL_I2C_Init+0x128>)
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	491a      	ldr	r1, [pc, #104]	@ (8003230 <HAL_I2C_Init+0x124>)
 80031c8:	400a      	ands	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69d9      	ldr	r1, [r3, #28]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1a      	ldr	r2, [r3, #32]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2101      	movs	r1, #1
 8003202:	430a      	orrs	r2, r1
 8003204:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2241      	movs	r2, #65	@ 0x41
 8003210:	2120      	movs	r1, #32
 8003212:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2242      	movs	r2, #66	@ 0x42
 800321e:	2100      	movs	r1, #0
 8003220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}
 800322c:	f0ffffff 	.word	0xf0ffffff
 8003230:	ffff7fff 	.word	0xffff7fff
 8003234:	02008000 	.word	0x02008000

08003238 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b089      	sub	sp, #36	@ 0x24
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	0008      	movs	r0, r1
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	0019      	movs	r1, r3
 8003246:	230a      	movs	r3, #10
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	1c02      	adds	r2, r0, #0
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	2308      	movs	r3, #8
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	1c0a      	adds	r2, r1, #0
 8003254:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2241      	movs	r2, #65	@ 0x41
 800325a:	5c9b      	ldrb	r3, [r3, r2]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b20      	cmp	r3, #32
 8003260:	d000      	beq.n	8003264 <HAL_I2C_Master_Transmit+0x2c>
 8003262:	e0e7      	b.n	8003434 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2240      	movs	r2, #64	@ 0x40
 8003268:	5c9b      	ldrb	r3, [r3, r2]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_I2C_Master_Transmit+0x3a>
 800326e:	2302      	movs	r3, #2
 8003270:	e0e1      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1fe>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2240      	movs	r2, #64	@ 0x40
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800327a:	f7ff fc77 	bl	8002b6c <HAL_GetTick>
 800327e:	0003      	movs	r3, r0
 8003280:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003282:	2380      	movs	r3, #128	@ 0x80
 8003284:	0219      	lsls	r1, r3, #8
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	2319      	movs	r3, #25
 800328e:	2201      	movs	r2, #1
 8003290:	f000 fa04 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 8003294:	1e03      	subs	r3, r0, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0cc      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2241      	movs	r2, #65	@ 0x41
 80032a0:	2121      	movs	r1, #33	@ 0x21
 80032a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2242      	movs	r2, #66	@ 0x42
 80032a8:	2110      	movs	r1, #16
 80032aa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2208      	movs	r2, #8
 80032bc:	18ba      	adds	r2, r7, r2
 80032be:	8812      	ldrh	r2, [r2, #0]
 80032c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2bff      	cmp	r3, #255	@ 0xff
 80032d0:	d911      	bls.n	80032f6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	22ff      	movs	r2, #255	@ 0xff
 80032d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	2380      	movs	r3, #128	@ 0x80
 80032e0:	045c      	lsls	r4, r3, #17
 80032e2:	230a      	movs	r3, #10
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	8819      	ldrh	r1, [r3, #0]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	4b55      	ldr	r3, [pc, #340]	@ (8003440 <HAL_I2C_Master_Transmit+0x208>)
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	0023      	movs	r3, r4
 80032f0:	f000 fc26 	bl	8003b40 <I2C_TransferConfig>
 80032f4:	e075      	b.n	80033e2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003304:	b2da      	uxtb	r2, r3
 8003306:	2380      	movs	r3, #128	@ 0x80
 8003308:	049c      	lsls	r4, r3, #18
 800330a:	230a      	movs	r3, #10
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	8819      	ldrh	r1, [r3, #0]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	4b4b      	ldr	r3, [pc, #300]	@ (8003440 <HAL_I2C_Master_Transmit+0x208>)
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	0023      	movs	r3, r4
 8003318:	f000 fc12 	bl	8003b40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800331c:	e061      	b.n	80033e2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	0018      	movs	r0, r3
 8003326:	f000 fa07 	bl	8003738 <I2C_WaitOnTXISFlagUntilTimeout>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e081      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d03a      	beq.n	80033e2 <HAL_I2C_Master_Transmit+0x1aa>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d136      	bne.n	80033e2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	0013      	movs	r3, r2
 800337e:	2200      	movs	r2, #0
 8003380:	2180      	movs	r1, #128	@ 0x80
 8003382:	f000 f98b 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e053      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	2bff      	cmp	r3, #255	@ 0xff
 8003396:	d911      	bls.n	80033bc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	22ff      	movs	r2, #255	@ 0xff
 800339c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	045c      	lsls	r4, r3, #17
 80033a8:	230a      	movs	r3, #10
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	8819      	ldrh	r1, [r3, #0]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	2300      	movs	r3, #0
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	0023      	movs	r3, r4
 80033b6:	f000 fbc3 	bl	8003b40 <I2C_TransferConfig>
 80033ba:	e012      	b.n	80033e2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	049c      	lsls	r4, r3, #18
 80033d0:	230a      	movs	r3, #10
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	8819      	ldrh	r1, [r3, #0]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	2300      	movs	r3, #0
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	0023      	movs	r3, r4
 80033de:	f000 fbaf 	bl	8003b40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d198      	bne.n	800331e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	0018      	movs	r0, r3
 80033f4:	f000 f9e6 	bl	80037c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033f8:	1e03      	subs	r3, r0, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e01a      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2220      	movs	r2, #32
 8003406:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	490c      	ldr	r1, [pc, #48]	@ (8003444 <HAL_I2C_Master_Transmit+0x20c>)
 8003414:	400a      	ands	r2, r1
 8003416:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2241      	movs	r2, #65	@ 0x41
 800341c:	2120      	movs	r1, #32
 800341e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2242      	movs	r2, #66	@ 0x42
 8003424:	2100      	movs	r1, #0
 8003426:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2240      	movs	r2, #64	@ 0x40
 800342c:	2100      	movs	r1, #0
 800342e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
  }
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b007      	add	sp, #28
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	80002000 	.word	0x80002000
 8003444:	fe00e800 	.word	0xfe00e800

08003448 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b089      	sub	sp, #36	@ 0x24
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	0008      	movs	r0, r1
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	0019      	movs	r1, r3
 8003456:	230a      	movs	r3, #10
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	1c02      	adds	r2, r0, #0
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	2308      	movs	r3, #8
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	1c0a      	adds	r2, r1, #0
 8003464:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2241      	movs	r2, #65	@ 0x41
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b20      	cmp	r3, #32
 8003470:	d000      	beq.n	8003474 <HAL_I2C_Master_Receive+0x2c>
 8003472:	e0e8      	b.n	8003646 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2240      	movs	r2, #64	@ 0x40
 8003478:	5c9b      	ldrb	r3, [r3, r2]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_I2C_Master_Receive+0x3a>
 800347e:	2302      	movs	r3, #2
 8003480:	e0e2      	b.n	8003648 <HAL_I2C_Master_Receive+0x200>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2240      	movs	r2, #64	@ 0x40
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800348a:	f7ff fb6f 	bl	8002b6c <HAL_GetTick>
 800348e:	0003      	movs	r3, r0
 8003490:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003492:	2380      	movs	r3, #128	@ 0x80
 8003494:	0219      	lsls	r1, r3, #8
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2319      	movs	r3, #25
 800349e:	2201      	movs	r2, #1
 80034a0:	f000 f8fc 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 80034a4:	1e03      	subs	r3, r0, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0cd      	b.n	8003648 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2241      	movs	r2, #65	@ 0x41
 80034b0:	2122      	movs	r1, #34	@ 0x22
 80034b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2242      	movs	r2, #66	@ 0x42
 80034b8:	2110      	movs	r1, #16
 80034ba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2208      	movs	r2, #8
 80034cc:	18ba      	adds	r2, r7, r2
 80034ce:	8812      	ldrh	r2, [r2, #0]
 80034d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2bff      	cmp	r3, #255	@ 0xff
 80034e0:	d911      	bls.n	8003506 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	22ff      	movs	r2, #255	@ 0xff
 80034e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	2380      	movs	r3, #128	@ 0x80
 80034f0:	045c      	lsls	r4, r3, #17
 80034f2:	230a      	movs	r3, #10
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	8819      	ldrh	r1, [r3, #0]
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	4b55      	ldr	r3, [pc, #340]	@ (8003650 <HAL_I2C_Master_Receive+0x208>)
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	0023      	movs	r3, r4
 8003500:	f000 fb1e 	bl	8003b40 <I2C_TransferConfig>
 8003504:	e076      	b.n	80035f4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003514:	b2da      	uxtb	r2, r3
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	049c      	lsls	r4, r3, #18
 800351a:	230a      	movs	r3, #10
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	8819      	ldrh	r1, [r3, #0]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	4b4b      	ldr	r3, [pc, #300]	@ (8003650 <HAL_I2C_Master_Receive+0x208>)
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	0023      	movs	r3, r4
 8003528:	f000 fb0a 	bl	8003b40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800352c:	e062      	b.n	80035f4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	0018      	movs	r0, r3
 8003536:	f000 f989 	bl	800384c <I2C_WaitOnRXNEFlagUntilTimeout>
 800353a:	1e03      	subs	r3, r0, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e082      	b.n	8003648 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03a      	beq.n	80035f4 <HAL_I2C_Master_Receive+0x1ac>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003582:	2b00      	cmp	r3, #0
 8003584:	d136      	bne.n	80035f4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	0013      	movs	r3, r2
 8003590:	2200      	movs	r2, #0
 8003592:	2180      	movs	r1, #128	@ 0x80
 8003594:	f000 f882 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 8003598:	1e03      	subs	r3, r0, #0
 800359a:	d001      	beq.n	80035a0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e053      	b.n	8003648 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2bff      	cmp	r3, #255	@ 0xff
 80035a8:	d911      	bls.n	80035ce <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	22ff      	movs	r2, #255	@ 0xff
 80035ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	2380      	movs	r3, #128	@ 0x80
 80035b8:	045c      	lsls	r4, r3, #17
 80035ba:	230a      	movs	r3, #10
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	8819      	ldrh	r1, [r3, #0]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	2300      	movs	r3, #0
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	0023      	movs	r3, r4
 80035c8:	f000 faba 	bl	8003b40 <I2C_TransferConfig>
 80035cc:	e012      	b.n	80035f4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	2380      	movs	r3, #128	@ 0x80
 80035e0:	049c      	lsls	r4, r3, #18
 80035e2:	230a      	movs	r3, #10
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	8819      	ldrh	r1, [r3, #0]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	2300      	movs	r3, #0
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	0023      	movs	r3, r4
 80035f0:	f000 faa6 	bl	8003b40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d197      	bne.n	800352e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	0018      	movs	r0, r3
 8003606:	f000 f8dd 	bl	80037c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d001      	beq.n	8003612 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e01a      	b.n	8003648 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2220      	movs	r2, #32
 8003618:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	490b      	ldr	r1, [pc, #44]	@ (8003654 <HAL_I2C_Master_Receive+0x20c>)
 8003626:	400a      	ands	r2, r1
 8003628:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2241      	movs	r2, #65	@ 0x41
 800362e:	2120      	movs	r1, #32
 8003630:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2242      	movs	r2, #66	@ 0x42
 8003636:	2100      	movs	r1, #0
 8003638:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2240      	movs	r2, #64	@ 0x40
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003646:	2302      	movs	r3, #2
  }
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b007      	add	sp, #28
 800364e:	bd90      	pop	{r4, r7, pc}
 8003650:	80002400 	.word	0x80002400
 8003654:	fe00e800 	.word	0xfe00e800

08003658 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2202      	movs	r2, #2
 8003668:	4013      	ands	r3, r2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d103      	bne.n	8003676 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2200      	movs	r2, #0
 8003674:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2201      	movs	r2, #1
 800367e:	4013      	ands	r3, r2
 8003680:	2b01      	cmp	r3, #1
 8003682:	d007      	beq.n	8003694 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2101      	movs	r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	619a      	str	r2, [r3, #24]
  }
}
 8003694:	46c0      	nop			@ (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b002      	add	sp, #8
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ac:	e030      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	d02d      	beq.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7ff fa5a 	bl	8002b6c <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <I2C_WaitOnFlagUntilTimeout+0x2e>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d122      	bne.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	425a      	negs	r2, r3
 80036da:	4153      	adcs	r3, r2
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	001a      	movs	r2, r3
 80036e0:	1dfb      	adds	r3, r7, #7
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d113      	bne.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ec:	2220      	movs	r2, #32
 80036ee:	431a      	orrs	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2241      	movs	r2, #65	@ 0x41
 80036f8:	2120      	movs	r1, #32
 80036fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2242      	movs	r2, #66	@ 0x42
 8003700:	2100      	movs	r1, #0
 8003702:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2240      	movs	r2, #64	@ 0x40
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e00f      	b.n	8003730 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	4013      	ands	r3, r2
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	425a      	negs	r2, r3
 8003720:	4153      	adcs	r3, r2
 8003722:	b2db      	uxtb	r3, r3
 8003724:	001a      	movs	r2, r3
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d0bf      	beq.n	80036ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b004      	add	sp, #16
 8003736:	bd80      	pop	{r7, pc}

08003738 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003744:	e032      	b.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	0018      	movs	r0, r3
 800374e:	f000 f8ff 	bl	8003950 <I2C_IsErrorOccurred>
 8003752:	1e03      	subs	r3, r0, #0
 8003754:	d001      	beq.n	800375a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e030      	b.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3301      	adds	r3, #1
 800375e:	d025      	beq.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7ff fa04 	bl	8002b6c <HAL_GetTick>
 8003764:	0002      	movs	r2, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11a      	bne.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2202      	movs	r2, #2
 800377e:	4013      	ands	r3, r2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d013      	beq.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003788:	2220      	movs	r2, #32
 800378a:	431a      	orrs	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2241      	movs	r2, #65	@ 0x41
 8003794:	2120      	movs	r1, #32
 8003796:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2242      	movs	r2, #66	@ 0x42
 800379c:	2100      	movs	r1, #0
 800379e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2240      	movs	r2, #64	@ 0x40
 80037a4:	2100      	movs	r1, #0
 80037a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e007      	b.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2202      	movs	r2, #2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d1c5      	bne.n	8003746 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d0:	e02f      	b.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 f8b9 	bl	8003950 <I2C_IsErrorOccurred>
 80037de:	1e03      	subs	r3, r0, #0
 80037e0:	d001      	beq.n	80037e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e02d      	b.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e6:	f7ff f9c1 	bl	8002b6c <HAL_GetTick>
 80037ea:	0002      	movs	r2, r0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d11a      	bne.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2220      	movs	r2, #32
 8003804:	4013      	ands	r3, r2
 8003806:	2b20      	cmp	r3, #32
 8003808:	d013      	beq.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	2220      	movs	r2, #32
 8003810:	431a      	orrs	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2241      	movs	r2, #65	@ 0x41
 800381a:	2120      	movs	r1, #32
 800381c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2242      	movs	r2, #66	@ 0x42
 8003822:	2100      	movs	r1, #0
 8003824:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2240      	movs	r2, #64	@ 0x40
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e007      	b.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2220      	movs	r2, #32
 800383a:	4013      	ands	r3, r2
 800383c:	2b20      	cmp	r3, #32
 800383e:	d1c8      	bne.n	80037d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	0018      	movs	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	b004      	add	sp, #16
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003858:	e06b      	b.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 f875 	bl	8003950 <I2C_IsErrorOccurred>
 8003866:	1e03      	subs	r3, r0, #0
 8003868:	d001      	beq.n	800386e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e069      	b.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2220      	movs	r2, #32
 8003876:	4013      	ands	r3, r2
 8003878:	2b20      	cmp	r3, #32
 800387a:	d138      	bne.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2204      	movs	r2, #4
 8003884:	4013      	ands	r3, r2
 8003886:	2b04      	cmp	r3, #4
 8003888:	d105      	bne.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e055      	b.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2210      	movs	r2, #16
 800389e:	4013      	ands	r3, r2
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d107      	bne.n	80038b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2210      	movs	r2, #16
 80038aa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2204      	movs	r2, #4
 80038b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80038b2:	e002      	b.n	80038ba <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2220      	movs	r2, #32
 80038c0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	491f      	ldr	r1, [pc, #124]	@ (800394c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80038ce:	400a      	ands	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2241      	movs	r2, #65	@ 0x41
 80038d6:	2120      	movs	r1, #32
 80038d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2242      	movs	r2, #66	@ 0x42
 80038de:	2100      	movs	r1, #0
 80038e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2240      	movs	r2, #64	@ 0x40
 80038e6:	2100      	movs	r1, #0
 80038e8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e029      	b.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ee:	f7ff f93d 	bl	8002b6c <HAL_GetTick>
 80038f2:	0002      	movs	r2, r0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d116      	bne.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2204      	movs	r2, #4
 800390c:	4013      	ands	r3, r2
 800390e:	2b04      	cmp	r3, #4
 8003910:	d00f      	beq.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	2220      	movs	r2, #32
 8003918:	431a      	orrs	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2241      	movs	r2, #65	@ 0x41
 8003922:	2120      	movs	r1, #32
 8003924:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2240      	movs	r2, #64	@ 0x40
 800392a:	2100      	movs	r1, #0
 800392c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e007      	b.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2204      	movs	r2, #4
 800393a:	4013      	ands	r3, r2
 800393c:	2b04      	cmp	r3, #4
 800393e:	d18c      	bne.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	0018      	movs	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	b004      	add	sp, #16
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	fe00e800 	.word	0xfe00e800

08003950 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	@ 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800395c:	2327      	movs	r3, #39	@ 0x27
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2210      	movs	r2, #16
 8003978:	4013      	ands	r3, r2
 800397a:	d100      	bne.n	800397e <I2C_IsErrorOccurred+0x2e>
 800397c:	e079      	b.n	8003a72 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2210      	movs	r2, #16
 8003984:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003986:	e057      	b.n	8003a38 <I2C_IsErrorOccurred+0xe8>
 8003988:	2227      	movs	r2, #39	@ 0x27
 800398a:	18bb      	adds	r3, r7, r2
 800398c:	18ba      	adds	r2, r7, r2
 800398e:	7812      	ldrb	r2, [r2, #0]
 8003990:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	3301      	adds	r3, #1
 8003996:	d04f      	beq.n	8003a38 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003998:	f7ff f8e8 	bl	8002b6c <HAL_GetTick>
 800399c:	0002      	movs	r2, r0
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d302      	bcc.n	80039ae <I2C_IsErrorOccurred+0x5e>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d144      	bne.n	8003a38 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	2380      	movs	r3, #128	@ 0x80
 80039b6:	01db      	lsls	r3, r3, #7
 80039b8:	4013      	ands	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039bc:	2013      	movs	r0, #19
 80039be:	183b      	adds	r3, r7, r0
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	2142      	movs	r1, #66	@ 0x42
 80039c4:	5c52      	ldrb	r2, [r2, r1]
 80039c6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	2380      	movs	r3, #128	@ 0x80
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	401a      	ands	r2, r3
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	429a      	cmp	r2, r3
 80039da:	d126      	bne.n	8003a2a <I2C_IsErrorOccurred+0xda>
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	2380      	movs	r3, #128	@ 0x80
 80039e0:	01db      	lsls	r3, r3, #7
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d021      	beq.n	8003a2a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80039e6:	183b      	adds	r3, r7, r0
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d01d      	beq.n	8003a2a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2180      	movs	r1, #128	@ 0x80
 80039fa:	01c9      	lsls	r1, r1, #7
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a00:	f7ff f8b4 	bl	8002b6c <HAL_GetTick>
 8003a04:	0003      	movs	r3, r0
 8003a06:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a08:	e00f      	b.n	8003a2a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a0a:	f7ff f8af 	bl	8002b6c <HAL_GetTick>
 8003a0e:	0002      	movs	r2, r0
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b19      	cmp	r3, #25
 8003a16:	d908      	bls.n	8003a2a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a20:	2327      	movs	r3, #39	@ 0x27
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]

              break;
 8003a28:	e006      	b.n	8003a38 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2220      	movs	r2, #32
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d1e8      	bne.n	8003a0a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d004      	beq.n	8003a50 <I2C_IsErrorOccurred+0x100>
 8003a46:	2327      	movs	r3, #39	@ 0x27
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d09b      	beq.n	8003988 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a50:	2327      	movs	r3, #39	@ 0x27
 8003a52:	18fb      	adds	r3, r7, r3
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	2204      	movs	r2, #4
 8003a66:	4313      	orrs	r3, r2
 8003a68:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a6a:	2327      	movs	r3, #39	@ 0x27
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	2380      	movs	r3, #128	@ 0x80
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4013      	ands	r3, r2
 8003a82:	d00c      	beq.n	8003a9e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2280      	movs	r2, #128	@ 0x80
 8003a92:	0052      	lsls	r2, r2, #1
 8003a94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a96:	2327      	movs	r3, #39	@ 0x27
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	2380      	movs	r3, #128	@ 0x80
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d00c      	beq.n	8003ac2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	2208      	movs	r2, #8
 8003aac:	4313      	orrs	r3, r2
 8003aae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2280      	movs	r2, #128	@ 0x80
 8003ab6:	00d2      	lsls	r2, r2, #3
 8003ab8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aba:	2327      	movs	r3, #39	@ 0x27
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	2201      	movs	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d00c      	beq.n	8003ae6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2280      	movs	r2, #128	@ 0x80
 8003ada:	0092      	lsls	r2, r2, #2
 8003adc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ade:	2327      	movs	r3, #39	@ 0x27
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003ae6:	2327      	movs	r3, #39	@ 0x27
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01d      	beq.n	8003b2c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7ff fdb0 	bl	8003658 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	490e      	ldr	r1, [pc, #56]	@ (8003b3c <I2C_IsErrorOccurred+0x1ec>)
 8003b04:	400a      	ands	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2241      	movs	r2, #65	@ 0x41
 8003b18:	2120      	movs	r1, #32
 8003b1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2242      	movs	r2, #66	@ 0x42
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2240      	movs	r2, #64	@ 0x40
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003b2c:	2327      	movs	r3, #39	@ 0x27
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	781b      	ldrb	r3, [r3, #0]
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b00a      	add	sp, #40	@ 0x28
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	fe00e800 	.word	0xfe00e800

08003b40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	0008      	movs	r0, r1
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	240a      	movs	r4, #10
 8003b50:	193b      	adds	r3, r7, r4
 8003b52:	1c02      	adds	r2, r0, #0
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	2009      	movs	r0, #9
 8003b58:	183b      	adds	r3, r7, r0
 8003b5a:	1c0a      	adds	r2, r1, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b5e:	193b      	adds	r3, r7, r4
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	059b      	lsls	r3, r3, #22
 8003b64:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b66:	183b      	adds	r3, r7, r0
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	0419      	lsls	r1, r3, #16
 8003b6c:	23ff      	movs	r3, #255	@ 0xff
 8003b6e:	041b      	lsls	r3, r3, #16
 8003b70:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b72:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b8a:	0d51      	lsrs	r1, r2, #21
 8003b8c:	2280      	movs	r2, #128	@ 0x80
 8003b8e:	00d2      	lsls	r2, r2, #3
 8003b90:	400a      	ands	r2, r1
 8003b92:	4907      	ldr	r1, [pc, #28]	@ (8003bb0 <I2C_TransferConfig+0x70>)
 8003b94:	430a      	orrs	r2, r1
 8003b96:	43d2      	mvns	r2, r2
 8003b98:	401a      	ands	r2, r3
 8003b9a:	0011      	movs	r1, r2
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ba6:	46c0      	nop			@ (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b007      	add	sp, #28
 8003bac:	bd90      	pop	{r4, r7, pc}
 8003bae:	46c0      	nop			@ (mov r8, r8)
 8003bb0:	03ff63ff 	.word	0x03ff63ff

08003bb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2241      	movs	r2, #65	@ 0x41
 8003bc2:	5c9b      	ldrb	r3, [r3, r2]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d138      	bne.n	8003c3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2240      	movs	r2, #64	@ 0x40
 8003bce:	5c9b      	ldrb	r3, [r3, r2]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e032      	b.n	8003c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2240      	movs	r2, #64	@ 0x40
 8003bdc:	2101      	movs	r1, #1
 8003bde:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2241      	movs	r2, #65	@ 0x41
 8003be4:	2124      	movs	r1, #36	@ 0x24
 8003be6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	438a      	bics	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4911      	ldr	r1, [pc, #68]	@ (8003c48 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c04:	400a      	ands	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2101      	movs	r1, #1
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2241      	movs	r2, #65	@ 0x41
 8003c2c:	2120      	movs	r1, #32
 8003c2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2240      	movs	r2, #64	@ 0x40
 8003c34:	2100      	movs	r1, #0
 8003c36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	0018      	movs	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b002      	add	sp, #8
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	ffffefff 	.word	0xffffefff

08003c4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2241      	movs	r2, #65	@ 0x41
 8003c5a:	5c9b      	ldrb	r3, [r3, r2]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d139      	bne.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2240      	movs	r2, #64	@ 0x40
 8003c66:	5c9b      	ldrb	r3, [r3, r2]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e033      	b.n	8003cd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2240      	movs	r2, #64	@ 0x40
 8003c74:	2101      	movs	r1, #1
 8003c76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2241      	movs	r2, #65	@ 0x41
 8003c7c:	2124      	movs	r1, #36	@ 0x24
 8003c7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	438a      	bics	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a11      	ldr	r2, [pc, #68]	@ (8003ce0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2241      	movs	r2, #65	@ 0x41
 8003cc6:	2120      	movs	r1, #32
 8003cc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2240      	movs	r2, #64	@ 0x40
 8003cce:	2100      	movs	r1, #0
 8003cd0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e000      	b.n	8003cd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cd6:	2302      	movs	r3, #2
  }
}
 8003cd8:	0018      	movs	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b004      	add	sp, #16
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	fffff0ff 	.word	0xfffff0ff

08003ce4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	000a      	movs	r2, r1
 8003cee:	1cfb      	adds	r3, r7, #3
 8003cf0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003cf6:	4b25      	ldr	r3, [pc, #148]	@ (8003d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	2380      	movs	r3, #128	@ 0x80
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003d02:	4b23      	ldr	r3, [pc, #140]	@ (8003d90 <HAL_PWR_EnterSTOPMode+0xac>)
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	2201      	movs	r2, #1
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_PWR_EnterSTOPMode+0x40>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003d18:	4b1c      	ldr	r3, [pc, #112]	@ (8003d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003d1e:	491d      	ldr	r1, [pc, #116]	@ (8003d94 <HAL_PWR_EnterSTOPMode+0xb0>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003d24:	4b19      	ldr	r3, [pc, #100]	@ (8003d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4393      	bics	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003d3a:	4b14      	ldr	r3, [pc, #80]	@ (8003d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003d40:	4b15      	ldr	r3, [pc, #84]	@ (8003d98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003d46:	2104      	movs	r1, #4
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003d4c:	1cfb      	adds	r3, r7, #3
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003d54:	bf30      	wfi
 8003d56:	e002      	b.n	8003d5e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003d58:	bf40      	sev
    __WFE();
 8003d5a:	bf20      	wfe
    __WFE();
 8003d5c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003d64:	2104      	movs	r1, #4
 8003d66:	438a      	bics	r2, r1
 8003d68:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d009      	beq.n	8003d84 <HAL_PWR_EnterSTOPMode+0xa0>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d006      	beq.n	8003d84 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003d76:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4b04      	ldr	r3, [pc, #16]	@ (8003d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003d7c:	2180      	movs	r1, #128	@ 0x80
 8003d7e:	0089      	lsls	r1, r1, #2
 8003d80:	430a      	orrs	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]
  }
}
 8003d84:	46c0      	nop			@ (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b006      	add	sp, #24
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	40010000 	.word	0x40010000
 8003d94:	fffffdff 	.word	0xfffffdff
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b5b0      	push	{r4, r5, r7, lr}
 8003d9e:	b08a      	sub	sp, #40	@ 0x28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d102      	bne.n	8003db0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f000 fb6c 	bl	8004488 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db0:	4bc8      	ldr	r3, [pc, #800]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	220c      	movs	r2, #12
 8003db6:	4013      	ands	r3, r2
 8003db8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dba:	4bc6      	ldr	r3, [pc, #792]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	2380      	movs	r3, #128	@ 0x80
 8003dc0:	025b      	lsls	r3, r3, #9
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x36>
 8003dd0:	e07d      	b.n	8003ece <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d007      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d112      	bne.n	8003e04 <HAL_RCC_OscConfig+0x68>
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	025b      	lsls	r3, r3, #9
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d10d      	bne.n	8003e04 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	4bba      	ldr	r3, [pc, #744]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	@ 0x80
 8003dee:	029b      	lsls	r3, r3, #10
 8003df0:	4013      	ands	r3, r2
 8003df2:	d100      	bne.n	8003df6 <HAL_RCC_OscConfig+0x5a>
 8003df4:	e06a      	b.n	8003ecc <HAL_RCC_OscConfig+0x130>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d166      	bne.n	8003ecc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f000 fb42 	bl	8004488 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	025b      	lsls	r3, r3, #9
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_OscConfig+0x84>
 8003e10:	4bb0      	ldr	r3, [pc, #704]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4baf      	ldr	r3, [pc, #700]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e16:	2180      	movs	r1, #128	@ 0x80
 8003e18:	0249      	lsls	r1, r1, #9
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e027      	b.n	8003e70 <HAL_RCC_OscConfig+0xd4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	23a0      	movs	r3, #160	@ 0xa0
 8003e26:	02db      	lsls	r3, r3, #11
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d10e      	bne.n	8003e4a <HAL_RCC_OscConfig+0xae>
 8003e2c:	4ba9      	ldr	r3, [pc, #676]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4ba8      	ldr	r3, [pc, #672]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e32:	2180      	movs	r1, #128	@ 0x80
 8003e34:	02c9      	lsls	r1, r1, #11
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	4ba6      	ldr	r3, [pc, #664]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4ba5      	ldr	r3, [pc, #660]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e40:	2180      	movs	r1, #128	@ 0x80
 8003e42:	0249      	lsls	r1, r1, #9
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e012      	b.n	8003e70 <HAL_RCC_OscConfig+0xd4>
 8003e4a:	4ba2      	ldr	r3, [pc, #648]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4ba1      	ldr	r3, [pc, #644]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e50:	49a1      	ldr	r1, [pc, #644]	@ (80040d8 <HAL_RCC_OscConfig+0x33c>)
 8003e52:	400a      	ands	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	4b9f      	ldr	r3, [pc, #636]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	2380      	movs	r3, #128	@ 0x80
 8003e5c:	025b      	lsls	r3, r3, #9
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4b9b      	ldr	r3, [pc, #620]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b9a      	ldr	r3, [pc, #616]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e6a:	499c      	ldr	r1, [pc, #624]	@ (80040dc <HAL_RCC_OscConfig+0x340>)
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d014      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fe fe78 	bl	8002b6c <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e82:	f7fe fe73 	bl	8002b6c <HAL_GetTick>
 8003e86:	0002      	movs	r2, r0
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b64      	cmp	r3, #100	@ 0x64
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e2f9      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e94:	4b8f      	ldr	r3, [pc, #572]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2380      	movs	r3, #128	@ 0x80
 8003e9a:	029b      	lsls	r3, r3, #10
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0xe6>
 8003ea0:	e015      	b.n	8003ece <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea2:	f7fe fe63 	bl	8002b6c <HAL_GetTick>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fe fe5e 	bl	8002b6c <HAL_GetTick>
 8003eb0:	0002      	movs	r2, r0
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	@ 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e2e4      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ebe:	4b85      	ldr	r3, [pc, #532]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	@ 0x80
 8003ec4:	029b      	lsls	r3, r3, #10
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x110>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d100      	bne.n	8003eda <HAL_RCC_OscConfig+0x13e>
 8003ed8:	e099      	b.n	800400e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003ee8:	4b7a      	ldr	r3, [pc, #488]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b79      	ldr	r3, [pc, #484]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003eee:	2120      	movs	r1, #32
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	4393      	bics	r3, r2
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d005      	beq.n	8003f0e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	d13e      	bne.n	8003f86 <HAL_RCC_OscConfig+0x1ea>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d13b      	bne.n	8003f86 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003f0e:	4b71      	ldr	r3, [pc, #452]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2204      	movs	r2, #4
 8003f14:	4013      	ands	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_RCC_OscConfig+0x186>
 8003f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e2b2      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b6c      	ldr	r3, [pc, #432]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4a6e      	ldr	r2, [pc, #440]	@ (80040e0 <HAL_RCC_OscConfig+0x344>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	021a      	lsls	r2, r3, #8
 8003f32:	4b68      	ldr	r3, [pc, #416]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f38:	4b66      	ldr	r3, [pc, #408]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2209      	movs	r2, #9
 8003f3e:	4393      	bics	r3, r2
 8003f40:	0019      	movs	r1, r3
 8003f42:	4b64      	ldr	r3, [pc, #400]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f46:	430a      	orrs	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f4a:	f000 fbeb 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 8003f4e:	0001      	movs	r1, r0
 8003f50:	4b60      	ldr	r3, [pc, #384]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	220f      	movs	r2, #15
 8003f58:	4013      	ands	r3, r2
 8003f5a:	4a62      	ldr	r2, [pc, #392]	@ (80040e4 <HAL_RCC_OscConfig+0x348>)
 8003f5c:	5cd3      	ldrb	r3, [r2, r3]
 8003f5e:	000a      	movs	r2, r1
 8003f60:	40da      	lsrs	r2, r3
 8003f62:	4b61      	ldr	r3, [pc, #388]	@ (80040e8 <HAL_RCC_OscConfig+0x34c>)
 8003f64:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003f66:	4b61      	ldr	r3, [pc, #388]	@ (80040ec <HAL_RCC_OscConfig+0x350>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2513      	movs	r5, #19
 8003f6c:	197c      	adds	r4, r7, r5
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7fe fdb6 	bl	8002ae0 <HAL_InitTick>
 8003f74:	0003      	movs	r3, r0
 8003f76:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f78:	197b      	adds	r3, r7, r5
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d046      	beq.n	800400e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003f80:	197b      	adds	r3, r7, r5
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	e280      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d027      	beq.n	8003fdc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f8c:	4b51      	ldr	r3, [pc, #324]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2209      	movs	r2, #9
 8003f92:	4393      	bics	r3, r2
 8003f94:	0019      	movs	r1, r3
 8003f96:	4b4f      	ldr	r3, [pc, #316]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fe fde5 	bl	8002b6c <HAL_GetTick>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa8:	f7fe fde0 	bl	8002b6c <HAL_GetTick>
 8003fac:	0002      	movs	r2, r0
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e266      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fba:	4b46      	ldr	r3, [pc, #280]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d0f1      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc4:	4b43      	ldr	r3, [pc, #268]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4a45      	ldr	r2, [pc, #276]	@ (80040e0 <HAL_RCC_OscConfig+0x344>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	0019      	movs	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	021a      	lsls	r2, r3, #8
 8003fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	e018      	b.n	800400e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	438a      	bics	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fdc0 	bl	8002b6c <HAL_GetTick>
 8003fec:	0003      	movs	r3, r0
 8003fee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff2:	f7fe fdbb 	bl	8002b6c <HAL_GetTick>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e241      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004004:	4b33      	ldr	r3, [pc, #204]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2204      	movs	r2, #4
 800400a:	4013      	ands	r3, r2
 800400c:	d1f1      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2210      	movs	r2, #16
 8004014:	4013      	ands	r3, r2
 8004016:	d100      	bne.n	800401a <HAL_RCC_OscConfig+0x27e>
 8004018:	e0a1      	b.n	800415e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d140      	bne.n	80040a2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004020:	4b2c      	ldr	r3, [pc, #176]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	2380      	movs	r3, #128	@ 0x80
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4013      	ands	r3, r2
 800402a:	d005      	beq.n	8004038 <HAL_RCC_OscConfig+0x29c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e227      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004038:	4b26      	ldr	r3, [pc, #152]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a2c      	ldr	r2, [pc, #176]	@ (80040f0 <HAL_RCC_OscConfig+0x354>)
 800403e:	4013      	ands	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1a      	ldr	r2, [r3, #32]
 8004046:	4b23      	ldr	r3, [pc, #140]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800404c:	4b21      	ldr	r3, [pc, #132]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	0a19      	lsrs	r1, r3, #8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	061a      	lsls	r2, r3, #24
 800405a:	4b1e      	ldr	r3, [pc, #120]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	0b5b      	lsrs	r3, r3, #13
 8004066:	3301      	adds	r3, #1
 8004068:	2280      	movs	r2, #128	@ 0x80
 800406a:	0212      	lsls	r2, r2, #8
 800406c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800406e:	4b19      	ldr	r3, [pc, #100]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	210f      	movs	r1, #15
 8004076:	400b      	ands	r3, r1
 8004078:	491a      	ldr	r1, [pc, #104]	@ (80040e4 <HAL_RCC_OscConfig+0x348>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800407e:	4b1a      	ldr	r3, [pc, #104]	@ (80040e8 <HAL_RCC_OscConfig+0x34c>)
 8004080:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004082:	4b1a      	ldr	r3, [pc, #104]	@ (80040ec <HAL_RCC_OscConfig+0x350>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2513      	movs	r5, #19
 8004088:	197c      	adds	r4, r7, r5
 800408a:	0018      	movs	r0, r3
 800408c:	f7fe fd28 	bl	8002ae0 <HAL_InitTick>
 8004090:	0003      	movs	r3, r0
 8004092:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004094:	197b      	adds	r3, r7, r5
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d060      	beq.n	800415e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800409c:	197b      	adds	r3, r7, r5
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	e1f2      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d03f      	beq.n	800412a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040aa:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <HAL_RCC_OscConfig+0x338>)
 80040b0:	2180      	movs	r1, #128	@ 0x80
 80040b2:	0049      	lsls	r1, r1, #1
 80040b4:	430a      	orrs	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe fd58 	bl	8002b6c <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040c0:	e018      	b.n	80040f4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040c2:	f7fe fd53 	bl	8002b6c <HAL_GetTick>
 80040c6:	0002      	movs	r2, r0
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d911      	bls.n	80040f4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e1d9      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
 80040d4:	40021000 	.word	0x40021000
 80040d8:	fffeffff 	.word	0xfffeffff
 80040dc:	fffbffff 	.word	0xfffbffff
 80040e0:	ffffe0ff 	.word	0xffffe0ff
 80040e4:	08005688 	.word	0x08005688
 80040e8:	200007e8 	.word	0x200007e8
 80040ec:	20000804 	.word	0x20000804
 80040f0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040f4:	4bc9      	ldr	r3, [pc, #804]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	2380      	movs	r3, #128	@ 0x80
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4013      	ands	r3, r2
 80040fe:	d0e0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004100:	4bc6      	ldr	r3, [pc, #792]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4ac6      	ldr	r2, [pc, #792]	@ (8004420 <HAL_RCC_OscConfig+0x684>)
 8004106:	4013      	ands	r3, r2
 8004108:	0019      	movs	r1, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1a      	ldr	r2, [r3, #32]
 800410e:	4bc3      	ldr	r3, [pc, #780]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004114:	4bc1      	ldr	r3, [pc, #772]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	0a19      	lsrs	r1, r3, #8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	061a      	lsls	r2, r3, #24
 8004122:	4bbe      	ldr	r3, [pc, #760]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	e019      	b.n	800415e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800412a:	4bbc      	ldr	r3, [pc, #752]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4bbb      	ldr	r3, [pc, #748]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004130:	49bc      	ldr	r1, [pc, #752]	@ (8004424 <HAL_RCC_OscConfig+0x688>)
 8004132:	400a      	ands	r2, r1
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7fe fd19 	bl	8002b6c <HAL_GetTick>
 800413a:	0003      	movs	r3, r0
 800413c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004140:	f7fe fd14 	bl	8002b6c <HAL_GetTick>
 8004144:	0002      	movs	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e19a      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004152:	4bb2      	ldr	r3, [pc, #712]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4013      	ands	r3, r2
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2208      	movs	r2, #8
 8004164:	4013      	ands	r3, r2
 8004166:	d036      	beq.n	80041d6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d019      	beq.n	80041a4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004170:	4baa      	ldr	r3, [pc, #680]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004172:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004174:	4ba9      	ldr	r3, [pc, #676]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004176:	2101      	movs	r1, #1
 8004178:	430a      	orrs	r2, r1
 800417a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417c:	f7fe fcf6 	bl	8002b6c <HAL_GetTick>
 8004180:	0003      	movs	r3, r0
 8004182:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004186:	f7fe fcf1 	bl	8002b6c <HAL_GetTick>
 800418a:	0002      	movs	r2, r0
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e177      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004198:	4ba0      	ldr	r3, [pc, #640]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 800419a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419c:	2202      	movs	r2, #2
 800419e:	4013      	ands	r3, r2
 80041a0:	d0f1      	beq.n	8004186 <HAL_RCC_OscConfig+0x3ea>
 80041a2:	e018      	b.n	80041d6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a4:	4b9d      	ldr	r3, [pc, #628]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80041a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041a8:	4b9c      	ldr	r3, [pc, #624]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80041aa:	2101      	movs	r1, #1
 80041ac:	438a      	bics	r2, r1
 80041ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b0:	f7fe fcdc 	bl	8002b6c <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ba:	f7fe fcd7 	bl	8002b6c <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e15d      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041cc:	4b93      	ldr	r3, [pc, #588]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80041ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d0:	2202      	movs	r2, #2
 80041d2:	4013      	ands	r3, r2
 80041d4:	d1f1      	bne.n	80041ba <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2204      	movs	r2, #4
 80041dc:	4013      	ands	r3, r2
 80041de:	d100      	bne.n	80041e2 <HAL_RCC_OscConfig+0x446>
 80041e0:	e0ae      	b.n	8004340 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e2:	2023      	movs	r0, #35	@ 0x23
 80041e4:	183b      	adds	r3, r7, r0
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ea:	4b8c      	ldr	r3, [pc, #560]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80041ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ee:	2380      	movs	r3, #128	@ 0x80
 80041f0:	055b      	lsls	r3, r3, #21
 80041f2:	4013      	ands	r3, r2
 80041f4:	d109      	bne.n	800420a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	4b89      	ldr	r3, [pc, #548]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80041f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041fa:	4b88      	ldr	r3, [pc, #544]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80041fc:	2180      	movs	r1, #128	@ 0x80
 80041fe:	0549      	lsls	r1, r1, #21
 8004200:	430a      	orrs	r2, r1
 8004202:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004204:	183b      	adds	r3, r7, r0
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	4b87      	ldr	r3, [pc, #540]	@ (8004428 <HAL_RCC_OscConfig+0x68c>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	2380      	movs	r3, #128	@ 0x80
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4013      	ands	r3, r2
 8004214:	d11a      	bne.n	800424c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004216:	4b84      	ldr	r3, [pc, #528]	@ (8004428 <HAL_RCC_OscConfig+0x68c>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b83      	ldr	r3, [pc, #524]	@ (8004428 <HAL_RCC_OscConfig+0x68c>)
 800421c:	2180      	movs	r1, #128	@ 0x80
 800421e:	0049      	lsls	r1, r1, #1
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004224:	f7fe fca2 	bl	8002b6c <HAL_GetTick>
 8004228:	0003      	movs	r3, r0
 800422a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422e:	f7fe fc9d 	bl	8002b6c <HAL_GetTick>
 8004232:	0002      	movs	r2, r0
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b64      	cmp	r3, #100	@ 0x64
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e123      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004240:	4b79      	ldr	r3, [pc, #484]	@ (8004428 <HAL_RCC_OscConfig+0x68c>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	2380      	movs	r3, #128	@ 0x80
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4013      	ands	r3, r2
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	2380      	movs	r3, #128	@ 0x80
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	429a      	cmp	r2, r3
 8004256:	d107      	bne.n	8004268 <HAL_RCC_OscConfig+0x4cc>
 8004258:	4b70      	ldr	r3, [pc, #448]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 800425a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800425c:	4b6f      	ldr	r3, [pc, #444]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	0049      	lsls	r1, r1, #1
 8004262:	430a      	orrs	r2, r1
 8004264:	651a      	str	r2, [r3, #80]	@ 0x50
 8004266:	e031      	b.n	80042cc <HAL_RCC_OscConfig+0x530>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10c      	bne.n	800428a <HAL_RCC_OscConfig+0x4ee>
 8004270:	4b6a      	ldr	r3, [pc, #424]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004272:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004274:	4b69      	ldr	r3, [pc, #420]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004276:	496b      	ldr	r1, [pc, #428]	@ (8004424 <HAL_RCC_OscConfig+0x688>)
 8004278:	400a      	ands	r2, r1
 800427a:	651a      	str	r2, [r3, #80]	@ 0x50
 800427c:	4b67      	ldr	r3, [pc, #412]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 800427e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004280:	4b66      	ldr	r3, [pc, #408]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004282:	496a      	ldr	r1, [pc, #424]	@ (800442c <HAL_RCC_OscConfig+0x690>)
 8004284:	400a      	ands	r2, r1
 8004286:	651a      	str	r2, [r3, #80]	@ 0x50
 8004288:	e020      	b.n	80042cc <HAL_RCC_OscConfig+0x530>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	23a0      	movs	r3, #160	@ 0xa0
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	429a      	cmp	r2, r3
 8004294:	d10e      	bne.n	80042b4 <HAL_RCC_OscConfig+0x518>
 8004296:	4b61      	ldr	r3, [pc, #388]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004298:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800429a:	4b60      	ldr	r3, [pc, #384]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 800429c:	2180      	movs	r1, #128	@ 0x80
 800429e:	00c9      	lsls	r1, r1, #3
 80042a0:	430a      	orrs	r2, r1
 80042a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80042a4:	4b5d      	ldr	r3, [pc, #372]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80042a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042a8:	4b5c      	ldr	r3, [pc, #368]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80042aa:	2180      	movs	r1, #128	@ 0x80
 80042ac:	0049      	lsls	r1, r1, #1
 80042ae:	430a      	orrs	r2, r1
 80042b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80042b2:	e00b      	b.n	80042cc <HAL_RCC_OscConfig+0x530>
 80042b4:	4b59      	ldr	r3, [pc, #356]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80042b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042b8:	4b58      	ldr	r3, [pc, #352]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80042ba:	495a      	ldr	r1, [pc, #360]	@ (8004424 <HAL_RCC_OscConfig+0x688>)
 80042bc:	400a      	ands	r2, r1
 80042be:	651a      	str	r2, [r3, #80]	@ 0x50
 80042c0:	4b56      	ldr	r3, [pc, #344]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80042c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042c4:	4b55      	ldr	r3, [pc, #340]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80042c6:	4959      	ldr	r1, [pc, #356]	@ (800442c <HAL_RCC_OscConfig+0x690>)
 80042c8:	400a      	ands	r2, r1
 80042ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d015      	beq.n	8004300 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d4:	f7fe fc4a 	bl	8002b6c <HAL_GetTick>
 80042d8:	0003      	movs	r3, r0
 80042da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042dc:	e009      	b.n	80042f2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fe fc45 	bl	8002b6c <HAL_GetTick>
 80042e2:	0002      	movs	r2, r0
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	4a51      	ldr	r2, [pc, #324]	@ (8004430 <HAL_RCC_OscConfig+0x694>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e0ca      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042f2:	4b4a      	ldr	r3, [pc, #296]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80042f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042f6:	2380      	movs	r3, #128	@ 0x80
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4013      	ands	r3, r2
 80042fc:	d0ef      	beq.n	80042de <HAL_RCC_OscConfig+0x542>
 80042fe:	e014      	b.n	800432a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004300:	f7fe fc34 	bl	8002b6c <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004308:	e009      	b.n	800431e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fe fc2f 	bl	8002b6c <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	4a46      	ldr	r2, [pc, #280]	@ (8004430 <HAL_RCC_OscConfig+0x694>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0b4      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800431e:	4b3f      	ldr	r3, [pc, #252]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004320:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004322:	2380      	movs	r3, #128	@ 0x80
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4013      	ands	r3, r2
 8004328:	d1ef      	bne.n	800430a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800432a:	2323      	movs	r3, #35	@ 0x23
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004334:	4b39      	ldr	r3, [pc, #228]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004336:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004338:	4b38      	ldr	r3, [pc, #224]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 800433a:	493e      	ldr	r1, [pc, #248]	@ (8004434 <HAL_RCC_OscConfig+0x698>)
 800433c:	400a      	ands	r2, r1
 800433e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d100      	bne.n	800434a <HAL_RCC_OscConfig+0x5ae>
 8004348:	e09d      	b.n	8004486 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2b0c      	cmp	r3, #12
 800434e:	d100      	bne.n	8004352 <HAL_RCC_OscConfig+0x5b6>
 8004350:	e076      	b.n	8004440 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	2b02      	cmp	r3, #2
 8004358:	d145      	bne.n	80043e6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b30      	ldr	r3, [pc, #192]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b2f      	ldr	r3, [pc, #188]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004360:	4935      	ldr	r1, [pc, #212]	@ (8004438 <HAL_RCC_OscConfig+0x69c>)
 8004362:	400a      	ands	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004366:	f7fe fc01 	bl	8002b6c <HAL_GetTick>
 800436a:	0003      	movs	r3, r0
 800436c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004370:	f7fe fbfc 	bl	8002b6c <HAL_GetTick>
 8004374:	0002      	movs	r2, r0
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e082      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004382:	4b26      	ldr	r3, [pc, #152]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	2380      	movs	r3, #128	@ 0x80
 8004388:	049b      	lsls	r3, r3, #18
 800438a:	4013      	ands	r3, r2
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800438e:	4b23      	ldr	r3, [pc, #140]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4a2a      	ldr	r2, [pc, #168]	@ (800443c <HAL_RCC_OscConfig+0x6a0>)
 8004394:	4013      	ands	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a6:	431a      	orrs	r2, r3
 80043a8:	4b1c      	ldr	r3, [pc, #112]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80043aa:	430a      	orrs	r2, r1
 80043ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ae:	4b1b      	ldr	r3, [pc, #108]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b1a      	ldr	r3, [pc, #104]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80043b4:	2180      	movs	r1, #128	@ 0x80
 80043b6:	0449      	lsls	r1, r1, #17
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fe fbd6 	bl	8002b6c <HAL_GetTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fe fbd1 	bl	8002b6c <HAL_GetTick>
 80043ca:	0002      	movs	r2, r0
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e057      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80043d8:	4b10      	ldr	r3, [pc, #64]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	@ 0x80
 80043de:	049b      	lsls	r3, r3, #18
 80043e0:	4013      	ands	r3, r2
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x62a>
 80043e4:	e04f      	b.n	8004486 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b0d      	ldr	r3, [pc, #52]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b0c      	ldr	r3, [pc, #48]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 80043ec:	4912      	ldr	r1, [pc, #72]	@ (8004438 <HAL_RCC_OscConfig+0x69c>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fe fbbb 	bl	8002b6c <HAL_GetTick>
 80043f6:	0003      	movs	r3, r0
 80043f8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fe fbb6 	bl	8002b6c <HAL_GetTick>
 8004400:	0002      	movs	r2, r0
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e03c      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800440e:	4b03      	ldr	r3, [pc, #12]	@ (800441c <HAL_RCC_OscConfig+0x680>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	2380      	movs	r3, #128	@ 0x80
 8004414:	049b      	lsls	r3, r3, #18
 8004416:	4013      	ands	r3, r2
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x660>
 800441a:	e034      	b.n	8004486 <HAL_RCC_OscConfig+0x6ea>
 800441c:	40021000 	.word	0x40021000
 8004420:	ffff1fff 	.word	0xffff1fff
 8004424:	fffffeff 	.word	0xfffffeff
 8004428:	40007000 	.word	0x40007000
 800442c:	fffffbff 	.word	0xfffffbff
 8004430:	00001388 	.word	0x00001388
 8004434:	efffffff 	.word	0xefffffff
 8004438:	feffffff 	.word	0xfeffffff
 800443c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e01d      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800444c:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <HAL_RCC_OscConfig+0x6f4>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	2380      	movs	r3, #128	@ 0x80
 8004456:	025b      	lsls	r3, r3, #9
 8004458:	401a      	ands	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445e:	429a      	cmp	r2, r3
 8004460:	d10f      	bne.n	8004482 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	23f0      	movs	r3, #240	@ 0xf0
 8004466:	039b      	lsls	r3, r3, #14
 8004468:	401a      	ands	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d107      	bne.n	8004482 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	23c0      	movs	r3, #192	@ 0xc0
 8004476:	041b      	lsls	r3, r3, #16
 8004478:	401a      	ands	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d001      	beq.n	8004486 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	b00a      	add	sp, #40	@ 0x28
 800448e:	bdb0      	pop	{r4, r5, r7, pc}
 8004490:	40021000 	.word	0x40021000

08004494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004494:	b5b0      	push	{r4, r5, r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e128      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044a8:	4b96      	ldr	r3, [pc, #600]	@ (8004704 <HAL_RCC_ClockConfig+0x270>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2201      	movs	r2, #1
 80044ae:	4013      	ands	r3, r2
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d91e      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b93      	ldr	r3, [pc, #588]	@ (8004704 <HAL_RCC_ClockConfig+0x270>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2201      	movs	r2, #1
 80044bc:	4393      	bics	r3, r2
 80044be:	0019      	movs	r1, r3
 80044c0:	4b90      	ldr	r3, [pc, #576]	@ (8004704 <HAL_RCC_ClockConfig+0x270>)
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044c8:	f7fe fb50 	bl	8002b6c <HAL_GetTick>
 80044cc:	0003      	movs	r3, r0
 80044ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d0:	e009      	b.n	80044e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d2:	f7fe fb4b 	bl	8002b6c <HAL_GetTick>
 80044d6:	0002      	movs	r2, r0
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	4a8a      	ldr	r2, [pc, #552]	@ (8004708 <HAL_RCC_ClockConfig+0x274>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e109      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b87      	ldr	r3, [pc, #540]	@ (8004704 <HAL_RCC_ClockConfig+0x270>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2201      	movs	r2, #1
 80044ec:	4013      	ands	r3, r2
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d1ee      	bne.n	80044d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2202      	movs	r2, #2
 80044fa:	4013      	ands	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044fe:	4b83      	ldr	r3, [pc, #524]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	22f0      	movs	r2, #240	@ 0xf0
 8004504:	4393      	bics	r3, r2
 8004506:	0019      	movs	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	4b7f      	ldr	r3, [pc, #508]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 800450e:	430a      	orrs	r2, r1
 8004510:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2201      	movs	r2, #1
 8004518:	4013      	ands	r3, r2
 800451a:	d100      	bne.n	800451e <HAL_RCC_ClockConfig+0x8a>
 800451c:	e089      	b.n	8004632 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d107      	bne.n	8004536 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004526:	4b79      	ldr	r3, [pc, #484]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	029b      	lsls	r3, r3, #10
 800452e:	4013      	ands	r3, r2
 8004530:	d120      	bne.n	8004574 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e0e1      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800453e:	4b73      	ldr	r3, [pc, #460]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	2380      	movs	r3, #128	@ 0x80
 8004544:	049b      	lsls	r3, r3, #18
 8004546:	4013      	ands	r3, r2
 8004548:	d114      	bne.n	8004574 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e0d5      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d106      	bne.n	8004564 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004556:	4b6d      	ldr	r3, [pc, #436]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2204      	movs	r2, #4
 800455c:	4013      	ands	r3, r2
 800455e:	d109      	bne.n	8004574 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0ca      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004564:	4b69      	ldr	r3, [pc, #420]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4013      	ands	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0c2      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004574:	4b65      	ldr	r3, [pc, #404]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2203      	movs	r2, #3
 800457a:	4393      	bics	r3, r2
 800457c:	0019      	movs	r1, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	4b62      	ldr	r3, [pc, #392]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 8004584:	430a      	orrs	r2, r1
 8004586:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004588:	f7fe faf0 	bl	8002b6c <HAL_GetTick>
 800458c:	0003      	movs	r3, r0
 800458e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d111      	bne.n	80045bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004598:	e009      	b.n	80045ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459a:	f7fe fae7 	bl	8002b6c <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	4a58      	ldr	r2, [pc, #352]	@ (8004708 <HAL_RCC_ClockConfig+0x274>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0a5      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045ae:	4b57      	ldr	r3, [pc, #348]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	220c      	movs	r2, #12
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d1ef      	bne.n	800459a <HAL_RCC_ClockConfig+0x106>
 80045ba:	e03a      	b.n	8004632 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d111      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c4:	e009      	b.n	80045da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c6:	f7fe fad1 	bl	8002b6c <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	4a4d      	ldr	r2, [pc, #308]	@ (8004708 <HAL_RCC_ClockConfig+0x274>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e08f      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045da:	4b4c      	ldr	r3, [pc, #304]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	220c      	movs	r2, #12
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d1ef      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x132>
 80045e6:	e024      	b.n	8004632 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d11b      	bne.n	8004628 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045f0:	e009      	b.n	8004606 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f2:	f7fe fabb 	bl	8002b6c <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	4a42      	ldr	r2, [pc, #264]	@ (8004708 <HAL_RCC_ClockConfig+0x274>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e079      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004606:	4b41      	ldr	r3, [pc, #260]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	220c      	movs	r2, #12
 800460c:	4013      	ands	r3, r2
 800460e:	2b04      	cmp	r3, #4
 8004610:	d1ef      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x15e>
 8004612:	e00e      	b.n	8004632 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004614:	f7fe faaa 	bl	8002b6c <HAL_GetTick>
 8004618:	0002      	movs	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	4a3a      	ldr	r2, [pc, #232]	@ (8004708 <HAL_RCC_ClockConfig+0x274>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e068      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004628:	4b38      	ldr	r3, [pc, #224]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	220c      	movs	r2, #12
 800462e:	4013      	ands	r3, r2
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004632:	4b34      	ldr	r3, [pc, #208]	@ (8004704 <HAL_RCC_ClockConfig+0x270>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2201      	movs	r2, #1
 8004638:	4013      	ands	r3, r2
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d21e      	bcs.n	800467e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004640:	4b30      	ldr	r3, [pc, #192]	@ (8004704 <HAL_RCC_ClockConfig+0x270>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2201      	movs	r2, #1
 8004646:	4393      	bics	r3, r2
 8004648:	0019      	movs	r1, r3
 800464a:	4b2e      	ldr	r3, [pc, #184]	@ (8004704 <HAL_RCC_ClockConfig+0x270>)
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004652:	f7fe fa8b 	bl	8002b6c <HAL_GetTick>
 8004656:	0003      	movs	r3, r0
 8004658:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	e009      	b.n	8004670 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465c:	f7fe fa86 	bl	8002b6c <HAL_GetTick>
 8004660:	0002      	movs	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	4a28      	ldr	r2, [pc, #160]	@ (8004708 <HAL_RCC_ClockConfig+0x274>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e044      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004670:	4b24      	ldr	r3, [pc, #144]	@ (8004704 <HAL_RCC_ClockConfig+0x270>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2201      	movs	r2, #1
 8004676:	4013      	ands	r3, r2
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d1ee      	bne.n	800465c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2204      	movs	r2, #4
 8004684:	4013      	ands	r3, r2
 8004686:	d009      	beq.n	800469c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004688:	4b20      	ldr	r3, [pc, #128]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a20      	ldr	r2, [pc, #128]	@ (8004710 <HAL_RCC_ClockConfig+0x27c>)
 800468e:	4013      	ands	r3, r2
 8004690:	0019      	movs	r1, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	4b1d      	ldr	r3, [pc, #116]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 8004698:	430a      	orrs	r2, r1
 800469a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2208      	movs	r2, #8
 80046a2:	4013      	ands	r3, r2
 80046a4:	d00a      	beq.n	80046bc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046a6:	4b19      	ldr	r3, [pc, #100]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004714 <HAL_RCC_ClockConfig+0x280>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	0019      	movs	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	00da      	lsls	r2, r3, #3
 80046b6:	4b15      	ldr	r3, [pc, #84]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 80046b8:	430a      	orrs	r2, r1
 80046ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046bc:	f000 f832 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 80046c0:	0001      	movs	r1, r0
 80046c2:	4b12      	ldr	r3, [pc, #72]	@ (800470c <HAL_RCC_ClockConfig+0x278>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	091b      	lsrs	r3, r3, #4
 80046c8:	220f      	movs	r2, #15
 80046ca:	4013      	ands	r3, r2
 80046cc:	4a12      	ldr	r2, [pc, #72]	@ (8004718 <HAL_RCC_ClockConfig+0x284>)
 80046ce:	5cd3      	ldrb	r3, [r2, r3]
 80046d0:	000a      	movs	r2, r1
 80046d2:	40da      	lsrs	r2, r3
 80046d4:	4b11      	ldr	r3, [pc, #68]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 80046d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046d8:	4b11      	ldr	r3, [pc, #68]	@ (8004720 <HAL_RCC_ClockConfig+0x28c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	250b      	movs	r5, #11
 80046de:	197c      	adds	r4, r7, r5
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7fe f9fd 	bl	8002ae0 <HAL_InitTick>
 80046e6:	0003      	movs	r3, r0
 80046e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80046ea:	197b      	adds	r3, r7, r5
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80046f2:	197b      	adds	r3, r7, r5
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	e000      	b.n	80046fa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b004      	add	sp, #16
 8004700:	bdb0      	pop	{r4, r5, r7, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	40022000 	.word	0x40022000
 8004708:	00001388 	.word	0x00001388
 800470c:	40021000 	.word	0x40021000
 8004710:	fffff8ff 	.word	0xfffff8ff
 8004714:	ffffc7ff 	.word	0xffffc7ff
 8004718:	08005688 	.word	0x08005688
 800471c:	200007e8 	.word	0x200007e8
 8004720:	20000804 	.word	0x20000804

08004724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004724:	b5b0      	push	{r4, r5, r7, lr}
 8004726:	b08e      	sub	sp, #56	@ 0x38
 8004728:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800472a:	4b4c      	ldr	r3, [pc, #304]	@ (800485c <HAL_RCC_GetSysClockFreq+0x138>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004732:	230c      	movs	r3, #12
 8004734:	4013      	ands	r3, r2
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d014      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x40>
 800473a:	d900      	bls.n	800473e <HAL_RCC_GetSysClockFreq+0x1a>
 800473c:	e07b      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x112>
 800473e:	2b04      	cmp	r3, #4
 8004740:	d002      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x24>
 8004742:	2b08      	cmp	r3, #8
 8004744:	d00b      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x3a>
 8004746:	e076      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004748:	4b44      	ldr	r3, [pc, #272]	@ (800485c <HAL_RCC_GetSysClockFreq+0x138>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2210      	movs	r2, #16
 800474e:	4013      	ands	r3, r2
 8004750:	d002      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004752:	4b43      	ldr	r3, [pc, #268]	@ (8004860 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004754:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004756:	e07c      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004758:	4b42      	ldr	r3, [pc, #264]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x140>)
 800475a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800475c:	e079      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800475e:	4b42      	ldr	r3, [pc, #264]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x144>)
 8004760:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004762:	e076      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004766:	0c9a      	lsrs	r2, r3, #18
 8004768:	230f      	movs	r3, #15
 800476a:	401a      	ands	r2, r3
 800476c:	4b3f      	ldr	r3, [pc, #252]	@ (800486c <HAL_RCC_GetSysClockFreq+0x148>)
 800476e:	5c9b      	ldrb	r3, [r3, r2]
 8004770:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004774:	0d9a      	lsrs	r2, r3, #22
 8004776:	2303      	movs	r3, #3
 8004778:	4013      	ands	r3, r2
 800477a:	3301      	adds	r3, #1
 800477c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800477e:	4b37      	ldr	r3, [pc, #220]	@ (800485c <HAL_RCC_GetSysClockFreq+0x138>)
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	2380      	movs	r3, #128	@ 0x80
 8004784:	025b      	lsls	r3, r3, #9
 8004786:	4013      	ands	r3, r2
 8004788:	d01a      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800478a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	4a35      	ldr	r2, [pc, #212]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x144>)
 8004794:	2300      	movs	r3, #0
 8004796:	69b8      	ldr	r0, [r7, #24]
 8004798:	69f9      	ldr	r1, [r7, #28]
 800479a:	f7fb fd61 	bl	8000260 <__aeabi_lmul>
 800479e:	0002      	movs	r2, r0
 80047a0:	000b      	movs	r3, r1
 80047a2:	0010      	movs	r0, r2
 80047a4:	0019      	movs	r1, r3
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f7fb fd35 	bl	8000220 <__aeabi_uldivmod>
 80047b6:	0002      	movs	r2, r0
 80047b8:	000b      	movs	r3, r1
 80047ba:	0013      	movs	r3, r2
 80047bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047be:	e037      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80047c0:	4b26      	ldr	r3, [pc, #152]	@ (800485c <HAL_RCC_GetSysClockFreq+0x138>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2210      	movs	r2, #16
 80047c6:	4013      	ands	r3, r2
 80047c8:	d01a      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80047ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	4a23      	ldr	r2, [pc, #140]	@ (8004860 <HAL_RCC_GetSysClockFreq+0x13c>)
 80047d4:	2300      	movs	r3, #0
 80047d6:	68b8      	ldr	r0, [r7, #8]
 80047d8:	68f9      	ldr	r1, [r7, #12]
 80047da:	f7fb fd41 	bl	8000260 <__aeabi_lmul>
 80047de:	0002      	movs	r2, r0
 80047e0:	000b      	movs	r3, r1
 80047e2:	0010      	movs	r0, r2
 80047e4:	0019      	movs	r1, r3
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	2300      	movs	r3, #0
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f7fb fd15 	bl	8000220 <__aeabi_uldivmod>
 80047f6:	0002      	movs	r2, r0
 80047f8:	000b      	movs	r3, r1
 80047fa:	0013      	movs	r3, r2
 80047fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047fe:	e017      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	0018      	movs	r0, r3
 8004804:	2300      	movs	r3, #0
 8004806:	0019      	movs	r1, r3
 8004808:	4a16      	ldr	r2, [pc, #88]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x140>)
 800480a:	2300      	movs	r3, #0
 800480c:	f7fb fd28 	bl	8000260 <__aeabi_lmul>
 8004810:	0002      	movs	r2, r0
 8004812:	000b      	movs	r3, r1
 8004814:	0010      	movs	r0, r2
 8004816:	0019      	movs	r1, r3
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	001c      	movs	r4, r3
 800481c:	2300      	movs	r3, #0
 800481e:	001d      	movs	r5, r3
 8004820:	0022      	movs	r2, r4
 8004822:	002b      	movs	r3, r5
 8004824:	f7fb fcfc 	bl	8000220 <__aeabi_uldivmod>
 8004828:	0002      	movs	r2, r0
 800482a:	000b      	movs	r3, r1
 800482c:	0013      	movs	r3, r2
 800482e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8004830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004832:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004834:	e00d      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004836:	4b09      	ldr	r3, [pc, #36]	@ (800485c <HAL_RCC_GetSysClockFreq+0x138>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	0b5b      	lsrs	r3, r3, #13
 800483c:	2207      	movs	r2, #7
 800483e:	4013      	ands	r3, r2
 8004840:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	3301      	adds	r3, #1
 8004846:	2280      	movs	r2, #128	@ 0x80
 8004848:	0212      	lsls	r2, r2, #8
 800484a:	409a      	lsls	r2, r3
 800484c:	0013      	movs	r3, r2
 800484e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004850:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b00e      	add	sp, #56	@ 0x38
 800485a:	bdb0      	pop	{r4, r5, r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	003d0900 	.word	0x003d0900
 8004864:	00f42400 	.word	0x00f42400
 8004868:	007a1200 	.word	0x007a1200
 800486c:	08005698 	.word	0x08005698

08004870 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004878:	2017      	movs	r0, #23
 800487a:	183b      	adds	r3, r7, r0
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2220      	movs	r2, #32
 8004886:	4013      	ands	r3, r2
 8004888:	d100      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800488a:	e0c7      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488c:	4b84      	ldr	r3, [pc, #528]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800488e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	055b      	lsls	r3, r3, #21
 8004894:	4013      	ands	r3, r2
 8004896:	d109      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004898:	4b81      	ldr	r3, [pc, #516]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800489a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800489c:	4b80      	ldr	r3, [pc, #512]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800489e:	2180      	movs	r1, #128	@ 0x80
 80048a0:	0549      	lsls	r1, r1, #21
 80048a2:	430a      	orrs	r2, r1
 80048a4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80048a6:	183b      	adds	r3, r7, r0
 80048a8:	2201      	movs	r2, #1
 80048aa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	4b7d      	ldr	r3, [pc, #500]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	2380      	movs	r3, #128	@ 0x80
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4013      	ands	r3, r2
 80048b6:	d11a      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b8:	4b7a      	ldr	r3, [pc, #488]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4b79      	ldr	r3, [pc, #484]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80048be:	2180      	movs	r1, #128	@ 0x80
 80048c0:	0049      	lsls	r1, r1, #1
 80048c2:	430a      	orrs	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c6:	f7fe f951 	bl	8002b6c <HAL_GetTick>
 80048ca:	0003      	movs	r3, r0
 80048cc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ce:	e008      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d0:	f7fe f94c 	bl	8002b6c <HAL_GetTick>
 80048d4:	0002      	movs	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b64      	cmp	r3, #100	@ 0x64
 80048dc:	d901      	bls.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e0d9      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e2:	4b70      	ldr	r3, [pc, #448]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	2380      	movs	r3, #128	@ 0x80
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	4013      	ands	r3, r2
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80048ee:	4b6c      	ldr	r3, [pc, #432]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	23c0      	movs	r3, #192	@ 0xc0
 80048f4:	039b      	lsls	r3, r3, #14
 80048f6:	4013      	ands	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	23c0      	movs	r3, #192	@ 0xc0
 8004900:	039b      	lsls	r3, r3, #14
 8004902:	4013      	ands	r3, r2
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	429a      	cmp	r2, r3
 8004908:	d013      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	23c0      	movs	r3, #192	@ 0xc0
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	401a      	ands	r2, r3
 8004914:	23c0      	movs	r3, #192	@ 0xc0
 8004916:	029b      	lsls	r3, r3, #10
 8004918:	429a      	cmp	r2, r3
 800491a:	d10a      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800491c:	4b60      	ldr	r3, [pc, #384]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2380      	movs	r3, #128	@ 0x80
 8004922:	029b      	lsls	r3, r3, #10
 8004924:	401a      	ands	r2, r3
 8004926:	2380      	movs	r3, #128	@ 0x80
 8004928:	029b      	lsls	r3, r3, #10
 800492a:	429a      	cmp	r2, r3
 800492c:	d101      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e0b1      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004932:	4b5b      	ldr	r3, [pc, #364]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004934:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004936:	23c0      	movs	r3, #192	@ 0xc0
 8004938:	029b      	lsls	r3, r3, #10
 800493a:	4013      	ands	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d03b      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	23c0      	movs	r3, #192	@ 0xc0
 800494a:	029b      	lsls	r3, r3, #10
 800494c:	4013      	ands	r3, r2
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	429a      	cmp	r2, r3
 8004952:	d033      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2220      	movs	r2, #32
 800495a:	4013      	ands	r3, r2
 800495c:	d02e      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800495e:	4b50      	ldr	r3, [pc, #320]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004962:	4a51      	ldr	r2, [pc, #324]	@ (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004964:	4013      	ands	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004968:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800496a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800496c:	4b4c      	ldr	r3, [pc, #304]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800496e:	2180      	movs	r1, #128	@ 0x80
 8004970:	0309      	lsls	r1, r1, #12
 8004972:	430a      	orrs	r2, r1
 8004974:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004976:	4b4a      	ldr	r3, [pc, #296]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004978:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800497a:	4b49      	ldr	r3, [pc, #292]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800497c:	494b      	ldr	r1, [pc, #300]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800497e:	400a      	ands	r2, r1
 8004980:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004982:	4b47      	ldr	r3, [pc, #284]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	2380      	movs	r3, #128	@ 0x80
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	4013      	ands	r3, r2
 8004990:	d014      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004992:	f7fe f8eb 	bl	8002b6c <HAL_GetTick>
 8004996:	0003      	movs	r3, r0
 8004998:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800499a:	e009      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800499c:	f7fe f8e6 	bl	8002b6c <HAL_GetTick>
 80049a0:	0002      	movs	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	4a42      	ldr	r2, [pc, #264]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e072      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049b0:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80049b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049b4:	2380      	movs	r3, #128	@ 0x80
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4013      	ands	r3, r2
 80049ba:	d0ef      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2220      	movs	r2, #32
 80049c2:	4013      	ands	r3, r2
 80049c4:	d01f      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	23c0      	movs	r3, #192	@ 0xc0
 80049cc:	029b      	lsls	r3, r3, #10
 80049ce:	401a      	ands	r2, r3
 80049d0:	23c0      	movs	r3, #192	@ 0xc0
 80049d2:	029b      	lsls	r3, r3, #10
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d10c      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80049d8:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a35      	ldr	r2, [pc, #212]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80049de:	4013      	ands	r3, r2
 80049e0:	0019      	movs	r1, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	23c0      	movs	r3, #192	@ 0xc0
 80049e8:	039b      	lsls	r3, r3, #14
 80049ea:	401a      	ands	r2, r3
 80049ec:	4b2c      	ldr	r3, [pc, #176]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80049ee:	430a      	orrs	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80049f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	23c0      	movs	r3, #192	@ 0xc0
 80049fc:	029b      	lsls	r3, r3, #10
 80049fe:	401a      	ands	r2, r3
 8004a00:	4b27      	ldr	r3, [pc, #156]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a02:	430a      	orrs	r2, r1
 8004a04:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a06:	2317      	movs	r3, #23
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d105      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a10:	4b23      	ldr	r3, [pc, #140]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a14:	4b22      	ldr	r3, [pc, #136]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a16:	4928      	ldr	r1, [pc, #160]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a18:	400a      	ands	r2, r1
 8004a1a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2202      	movs	r2, #2
 8004a22:	4013      	ands	r3, r2
 8004a24:	d009      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a26:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2a:	220c      	movs	r2, #12
 8004a2c:	4393      	bics	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a36:	430a      	orrs	r2, r1
 8004a38:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	4013      	ands	r3, r2
 8004a42:	d009      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a44:	4b16      	ldr	r3, [pc, #88]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a48:	4a1c      	ldr	r2, [pc, #112]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	0019      	movs	r1, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a54:	430a      	orrs	r2, r1
 8004a56:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d009      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a62:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a66:	4a16      	ldr	r2, [pc, #88]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a72:	430a      	orrs	r2, r1
 8004a74:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2280      	movs	r2, #128	@ 0x80
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d009      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004a80:	4b07      	ldr	r3, [pc, #28]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a84:	4a0f      	ldr	r2, [pc, #60]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	0019      	movs	r1, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	4b04      	ldr	r3, [pc, #16]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a90:	430a      	orrs	r2, r1
 8004a92:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	0018      	movs	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b006      	add	sp, #24
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	46c0      	nop			@ (mov r8, r8)
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	fffcffff 	.word	0xfffcffff
 8004aac:	fff7ffff 	.word	0xfff7ffff
 8004ab0:	00001388 	.word	0x00001388
 8004ab4:	ffcfffff 	.word	0xffcfffff
 8004ab8:	efffffff 	.word	0xefffffff
 8004abc:	fffff3ff 	.word	0xfffff3ff
 8004ac0:	ffffcfff 	.word	0xffffcfff
 8004ac4:	fff3ffff 	.word	0xfff3ffff

08004ac8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ac8:	b5b0      	push	{r4, r5, r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ad0:	230f      	movs	r3, #15
 8004ad2:	18fb      	adds	r3, r7, r3
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e088      	b.n	8004bf4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2221      	movs	r2, #33	@ 0x21
 8004ae6:	5c9b      	ldrb	r3, [r3, r2]
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	2100      	movs	r1, #0
 8004af4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f7fd ff17 	bl	800292c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2221      	movs	r2, #33	@ 0x21
 8004b02:	2102      	movs	r1, #2
 8004b04:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d05f      	beq.n	8004bd4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	22ca      	movs	r2, #202	@ 0xca
 8004b1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2253      	movs	r2, #83	@ 0x53
 8004b22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004b24:	250f      	movs	r5, #15
 8004b26:	197c      	adds	r4, r7, r5
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f000 f890 	bl	8004c50 <RTC_EnterInitMode>
 8004b30:	0003      	movs	r3, r0
 8004b32:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004b34:	0028      	movs	r0, r5
 8004b36:	183b      	adds	r3, r7, r0
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d12c      	bne.n	8004b98 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	492c      	ldr	r1, [pc, #176]	@ (8004bfc <HAL_RTC_Init+0x134>)
 8004b4a:	400a      	ands	r2, r1
 8004b4c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6899      	ldr	r1, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	68d2      	ldr	r2, [r2, #12]
 8004b74:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6919      	ldr	r1, [r3, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	041a      	lsls	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004b8a:	183c      	adds	r4, r7, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f000 f8a2 	bl	8004cd8 <RTC_ExitInitMode>
 8004b94:	0003      	movs	r3, r0
 8004b96:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004b98:	230f      	movs	r3, #15
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d113      	bne.n	8004bca <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2103      	movs	r1, #3
 8004bae:	438a      	bics	r2, r1
 8004bb0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	22ff      	movs	r2, #255	@ 0xff
 8004bd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8004bd2:	e003      	b.n	8004bdc <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004bd4:	230f      	movs	r3, #15
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004bdc:	230f      	movs	r3, #15
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2221      	movs	r2, #33	@ 0x21
 8004bea:	2101      	movs	r1, #1
 8004bec:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004bee:	230f      	movs	r3, #15
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	781b      	ldrb	r3, [r3, #0]
}
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b004      	add	sp, #16
 8004bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8004bfc:	ff8fffbf 	.word	0xff8fffbf

08004c00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0e      	ldr	r2, [pc, #56]	@ (8004c4c <HAL_RTC_WaitForSynchro+0x4c>)
 8004c12:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c14:	f7fd ffaa 	bl	8002b6c <HAL_GetTick>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c1c:	e00a      	b.n	8004c34 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c1e:	f7fd ffa5 	bl	8002b6c <HAL_GetTick>
 8004c22:	0002      	movs	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad2      	subs	r2, r2, r3
 8004c28:	23fa      	movs	r3, #250	@ 0xfa
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d901      	bls.n	8004c34 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e006      	b.n	8004c42 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d0ee      	beq.n	8004c1e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	0018      	movs	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b004      	add	sp, #16
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	0001ff5f 	.word	0x0001ff5f

08004c50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5c:	230f      	movs	r3, #15
 8004c5e:	18fb      	adds	r3, r7, r3
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	2240      	movs	r2, #64	@ 0x40
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d12c      	bne.n	8004cca <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2180      	movs	r1, #128	@ 0x80
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c80:	f7fd ff74 	bl	8002b6c <HAL_GetTick>
 8004c84:	0003      	movs	r3, r0
 8004c86:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c88:	e014      	b.n	8004cb4 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c8a:	f7fd ff6f 	bl	8002b6c <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	1ad2      	subs	r2, r2, r3
 8004c94:	200f      	movs	r0, #15
 8004c96:	183b      	adds	r3, r7, r0
 8004c98:	1839      	adds	r1, r7, r0
 8004c9a:	7809      	ldrb	r1, [r1, #0]
 8004c9c:	7019      	strb	r1, [r3, #0]
 8004c9e:	23fa      	movs	r3, #250	@ 0xfa
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d906      	bls.n	8004cb4 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2221      	movs	r2, #33	@ 0x21
 8004caa:	2104      	movs	r1, #4
 8004cac:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8004cae:	183b      	adds	r3, r7, r0
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2240      	movs	r2, #64	@ 0x40
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d104      	bne.n	8004cca <RTC_EnterInitMode+0x7a>
 8004cc0:	230f      	movs	r3, #15
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d1df      	bne.n	8004c8a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004cca:	230f      	movs	r3, #15
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	781b      	ldrb	r3, [r3, #0]
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b004      	add	sp, #16
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004cd8:	b590      	push	{r4, r7, lr}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce0:	240f      	movs	r4, #15
 8004ce2:	193b      	adds	r3, r7, r4
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2180      	movs	r1, #128	@ 0x80
 8004cf4:	438a      	bics	r2, r1
 8004cf6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	4013      	ands	r3, r2
 8004d02:	d10c      	bne.n	8004d1e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	0018      	movs	r0, r3
 8004d08:	f7ff ff7a 	bl	8004c00 <HAL_RTC_WaitForSynchro>
 8004d0c:	1e03      	subs	r3, r0, #0
 8004d0e:	d006      	beq.n	8004d1e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2221      	movs	r2, #33	@ 0x21
 8004d14:	2104      	movs	r1, #4
 8004d16:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004d18:	193b      	adds	r3, r7, r4
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004d1e:	230f      	movs	r3, #15
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	781b      	ldrb	r3, [r3, #0]
}
 8004d24:	0018      	movs	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b005      	add	sp, #20
 8004d2a:	bd90      	pop	{r4, r7, pc}

08004d2c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004d38:	4b64      	ldr	r3, [pc, #400]	@ (8004ecc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	22fa      	movs	r2, #250	@ 0xfa
 8004d3e:	01d1      	lsls	r1, r2, #7
 8004d40:	0018      	movs	r0, r3
 8004d42:	f7fb f9e1 	bl	8000108 <__udivsi3>
 8004d46:	0003      	movs	r3, r0
 8004d48:	001a      	movs	r2, r3
 8004d4a:	0013      	movs	r3, r2
 8004d4c:	015b      	lsls	r3, r3, #5
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	189b      	adds	r3, r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	5c9b      	ldrb	r3, [r3, r2]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e0ad      	b.n	8004ec2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2221      	movs	r2, #33	@ 0x21
 8004d72:	2102      	movs	r1, #2
 8004d74:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	22ca      	movs	r2, #202	@ 0xca
 8004d7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2253      	movs	r2, #83	@ 0x53
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	2380      	movs	r3, #128	@ 0x80
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	4013      	ands	r3, r2
 8004d92:	d019      	beq.n	8004dc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10d      	bne.n	8004dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	22ff      	movs	r2, #255	@ 0xff
 8004da6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2221      	movs	r2, #33	@ 0x21
 8004dac:	2103      	movs	r1, #3
 8004dae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	2100      	movs	r1, #0
 8004db6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e082      	b.n	8004ec2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d1e5      	bne.n	8004d94 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	493f      	ldr	r1, [pc, #252]	@ (8004ed0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	22ff      	movs	r2, #255	@ 0xff
 8004de0:	401a      	ands	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	493b      	ldr	r1, [pc, #236]	@ (8004ed4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004de8:	430a      	orrs	r2, r1
 8004dea:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004dec:	4b37      	ldr	r3, [pc, #220]	@ (8004ecc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	22fa      	movs	r2, #250	@ 0xfa
 8004df2:	01d1      	lsls	r1, r2, #7
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7fb f987 	bl	8000108 <__udivsi3>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	0013      	movs	r3, r2
 8004e00:	015b      	lsls	r3, r3, #5
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10d      	bne.n	8004e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	22ff      	movs	r2, #255	@ 0xff
 8004e1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2221      	movs	r2, #33	@ 0x21
 8004e24:	2103      	movs	r1, #3
 8004e26:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e046      	b.n	8004ec2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2204      	movs	r2, #4
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d0e5      	beq.n	8004e0c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2107      	movs	r1, #7
 8004e4c:	438a      	bics	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6899      	ldr	r1, [r3, #8]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004e68:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004e6e:	2180      	movs	r1, #128	@ 0x80
 8004e70:	0349      	lsls	r1, r1, #13
 8004e72:	430a      	orrs	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004e76:	4b18      	ldr	r3, [pc, #96]	@ (8004ed8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	4b17      	ldr	r3, [pc, #92]	@ (8004ed8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004e7c:	2180      	movs	r1, #128	@ 0x80
 8004e7e:	0349      	lsls	r1, r1, #13
 8004e80:	430a      	orrs	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2180      	movs	r1, #128	@ 0x80
 8004e90:	01c9      	lsls	r1, r1, #7
 8004e92:	430a      	orrs	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2180      	movs	r1, #128	@ 0x80
 8004ea2:	00c9      	lsls	r1, r1, #3
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	22ff      	movs	r2, #255	@ 0xff
 8004eae:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2221      	movs	r2, #33	@ 0x21
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b006      	add	sp, #24
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	200007e8 	.word	0x200007e8
 8004ed0:	fffffbff 	.word	0xfffffbff
 8004ed4:	fffffb7f 	.word	0xfffffb7f
 8004ed8:	40010400 	.word	0x40010400

08004edc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	5c9b      	ldrb	r3, [r3, r2]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e04e      	b.n	8004f94 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	2101      	movs	r1, #1
 8004efc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2221      	movs	r2, #33	@ 0x21
 8004f02:	2102      	movs	r1, #2
 8004f04:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	22ca      	movs	r2, #202	@ 0xca
 8004f0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2253      	movs	r2, #83	@ 0x53
 8004f14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	491e      	ldr	r1, [pc, #120]	@ (8004f9c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8004f22:	400a      	ands	r2, r1
 8004f24:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	491b      	ldr	r1, [pc, #108]	@ (8004fa0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8004f32:	400a      	ands	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f36:	f7fd fe19 	bl	8002b6c <HAL_GetTick>
 8004f3a:	0003      	movs	r3, r0
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004f3e:	e016      	b.n	8004f6e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f40:	f7fd fe14 	bl	8002b6c <HAL_GetTick>
 8004f44:	0002      	movs	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad2      	subs	r2, r2, r3
 8004f4a:	23fa      	movs	r3, #250	@ 0xfa
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d90d      	bls.n	8004f6e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	22ff      	movs	r2, #255	@ 0xff
 8004f58:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2221      	movs	r2, #33	@ 0x21
 8004f5e:	2103      	movs	r1, #3
 8004f60:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	2100      	movs	r1, #0
 8004f68:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e012      	b.n	8004f94 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2204      	movs	r2, #4
 8004f76:	4013      	ands	r3, r2
 8004f78:	d0e2      	beq.n	8004f40 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	22ff      	movs	r2, #255	@ 0xff
 8004f80:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2221      	movs	r2, #33	@ 0x21
 8004f86:	2101      	movs	r1, #1
 8004f88:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	2100      	movs	r1, #0
 8004f90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	0018      	movs	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b004      	add	sp, #16
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	fffffbff 	.word	0xfffffbff
 8004fa0:	ffffbfff 	.word	0xffffbfff

08004fa4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004fac:	4b13      	ldr	r3, [pc, #76]	@ (8004ffc <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8004fae:	2280      	movs	r2, #128	@ 0x80
 8004fb0:	0352      	lsls	r2, r2, #13
 8004fb2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	2380      	movs	r3, #128	@ 0x80
 8004fbc:	01db      	lsls	r3, r3, #7
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d014      	beq.n	8004fec <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	2380      	movs	r3, #128	@ 0x80
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d00d      	beq.n	8004fec <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	22ff      	movs	r2, #255	@ 0xff
 8004fd8:	401a      	ands	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4908      	ldr	r1, [pc, #32]	@ (8005000 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f000 f80c 	bl	8005004 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2221      	movs	r2, #33	@ 0x21
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	5499      	strb	r1, [r3, r2]
}
 8004ff4:	46c0      	nop			@ (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40010400 	.word	0x40010400
 8005000:	fffffb7f 	.word	0xfffffb7f

08005004 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b002      	add	sp, #8
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e07b      	b.n	800511e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	2382      	movs	r3, #130	@ 0x82
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	429a      	cmp	r2, r3
 8005038:	d009      	beq.n	800504e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	61da      	str	r2, [r3, #28]
 8005040:	e005      	b.n	800504e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2251      	movs	r2, #81	@ 0x51
 8005058:	5c9b      	ldrb	r3, [r3, r2]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d107      	bne.n	8005070 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2250      	movs	r2, #80	@ 0x50
 8005064:	2100      	movs	r1, #0
 8005066:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	0018      	movs	r0, r3
 800506c:	f7fd fc7e 	bl	800296c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2251      	movs	r2, #81	@ 0x51
 8005074:	2102      	movs	r1, #2
 8005076:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2140      	movs	r1, #64	@ 0x40
 8005084:	438a      	bics	r2, r1
 8005086:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	2382      	movs	r3, #130	@ 0x82
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	401a      	ands	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6899      	ldr	r1, [r3, #8]
 8005096:	2384      	movs	r3, #132	@ 0x84
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	400b      	ands	r3, r1
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68d9      	ldr	r1, [r3, #12]
 80050a2:	2380      	movs	r3, #128	@ 0x80
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	400b      	ands	r3, r1
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2102      	movs	r1, #2
 80050b0:	400b      	ands	r3, r1
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	2101      	movs	r1, #1
 80050ba:	400b      	ands	r3, r1
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6999      	ldr	r1, [r3, #24]
 80050c2:	2380      	movs	r3, #128	@ 0x80
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	400b      	ands	r3, r1
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	2138      	movs	r1, #56	@ 0x38
 80050d0:	400b      	ands	r3, r1
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	2180      	movs	r1, #128	@ 0x80
 80050da:	400b      	ands	r3, r1
 80050dc:	431a      	orrs	r2, r3
 80050de:	0011      	movs	r1, r2
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	019b      	lsls	r3, r3, #6
 80050e8:	401a      	ands	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	0c1b      	lsrs	r3, r3, #16
 80050f8:	2204      	movs	r2, #4
 80050fa:	4013      	ands	r3, r2
 80050fc:	0019      	movs	r1, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	2210      	movs	r2, #16
 8005104:	401a      	ands	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2251      	movs	r2, #81	@ 0x51
 8005118:	2101      	movs	r1, #1
 800511a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	0018      	movs	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	b002      	add	sp, #8
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b088      	sub	sp, #32
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	603b      	str	r3, [r7, #0]
 8005132:	1dbb      	adds	r3, r7, #6
 8005134:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005136:	231f      	movs	r3, #31
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2250      	movs	r2, #80	@ 0x50
 8005142:	5c9b      	ldrb	r3, [r3, r2]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_SPI_Transmit+0x26>
 8005148:	2302      	movs	r3, #2
 800514a:	e145      	b.n	80053d8 <HAL_SPI_Transmit+0x2b2>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2250      	movs	r2, #80	@ 0x50
 8005150:	2101      	movs	r1, #1
 8005152:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005154:	f7fd fd0a 	bl	8002b6c <HAL_GetTick>
 8005158:	0003      	movs	r3, r0
 800515a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800515c:	2316      	movs	r3, #22
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	1dba      	adds	r2, r7, #6
 8005162:	8812      	ldrh	r2, [r2, #0]
 8005164:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2251      	movs	r2, #81	@ 0x51
 800516a:	5c9b      	ldrb	r3, [r3, r2]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	d004      	beq.n	800517c <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005172:	231f      	movs	r3, #31
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	2202      	movs	r2, #2
 8005178:	701a      	strb	r2, [r3, #0]
    goto error;
 800517a:	e126      	b.n	80053ca <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_SPI_Transmit+0x64>
 8005182:	1dbb      	adds	r3, r7, #6
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800518a:	231f      	movs	r3, #31
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	2201      	movs	r2, #1
 8005190:	701a      	strb	r2, [r3, #0]
    goto error;
 8005192:	e11a      	b.n	80053ca <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2251      	movs	r2, #81	@ 0x51
 8005198:	2103      	movs	r1, #3
 800519a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	1dba      	adds	r2, r7, #6
 80051ac:	8812      	ldrh	r2, [r2, #0]
 80051ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	1dba      	adds	r2, r7, #6
 80051b4:	8812      	ldrh	r2, [r2, #0]
 80051b6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	2380      	movs	r3, #128	@ 0x80
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	429a      	cmp	r2, r3
 80051e0:	d110      	bne.n	8005204 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2140      	movs	r1, #64	@ 0x40
 80051ee:	438a      	bics	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2180      	movs	r1, #128	@ 0x80
 80051fe:	01c9      	lsls	r1, r1, #7
 8005200:	430a      	orrs	r2, r1
 8005202:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2240      	movs	r2, #64	@ 0x40
 800520c:	4013      	ands	r3, r2
 800520e:	2b40      	cmp	r3, #64	@ 0x40
 8005210:	d007      	beq.n	8005222 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2140      	movs	r1, #64	@ 0x40
 800521e:	430a      	orrs	r2, r1
 8005220:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	2380      	movs	r3, #128	@ 0x80
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	429a      	cmp	r2, r3
 800522c:	d152      	bne.n	80052d4 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d004      	beq.n	8005240 <HAL_SPI_Transmit+0x11a>
 8005236:	2316      	movs	r3, #22
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d143      	bne.n	80052c8 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005244:	881a      	ldrh	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	1c9a      	adds	r2, r3, #2
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005264:	e030      	b.n	80052c8 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2202      	movs	r2, #2
 800526e:	4013      	ands	r3, r2
 8005270:	2b02      	cmp	r3, #2
 8005272:	d112      	bne.n	800529a <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005278:	881a      	ldrh	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005284:	1c9a      	adds	r2, r3, #2
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005298:	e016      	b.n	80052c8 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800529a:	f7fd fc67 	bl	8002b6c <HAL_GetTick>
 800529e:	0002      	movs	r2, r0
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d802      	bhi.n	80052b0 <HAL_SPI_Transmit+0x18a>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	3301      	adds	r3, #1
 80052ae:	d102      	bne.n	80052b6 <HAL_SPI_Transmit+0x190>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d108      	bne.n	80052c8 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80052b6:	231f      	movs	r3, #31
 80052b8:	18fb      	adds	r3, r7, r3
 80052ba:	2203      	movs	r2, #3
 80052bc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2251      	movs	r2, #81	@ 0x51
 80052c2:	2101      	movs	r1, #1
 80052c4:	5499      	strb	r1, [r3, r2]
          goto error;
 80052c6:	e080      	b.n	80053ca <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1c9      	bne.n	8005266 <HAL_SPI_Transmit+0x140>
 80052d2:	e053      	b.n	800537c <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <HAL_SPI_Transmit+0x1c0>
 80052dc:	2316      	movs	r3, #22
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d145      	bne.n	8005372 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	7812      	ldrb	r2, [r2, #0]
 80052f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800530c:	e031      	b.n	8005372 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2202      	movs	r2, #2
 8005316:	4013      	ands	r3, r2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d113      	bne.n	8005344 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	7812      	ldrb	r2, [r2, #0]
 8005328:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005342:	e016      	b.n	8005372 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005344:	f7fd fc12 	bl	8002b6c <HAL_GetTick>
 8005348:	0002      	movs	r2, r0
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d802      	bhi.n	800535a <HAL_SPI_Transmit+0x234>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	3301      	adds	r3, #1
 8005358:	d102      	bne.n	8005360 <HAL_SPI_Transmit+0x23a>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d108      	bne.n	8005372 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8005360:	231f      	movs	r3, #31
 8005362:	18fb      	adds	r3, r7, r3
 8005364:	2203      	movs	r2, #3
 8005366:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2251      	movs	r2, #81	@ 0x51
 800536c:	2101      	movs	r1, #1
 800536e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005370:	e02b      	b.n	80053ca <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1c8      	bne.n	800530e <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	0018      	movs	r0, r3
 8005384:	f000 f8ba 	bl	80054fc <SPI_EndRxTxTransaction>
 8005388:	1e03      	subs	r3, r0, #0
 800538a:	d002      	beq.n	8005392 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d004      	beq.n	80053c2 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80053b8:	231f      	movs	r3, #31
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	2201      	movs	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	e003      	b.n	80053ca <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2251      	movs	r2, #81	@ 0x51
 80053c6:	2101      	movs	r1, #1
 80053c8:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2250      	movs	r2, #80	@ 0x50
 80053ce:	2100      	movs	r1, #0
 80053d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80053d2:	231f      	movs	r3, #31
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	781b      	ldrb	r3, [r3, #0]
}
 80053d8:	0018      	movs	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	b008      	add	sp, #32
 80053de:	bd80      	pop	{r7, pc}

080053e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	1dfb      	adds	r3, r7, #7
 80053ee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053f0:	f7fd fbbc 	bl	8002b6c <HAL_GetTick>
 80053f4:	0002      	movs	r2, r0
 80053f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	18d3      	adds	r3, r2, r3
 80053fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005400:	f7fd fbb4 	bl	8002b6c <HAL_GetTick>
 8005404:	0003      	movs	r3, r0
 8005406:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005408:	4b3a      	ldr	r3, [pc, #232]	@ (80054f4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	015b      	lsls	r3, r3, #5
 800540e:	0d1b      	lsrs	r3, r3, #20
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	4353      	muls	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005416:	e058      	b.n	80054ca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	3301      	adds	r3, #1
 800541c:	d055      	beq.n	80054ca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800541e:	f7fd fba5 	bl	8002b6c <HAL_GetTick>
 8005422:	0002      	movs	r2, r0
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	429a      	cmp	r2, r3
 800542c:	d902      	bls.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x54>
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d142      	bne.n	80054ba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	21e0      	movs	r1, #224	@ 0xe0
 8005440:	438a      	bics	r2, r1
 8005442:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	2382      	movs	r3, #130	@ 0x82
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	429a      	cmp	r2, r3
 800544e:	d113      	bne.n	8005478 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	2380      	movs	r3, #128	@ 0x80
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	429a      	cmp	r2, r3
 800545a:	d005      	beq.n	8005468 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	2380      	movs	r3, #128	@ 0x80
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	429a      	cmp	r2, r3
 8005466:	d107      	bne.n	8005478 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2140      	movs	r1, #64	@ 0x40
 8005474:	438a      	bics	r2, r1
 8005476:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800547c:	2380      	movs	r3, #128	@ 0x80
 800547e:	019b      	lsls	r3, r3, #6
 8005480:	429a      	cmp	r2, r3
 8005482:	d110      	bne.n	80054a6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	491a      	ldr	r1, [pc, #104]	@ (80054f8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005490:	400a      	ands	r2, r1
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2180      	movs	r1, #128	@ 0x80
 80054a0:	0189      	lsls	r1, r1, #6
 80054a2:	430a      	orrs	r2, r1
 80054a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2251      	movs	r2, #81	@ 0x51
 80054aa:	2101      	movs	r1, #1
 80054ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2250      	movs	r2, #80	@ 0x50
 80054b2:	2100      	movs	r1, #0
 80054b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e017      	b.n	80054ea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	425a      	negs	r2, r3
 80054da:	4153      	adcs	r3, r2
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	001a      	movs	r2, r3
 80054e0:	1dfb      	adds	r3, r7, #7
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d197      	bne.n	8005418 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	0018      	movs	r0, r3
 80054ec:	46bd      	mov	sp, r7
 80054ee:	b008      	add	sp, #32
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	46c0      	nop			@ (mov r8, r8)
 80054f4:	200007e8 	.word	0x200007e8
 80054f8:	ffffdfff 	.word	0xffffdfff

080054fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005508:	4b1d      	ldr	r3, [pc, #116]	@ (8005580 <SPI_EndRxTxTransaction+0x84>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	491d      	ldr	r1, [pc, #116]	@ (8005584 <SPI_EndRxTxTransaction+0x88>)
 800550e:	0018      	movs	r0, r3
 8005510:	f7fa fdfa 	bl	8000108 <__udivsi3>
 8005514:	0003      	movs	r3, r0
 8005516:	001a      	movs	r2, r3
 8005518:	0013      	movs	r3, r2
 800551a:	015b      	lsls	r3, r3, #5
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	189b      	adds	r3, r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	2382      	movs	r3, #130	@ 0x82
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	429a      	cmp	r2, r3
 8005530:	d112      	bne.n	8005558 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	0013      	movs	r3, r2
 800553c:	2200      	movs	r2, #0
 800553e:	2180      	movs	r1, #128	@ 0x80
 8005540:	f7ff ff4e 	bl	80053e0 <SPI_WaitFlagStateUntilTimeout>
 8005544:	1e03      	subs	r3, r0, #0
 8005546:	d016      	beq.n	8005576 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554c:	2220      	movs	r2, #32
 800554e:	431a      	orrs	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e00f      	b.n	8005578 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	3b01      	subs	r3, #1
 8005562:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2280      	movs	r2, #128	@ 0x80
 800556c:	4013      	ands	r3, r2
 800556e:	2b80      	cmp	r3, #128	@ 0x80
 8005570:	d0f2      	beq.n	8005558 <SPI_EndRxTxTransaction+0x5c>
 8005572:	e000      	b.n	8005576 <SPI_EndRxTxTransaction+0x7a>
        break;
 8005574:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	0018      	movs	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	b006      	add	sp, #24
 800557e:	bd80      	pop	{r7, pc}
 8005580:	200007e8 	.word	0x200007e8
 8005584:	016e3600 	.word	0x016e3600

08005588 <memset>:
 8005588:	0003      	movs	r3, r0
 800558a:	1882      	adds	r2, r0, r2
 800558c:	4293      	cmp	r3, r2
 800558e:	d100      	bne.n	8005592 <memset+0xa>
 8005590:	4770      	bx	lr
 8005592:	7019      	strb	r1, [r3, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	e7f9      	b.n	800558c <memset+0x4>

08005598 <__libc_init_array>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	2600      	movs	r6, #0
 800559c:	4c0c      	ldr	r4, [pc, #48]	@ (80055d0 <__libc_init_array+0x38>)
 800559e:	4d0d      	ldr	r5, [pc, #52]	@ (80055d4 <__libc_init_array+0x3c>)
 80055a0:	1b64      	subs	r4, r4, r5
 80055a2:	10a4      	asrs	r4, r4, #2
 80055a4:	42a6      	cmp	r6, r4
 80055a6:	d109      	bne.n	80055bc <__libc_init_array+0x24>
 80055a8:	2600      	movs	r6, #0
 80055aa:	f000 f823 	bl	80055f4 <_init>
 80055ae:	4c0a      	ldr	r4, [pc, #40]	@ (80055d8 <__libc_init_array+0x40>)
 80055b0:	4d0a      	ldr	r5, [pc, #40]	@ (80055dc <__libc_init_array+0x44>)
 80055b2:	1b64      	subs	r4, r4, r5
 80055b4:	10a4      	asrs	r4, r4, #2
 80055b6:	42a6      	cmp	r6, r4
 80055b8:	d105      	bne.n	80055c6 <__libc_init_array+0x2e>
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	00b3      	lsls	r3, r6, #2
 80055be:	58eb      	ldr	r3, [r5, r3]
 80055c0:	4798      	blx	r3
 80055c2:	3601      	adds	r6, #1
 80055c4:	e7ee      	b.n	80055a4 <__libc_init_array+0xc>
 80055c6:	00b3      	lsls	r3, r6, #2
 80055c8:	58eb      	ldr	r3, [r5, r3]
 80055ca:	4798      	blx	r3
 80055cc:	3601      	adds	r6, #1
 80055ce:	e7f2      	b.n	80055b6 <__libc_init_array+0x1e>
 80055d0:	08005ad0 	.word	0x08005ad0
 80055d4:	08005ad0 	.word	0x08005ad0
 80055d8:	08005ad4 	.word	0x08005ad4
 80055dc:	08005ad0 	.word	0x08005ad0

080055e0 <memcpy>:
 80055e0:	2300      	movs	r3, #0
 80055e2:	b510      	push	{r4, lr}
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d100      	bne.n	80055ea <memcpy+0xa>
 80055e8:	bd10      	pop	{r4, pc}
 80055ea:	5ccc      	ldrb	r4, [r1, r3]
 80055ec:	54c4      	strb	r4, [r0, r3]
 80055ee:	3301      	adds	r3, #1
 80055f0:	e7f8      	b.n	80055e4 <memcpy+0x4>
	...

080055f4 <_init>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr

08005600 <_fini>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	46c0      	nop			@ (mov r8, r8)
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr
